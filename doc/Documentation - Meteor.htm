<!DOCTYPE html>
<!-- saved from url=(0022)http://localhost:3000/ -->
<html manifest="/app.manifest"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <link rel="stylesheet" href="http://localhost:3000/packages/code-prettify/prettify.css?8e1c89c9a44e0e837551bdfe250a672d6c21f2b7">
  <link rel="stylesheet" href="http://localhost:3000/packages/code-prettify/styles/sunburst.css?0aeaaf0c20c3465c1ff36cdd4caedd64edb8888c">
  <link rel="stylesheet" href="http://localhost:3000/client/docs.css?2b8b266a56a34e618d6c55bdcc2858e12470d227">
  <link rel="stylesheet" href="http://localhost:3000/client/splash.less.css?b7b17fd0ad010bc988cf973437d7a1fda4756832">


<script type="text/javascript">
__meteor_runtime_config__ = {"meteorRelease":"0.6.5.1","ROOT_URL":"http://localhost:3000/","ROOT_URL_PATH_PREFIX":"","serverId":"RNBrqNrQpuLvZpjd8"};
</script>

  <script type="text/javascript" src="./Documentation - Meteor_files/underscore.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/meteor.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/standard-app-packages.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/jquery.js"></script><style type="text/css"></style>
  <script type="text/javascript" src="./Documentation - Meteor_files/random.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/domutils.js"></script>
  <script type="text/javascript" src="http://localhost:3000/packages/liverange.js?e91f7e86a48123658926e1defc6ec297f6a5b630"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/universal-events.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/ordered-dict.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/deps.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/json.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/ejson.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/minimongo.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/spark.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/handlebars.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/showdown.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/code-prettify.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/jquery-waypoints.js"></script>
  <script type="text/javascript" src="http://localhost:3000/packages/less.js?7d1bf981a25a449d6270558bcfc983313c40cd26"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/templating.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/spiderable.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/logging.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/reload.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/appcache.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/webapp.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/check.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/livedata.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/mongo-livedata.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/reactive-dict.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/session.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/global-imports.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.accounts-ui.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.amplify.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.appcache.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.audit-argument-checks.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.backbone.js"></script>
  <script type="text/javascript" src="http://localhost:3000/client/packages/template.bootstrap.js?3cf1d7a43eaa4ec394ad43eb93af087f195b8d86"></script>
  <script type="text/javascript" src="http://localhost:3000/client/packages/template.coffeescript.js?c241df027578fa5be7c1f0d57b87468b21450aef"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.d3.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.force-ssl.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.jquery.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.less.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.random.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.showdown.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.spiderable.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.stylus.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.underscore.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.api.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.commandline.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.concepts.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.docs.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.introduction.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/template.packages.js"></script>
  <script type="text/javascript" src="./Documentation - Meteor_files/api.js"></script>
  <script type="text/javascript" src="http://localhost:3000/client/docs.js?fd466b28d4ecb5a8167e3e49d1b1152045610240"></script>


<meta name="fragment" content="!">
<title>Documentation - Meteor</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="http://localhost:3000/favicon.ico" type="image/x-icon">
  <link rel="shortcut icon" href="http://localhost:3000/favicon.ico" type="image/x-icon">
<script type="text/javascript">
    if (document.location.host.match(/^docs\.meteor\.com(:80)?$/)) {
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-30093278-2']);
      _gaq.push(['_setDomainName', 'preview.meteor.com']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();


      // Mixpanel. Must be loaded even in devel mode or else mixpanel.track (etc) fails.
      (function(c,a){var b,d,h,e;b=c.createElement("script");b.type="text/javascript";
      b.async=!0;b.src=("https:"===c.location.protocol?"https:":"http:")+
      '//api.mixpanel.com/site_media/js/api/mixpanel.2.js';d=c.getElementsByTagName("script")[0];
      d.parentNode.insertBefore(b,d);a._i=[];a.init=function(b,c,f){function d(a,b){
      var c=b.split(".");2==c.length&&(a=a[c[0]],b=c[1]);a[b]=function(){a.push([b].concat(
      Array.prototype.slice.call(arguments,0)))}}var g=a;"undefined"!==typeof f?g=a[f]=[]:
      f="mixpanel";g.people=g.people||[];h=['disable','track','track_pageview','track_links',
      'track_forms','register','register_once','unregister','identify','name_tag',
      'set_config','people.set','people.increment'];for(e=0;e<h.length;e++)d(g,h[e]);
      a._i.push([b,c,f])};a.__SV=1.1;window.mixpanel=a})(document,window.mixpanel||[]);
      mixpanel.init("ccbcd7e4e53fc175e04474e70961cf45");
    } else {
      mixpanel = {
        track: function () {
          // console.log("track", _.toArray(arguments));
        }
      };
    }
  </script>
<style>[touch-action="none"]{ -ms-touch-action: none; touch-action: none; }[touch-action="pan-x"]{ -ms-touch-action: pan-x; touch-action: pan-x; }[touch-action="pan-y"]{ -ms-touch-action: pan-y; touch-action: pan-y; }[touch-action="scroll"],[touch-action="pan-x pan-y"],[touch-action="pan-y pan-x"]{ -ms-touch-action: pan-x pan-y; touch-action: pan-x pan-y; }</style></head>
<body>



<div id="nav">
    <div id="nav-inner">
  
  
  
    <h1><a href="http://localhost:3000/#top" class=" ">
        Meteor 0.6.5.1
    </a></h1>
  
  
  
  
    <h2><a href="http://localhost:3000/#quickstart" class=" ">
        Quick start
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#sevenprinciples" class=" ">
        Seven principles
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#resources" class=" ">
        Resources
    </a></h2>
  
  
  
  
    <h1><a href="http://localhost:3000/#concepts" class=" ">
        Concepts
    </a></h1>
  
  
  
  
    <h2><a href="http://localhost:3000/#whatismeteor" class=" ">
        What is Meteor?
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#structuringyourapp" class=" ">
        Structuring your app
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#dataandsecurity" class=" ">
        Data and security
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#reactivity" class=" ">
        Reactivity
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#livehtml" class=" ">
        Live HTML
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#templates" class=" ">
        Templates
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#usingpackages" class=" ">
        Using packages
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#namespacing" class=" ">
        Namespacing
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#deploying" class=" ">
        Deploying
    </a></h2>
  
  
  
  
    <h2><a href="http://localhost:3000/#writingpackages" class=" ">
        Writing packages
    </a></h2>
  
  
  
  
    <h1><a href="http://localhost:3000/#api" class=" ">
        API
    </a></h1>
  
  
  
  
    <h2><a href="http://localhost:3000/#core" class=" ">
        Core
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_isclient" class=" ">
        Meteor.isClient
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_isserver" class=" ">
        Meteor.isServer
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_startup" class=" ">
        Meteor.startup
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_absoluteurl" class=" ">
        Meteor.absoluteUrl
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_settings" class=" ">
        Meteor.settings
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_release" class=" ">
        Meteor.release
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#publishandsubscribe" class=" ">
        Publish and subscribe
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_publish" class=" ">
        Meteor.publish
    </a></h3>
  
  
  
  
    <h4><a href="http://localhost:3000/#publish_userId" class=" ">
        <i>this</i>.userId
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#publish_added" class=" ">
        <i>this</i>.added
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#publish_changed" class=" ">
        <i>this</i>.changed
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#publish_removed" class=" ">
        <i>this</i>.removed
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#publish_ready" class=" ">
        <i>this</i>.ready
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#publish_onstop" class=" ">
        <i>this</i>.onStop
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#publish_error" class=" ">
        <i>this</i>.error
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#publish_stop" class=" ">
        <i>this</i>.stop
    </a></h4>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_subscribe" class=" ">
        Meteor.subscribe
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#methods_header" class=" ">
        Methods
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_methods" class=" ">
        Meteor.methods
    </a></h3>
  
  
  
  
    <h4><a href="http://localhost:3000/#method_userId" class=" ">
        <i>this</i>.userId
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#method_setUserId" class=" ">
        <i>this</i>.setUserId
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#method_issimulation" class=" ">
        <i>this</i>.isSimulation
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#method_unblock" class=" ">
        <i>this</i>.unblock
    </a></h4>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_error" class=" ">
        Meteor.Error
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_call" class=" ">
        Meteor.call
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_apply" class=" ">
        Meteor.apply
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#connections" class=" ">
        Server connections
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_status" class=" ">
        Meteor.status
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_reconnect" class=" ">
        Meteor.reconnect
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_disconnect" class=" ">
        Meteor.disconnect
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#ddp_connect" class=" ">
        DDP.connect
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#collections" class=" ">
        Collections
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_collection" class=" ">
        Meteor.Collection
    </a></h3>
  
  
  
  
    <h4><a href="http://localhost:3000/#find" class=" ">
        <i>collection</i>.find
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#findone" class=" ">
        <i>collection</i>.findOne
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#insert" class=" ">
        <i>collection</i>.insert
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#update" class=" ">
        <i>collection</i>.update
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#remove" class=" ">
        <i>collection</i>.remove
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#allow" class=" ">
        <i>collection</i>.allow
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#deny" class=" ">
        <i>collection</i>.deny
    </a></h4>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_collection_cursor" class=" ">
        Meteor.Collection.Cursor
    </a></h3>
  
  
  
  
    <h4><a href="http://localhost:3000/#foreach" class=" ">
        <i>cursor</i>.forEach
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#map" class=" ">
        <i>cursor</i>.map
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#fetch" class=" ">
        <i>cursor</i>.fetch
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#count" class=" ">
        <i>cursor</i>.count
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#rewind" class=" ">
        <i>cursor</i>.rewind
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#observe" class=" ">
        <i>cursor</i>.observe
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#observe_changes" class=" ">
        <i>cursor</i>.observeChanges
    </a></h4>
  
  
  
    <div class="spacer"> </div>
  
  
  
  
  
    <h3><a href="http://localhost:3000/#collection_object_id" class=" ">
        Meteor.Collection.ObjectID
    </a></h3>
  
  
  
    <div class="spacer"> </div>
  
  
  
  
  
    <h3><a href="http://localhost:3000/#selectors" class=" noncode">
        Selectors
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#modifiers" class=" noncode">
        Modifiers
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#sortspecifiers" class=" noncode">
        Sort specifiers
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#fieldspecifiers" class=" noncode">
        Field specifiers
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#session" class=" ">
        Session
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#session_set" class=" ">
        Session.set
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#session_set_default" class=" ">
        Session.setDefault
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#session_get" class=" ">
        Session.get
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#session_equals" class=" ">
        Session.equals
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#accounts_api" class=" ">
        Accounts
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_user" class=" ">
        Meteor.user
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_userid" class=" ">
        Meteor.userId
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_users" class=" ">
        Meteor.users
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_loggingin" class=" ">
        Meteor.loggingIn
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_logout" class=" ">
        Meteor.logout
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_loginwithpassword" class=" ">
        Meteor.loginWithPassword
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_loginwithexternalservice" class=" ">
        Meteor.loginWithFacebook
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_loginwithexternalservice" class=" ">
        Meteor.loginWithGithub
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_loginwithexternalservice" class=" ">
        Meteor.loginWithGoogle
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_loginwithexternalservice" class=" ">
        Meteor.loginWithMeetup
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_loginwithexternalservice" class=" ">
        Meteor.loginWithTwitter
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_loginwithexternalservice" class=" ">
        Meteor.loginWithWeibo
    </a></h3>
  
  
  
    <div class="spacer"> </div>
  
  
  
  
  
    <h3><a href="http://localhost:3000/#template_currentuser" class=" ">
        {{currentUser}}
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#template_loggingin" class=" ">
        {{loggingIn}}
    </a></h3>
  
  
  
    <div class="spacer"> </div>
  
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_config" class=" ">
        Accounts.config
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_ui_config" class=" ">
        Accounts.ui.config
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_validatenewuser" class=" ">
        Accounts.validateNewUser
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_oncreateuser" class=" ">
        Accounts.onCreateUser
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#accounts_passwords" class=" ">
        Passwords
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_createuser" class=" ">
        Accounts.createUser
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_changepassword" class=" ">
        Accounts.changePassword
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_forgotpassword" class=" ">
        Accounts.forgotPassword
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_resetpassword" class=" ">
        Accounts.resetPassword
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_setpassword" class=" ">
        Accounts.setPassword
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_verifyemail" class=" ">
        Accounts.verifyEmail
    </a></h3>
  
  
  
    <div class="spacer"> </div>
  
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_sendresetpasswordemail" class=" ">
        Accounts.sendResetPasswordEmail
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_sendenrollmentemail" class=" ">
        Accounts.sendEnrollmentEmail
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_sendverificationemail" class=" ">
        Accounts.sendVerificationEmail
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#accounts_emailtemplates" class=" ">
        Accounts.emailTemplates
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#templates_api" class=" ">
        Templates
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#template_call" class=" ">
        Template.<i>myTemplate</i>.
    </a></h3>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_rendered" class=" ">
        rendered
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_created" class=" ">
        created
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_destroyed" class=" ">
        destroyed
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_events" class=" ">
        events
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_helpers" class=" ">
        helpers
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_preserve" class=" ">
        preserve
    </a></h4>
  
  
  
  
    <h3><a href="http://localhost:3000/#template_inst" class=" ">
        Template instances
    </a></h3>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_findAll" class=" ">
        <i>this</i>.findAll
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_find" class=" ">
        <i>this</i>.find
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_firstNode" class=" ">
        <i>this</i>.firstNode
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_lastNode" class=" ">
        <i>this</i>.lastNode
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#template_data" class=" ">
        <i>this</i>.data
    </a></h4>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_render" class=" ">
        Meteor.render
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_renderlist" class=" ">
        Meteor.renderList
    </a></h3>
  
  
  
    <div class="spacer"> </div>
  
  
  
  
  
    <h3><a href="http://localhost:3000/#eventmaps" class=" noncode">
        Event maps
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#constant" class=" noncode">
        Constant regions
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#isolate" class=" noncode">
        Reactivity isolation
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#match" class=" ">
        Match
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#check" class=" ">
        check
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#match_test" class=" ">
        Match.test
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#matchpatterns" class=" noncode">
        Match patterns
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#timers" class=" ">
        Timers
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_settimeout" class=" ">
        Meteor.setTimeout
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_setinterval" class=" ">
        Meteor.setInterval
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_cleartimeout" class=" ">
        Meteor.clearTimeout
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteor_clearinterval" class=" ">
        Meteor.clearInterval
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#deps" class=" ">
        Deps
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#deps_autorun" class=" ">
        Deps.autorun
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#deps_flush" class=" ">
        Deps.flush
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#deps_nonreactive" class=" ">
        Deps.nonreactive
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#deps_active" class=" ">
        Deps.active
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#deps_currentcomputation" class=" ">
        Deps.currentComputation
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#deps_oninvalidate" class=" ">
        Deps.onInvalidate
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#deps_afterflush" class=" ">
        Deps.afterFlush
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#deps_computation" class=" ">
        Deps.Computation
    </a></h3>
  
  
  
  
    <h4><a href="http://localhost:3000/#computation_stop" class=" ">
        <i>computation</i>.stop
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#computation_invalidate" class=" ">
        <i>computation</i>.invalidate
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#computation_oninvalidate" class=" ">
        <i>computation</i>.onInvalidate
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#computation_stopped" class=" ">
        <i>computation</i>.stopped
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#computation_invalidated" class=" ">
        <i>computation</i>.invalidated
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#computation_firstrun" class=" ">
        <i>computation</i>.firstRun
    </a></h4>
  
  
  
  
    <h3><a href="http://localhost:3000/#deps_dependency" class=" ">
        Deps.Dependency
    </a></h3>
  
  
  
  
    <h4><a href="http://localhost:3000/#dependency_changed" class=" ">
        <i>dependency</i>.changed
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#dependency_depend" class=" ">
        <i>dependency</i>.depend
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#dependency_hasdependents" class=" ">
        <i>dependency</i>.hasDependents
    </a></h4>
  
  
  
  
    <h2><a href="http://localhost:3000/#ejson" class=" ">
        EJSON
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#ejson_parse" class=" ">
        EJSON.parse
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#ejson_stringify" class=" ">
        EJSON.stringify
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#ejson_from_json_value" class=" ">
        EJSON.fromJSONValue
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#ejson_to_json_value" class=" ">
        EJSON.toJSONValue
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#ejson_equals" class=" ">
        EJSON.equals
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#ejson_clone" class=" ">
        EJSON.clone
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#ejson_new_binary" class=" ">
        EJSON.newBinary
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#ejson_is_binary" class=" ">
        EJSON.isBinary
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#ejson_add_type" class=" ">
        EJSON.addType
    </a></h3>
  
  
  
  
    <h4><a href="http://localhost:3000/#ejson_type_clone" class=" ">
        <i>instance</i>.clone
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#ejson_type_equals" class=" ">
        <i>instance</i>.equals
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#ejson_type_typeName" class=" ">
        <i>instance</i>.typeName
    </a></h4>
  
  
  
  
    <h4><a href="http://localhost:3000/#ejson_type_toJSONValue" class=" ">
        <i>instance</i>.toJSONValue
    </a></h4>
  
  
  
  
    <h2><a href="http://localhost:3000/#http" class=" ">
        HTTP
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#http_call" class=" ">
        HTTP.call
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#http_get" class=" ">
        HTTP.get
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#http_post" class=" ">
        HTTP.post
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#http_put" class=" ">
        HTTP.put
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#http_del" class=" ">
        HTTP.del
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#email" class=" ">
        Email
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#email_send" class=" ">
        Email.send
    </a></h3>
  
  
  
  
    <h2><a href="http://localhost:3000/#assets" class=" ">
        Assets
    </a></h2>
  
  
  
  
    <h3><a href="http://localhost:3000/#assets_getText" class=" ">
        Assets.getText
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#assets_getBinary" class=" ">
        Assets.getBinary
    </a></h3>
  
  
  
  
    <h1><a href="http://localhost:3000/#packages" class=" ">
        Packages
    </a></h1>
  
  
  
  
    <h3><a href="http://localhost:3000/#accountsui" class=" ">
        accounts-ui
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#amplify" class=" ">
        amplify
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#appcache" class=" ">
        appcache
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#auditargumentchecks" class=" ">
        audit-argument-checks
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#backbone" class=" ">
        backbone
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#bootstrap" class=" ">
        bootstrap
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#coffeescript" class=" ">
        coffeescript
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#d3" class=" ">
        d3
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#forcessl" class=" ">
        force-ssl
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#jquery" class=" ">
        jquery
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#less" class=" ">
        less
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#random" class=" ">
        random
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#spiderable" class=" ">
        spiderable
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#stylus" class=" ">
        stylus
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#showdown" class=" ">
        showdown
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#underscore" class=" ">
        underscore
    </a></h3>
  
  
  
  
    <h1><a href="http://localhost:3000/#commandline" class=" ">
        Command line
    </a></h1>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteorhelp" class=" ">
        meteor help
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteorrun" class=" ">
        meteor run
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteorcreate" class=" ">
        meteor create
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteordeploy" class=" ">
        meteor deploy
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteorlogs" class=" ">
        meteor logs
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteorupdate" class=" ">
        meteor update
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteoradd" class=" ">
        meteor add
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteorremove" class=" ">
        meteor remove
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteorlist" class=" ">
        meteor list
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteormongo" class=" ">
        meteor mongo
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteorreset" class=" ">
        meteor reset
    </a></h3>
  
  
  
  
    <h3><a href="http://localhost:3000/#meteorbundle" class=" ">
        meteor bundle
    </a></h3>
  
  
</div>
  </div>
  <div id="main">
    <div id="top"></div>
    <h1 class="main-headline">Meteor 0.6.5.1</h1>
    <div id="introduction">
<!-- clicking this anchor in the left bar should scroll to top of doc,
not here -->
<!-- XXX by: (three headshot thumbnails w names) -->

<p><b><em>Meteor is an ultra-simple environment for building modern websites.
What once took weeks, even with the best tools, now takes hours with
Meteor.</em></b></p>

<p>The web was originally designed to work in the same way that mainframes
worked in the 70s.  The application server rendered a screen and sent it
over the network to a dumb terminal. Whenever the user did anything,
that server rerendered a whole new screen. This model served the Web
well for over a decade. It gave rise to LAMP, Rails, Django, PHP.</p>

<p>But the best teams, with the biggest budgets and the longest schedules,
now build applications in JavaScript that run on the client.  These apps
have stellar interfaces.  They don't reload pages.  They are reactive:
changes from any client immediately appear on everyone's screen.</p>

<p>They've built them the hard way.  Meteor makes it an order of
magnitude simpler, and a lot more fun.  You can build a complete
application in a weekend, or a sufficiently caffeinated hackathon.  No
longer do you need to provision server resources, or deploy API
endpoints in the cloud, or manage a database, or wrangle an ORM layer,
or swap back and forth between JavaScript and Ruby, or broadcast data
invalidations to clients.</p>

<p>Meteor is a work in progress, but we hope it shows the direction of
our thinking.  We'd love to hear your feedback.</p>

<h2 id="quickstart">Quick start!</h2>

<!-- change colors on these. $ and command output in grey, rest in
white -->

<p>The following works on all <a href="https://github.com/meteor/meteor/wiki/Supported-Platforms" target="_blank">supported
platforms</a>.</p>

<p>Install Meteor:</p>

<pre>$ curl https://install.meteor.com | /bin/sh
</pre>

<p>Create a project:</p>

<pre>$ meteor create myapp
</pre>

<p>Run it locally:</p>

<pre>$ cd myapp
$ meteor
=&gt; Meteor server running on: http://localhost:3000/
</pre>

<p>Unleash it on the world (on a free server we provide):</p>

<pre>$ meteor deploy myapp.meteor.com
</pre>

<h2 id="sevenprinciples">Seven Principles of Meteor</h2>

<!-- wire with [1,2,3] on it -->

<ul>
<li><em>Data on the Wire</em>. Don't send HTML over the network. Send data and
let the client decide how to render it.</li>
</ul>

<!-- two people, one speech bubble coming out of both of their mouths,
containing '{}' -->

<ul>
<li><em>One Language.</em> Write both the client and the server parts of your
interface in JavaScript.</li>
</ul>

<!-- globe, with the same database icon in US and Russia -->

<ul>
<li><em>Database Everywhere</em>. Use the same transparent API to access your
database from the client or the server.</li>
</ul>

<!-- clock with zero time elapsed. or clock on left with zero time
elapsed, horizontal bold line to a clock with zero time elapsed, but a
line at a 45 degree angle to a a clock in grey with 100 ms
elapsed. like shades of relativity -->

<ul>
<li><em>Latency Compensation</em>. On the client, use prefetching and model
simulation to make it look like you have a zero-latency connection to
the database.</li>
</ul>

<!-- knee getting hit with hammer like in reflex test -->

<ul>
<li><p><em>Full Stack Reactivity</em>. Make realtime the default. All layers, from
database to template, should make an event-driven interface available.</p></li>
<li><p><em>Embrace the Ecosystem</em>. Meteor is open source and integrates,
rather than replaces, existing open source tools and frameworks.</p></li>
</ul>

<!-- zen circle -->

<ul>
<li><em>Simplicity Equals Productivity</em>. The best way to make something
seem simple is to have it actually <em>be</em> simple. Accomplish this through
clean, classically beautiful APIs.</li>
</ul>

<h2 id="resources">Developer Resources</h2>

<!-- https://github.com/blog/273-github-ribbons -->

<p><a href="http://github.com/meteor/meteor" target="_blank"><img class="github-ribbon visible-desktop" style="position: absolute; top: 0; right: 0; border: 0;" src="http://localhost:3000/forkme_right_red_aa0000.png" alt="Fork me on GitHub"></a></p>

<p>If anything in Meteor catches your interest, we hope you'll get involved
with the project!</p>

<dl class="involved">
<dt><span>Stack Overflow</span></dt>
<dd>The best place to ask (and answer!) technical questions is on <a href="http://stackoverflow.com/questions/tagged/meteor" target="_blank">Stack
  Overflow</a>.  Be sure to add
  the <code>meteor</code> tag to your question.
</dd>

<dt><span>Mailing lists</span></dt>
<dd>
  We have two mailing lists for Meteor.  <nobr><a href="http://groups.google.com/group/meteor-talk" target="_blank"><code>meteor-talk@googlegroups.com</code></a></nobr>
  is for general questions, requests for help, and new project
  announcements.
  <nobr><a href="http://groups.google.com/group/meteor-core" target="_blank"><code>meteor-core@googlegroups.com</code></a></nobr>
  is for discussing Meteor internals and proposed changes.
</dd>

<dt><span>IRC</span></dt>
<dd><code>#meteor</code> on <code>irc.freenode.net</code>. The
developers hang out here and will answer your questions whenever they
can.</dd>

<dt><span>GitHub</span></dt>
<dd>The code is on <a href="http://github.com/meteor/meteor" target="_blank">GitHub</a>. The best way to send a patch is with a GitHub pull request, and the best way to file a bug is in the <a href="https://github.com/meteor/meteor/issues/" target="_blank">GitHub bug tracker</a>, after reading our <a href="https://github.com/meteor/meteor/blob/devel/Contributing.md#filing-bug-reports" target="_blank">guide to filing bug reports</a>. If the issue contains sensitive information or raises a security concern, email <code>security</code><code>@</code><code>meteor</code><code>.</code><code>com</code> instead, which will page the security team.</dd>
</dl>
</div>
    <h1 id="concepts">Concepts</h1>

We've written our fair share of single-page JavaScript applications by hand.
Writing an entire application in one language (JavaScript) with one
data format (JSON) is a real joy.  Meteor is everything we wanted
when writing those apps.

<h2 id="whatismeteor">What is Meteor?</h2>

<p>Meteor is two things:</p>

<ul>
<li><p>A <em>library of packages</em>: pre-written, self-contained modules that
you might need in your app.<br>
There are about a dozen core Meteor
packages that most any app will use (for example <code>webapp</code>, which
handles incoming HTTP connections, and <code>templating</code>, which lets you
make HTML templates that automatically update live as data changes).
Then there are optional packages like <code>email</code>, which lets your app
send emails, or the Meteor Accounts series (<code>account-password</code>,
<code>accounts-facebook</code>, <code>accounts-ui</code>, and others) which provide a
full-featured user account system that you can drop right into your
app. And beyond these "official" packages, there are hundreds of
community-written packages in <a href="https://atmosphere.meteor.com/" target="_blank">Atmosphere</a>,
one of which might do just what you need.</p></li>
<li><p>A <em>command-line tool</em> called <code>meteor</code>.<br>
<code>meteor</code> is a build tool analogous to <code>make</code>, <code>rake</code>, or the non-visual parts of
Visual Studio. It gathers up all of the source files and assets in your
application, carries out any necessary build steps (such as compiling
<a href="http://coffeescript.org/" target="_blank">CoffeeScript</a>, minifying CSS, building
<a href="https://npmjs.org/" target="_blank">npm</a> modules, or generating source maps), fetches the
packages used by your app, and outputs a standalone, ready-to-run application
bundle. In development mode it can do all of this interactively, so that
whenever you change a file you immediately see the changes in your browser. It's
super easy to use out of the box, but it's also extensible: you can add support
for new languages and compilers by adding build plugin packages to your app.</p></li>
</ul>

<p>The key idea in the Meteor package system is that <em>everything should
work identically in the browser and on the server</em> (wherever it makes
sense, of course: browsers can't send email and servers can't capture
mouse events). Our whole ecosystem has been built from the ground up
to support this.</p>















<div class="note">
    





<p><code>meteor</code> cannot yet fetch packages from Atmosphere. If you are using
Atmosphere packages you should take a look at
<a href="http://oortcloud.github.io/meteorite/" target="_blank">Meteorite</a>, a tool that will
help you download and manage your Atmosphere packages.</p>

<p>In Meteor 1.0, the <code>meteor</code> build tool will have full support for
Atmosphere.</p>






  </div>














<h2 id="structuringyourapp">Structuring your application</h2>

<p>A Meteor application is a mix of JavaScript that runs inside a client web
browser, JavaScript that runs on the Meteor server inside a
<a href="http://nodejs.org/" target="_blank">Node.js</a> container, and all the supporting HTML fragments,
CSS rules, and static assets.  Meteor automates the packaging and transmission
of these different components.  And, it is quite flexible about how you choose
to structure those components in your file tree.</p>

<p>The only server assets are JavaScript and files in the <code>private</code> subdirectory.
Meteor gathers all your JavaScript
files, excluding anything under the <code>client</code>, <code>public</code>, and <code>private</code>
subdirectories, and loads them into a Node.js
server instance inside a fiber.  In Meteor, your server code runs in
a single thread per request, not in the asynchronous callback style
typical of Node.  We find the linear execution model a better fit for
the typical server code in a Meteor application.</p>

<p>Meteor gathers any files under the <code>private</code> subdirectory and makes the contents
of these files available to server code via the <a href="http://localhost:3000/#assets"><code>Assets</code></a> API. The
<code>private</code> subdirectory is the place for any files that should be accessible to
server code but not served to the client, like private data files.</p>

<p>There are more assets to consider on the client side.  Meteor
gathers all JavaScript files in your tree, with the exception of
the <code>server</code>, <code>public</code>, and <code>private</code> subdirectories, for the
client.  It minifies this bundle and serves it to each new client.
You're free to use a single JavaScript file for your entire application, or
create a nested tree of separate files, or anything in between.</p>

<p>Some JavaScript libraries only work when placed in the
<code>client/compatibility</code> subdirectory.  Files in this directory are
executed without being wrapped in a new variable scope.  This means
that each top-level <code>var</code> defines a global variable. In addition,
these files are executed before other client-side JavaScript files.</p>

<p>Files outside the <code>client</code>, <code>server</code> and <code>tests</code> subdirectories are loaded on
both the client and the server!  That's the place for model definitions and
other functions.  Meteor provides the variables <a href="http://localhost:3000/#meteor_isclient"><code>isClient</code></a> and
<a href="http://localhost:3000/#meteor_isserver"><code>isServer</code></a> so that your code can alter its behavior depending
on whether it's running on the client or the server. (Files in directories named
<code>tests</code> are not loaded anywhere.)</p>

<p>Any sensitive code that you don't want served to the client, such as code
containing passwords or authentication mechanisms, should be
kept in the <code>server</code> directory.</p>

<p>CSS files are gathered together as well: the client will get a bundle with all
the CSS in your tree (excluding the <code>server</code>,
<code>public</code>, and <code>private</code> subdirectories).</p>

<p>In development mode, JavaScript and CSS files are sent individually to make
debugging easier.</p>

<p>HTML files in a Meteor application are treated quite a bit differently
from a server-side framework.  Meteor scans all the HTML files in your
directory for three top-level elements: <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code>, and
<code>&lt;template&gt;</code>.  The head and body sections are separately concatenated
into a single head and body, which are transmitted to the client on
initial page load.</p>

<p>Template sections, on the other hand, are converted into JavaScript
functions, available under the <code>Template</code> namespace.  It's
a really convenient way to ship HTML templates to the client.
See the <a href="http://localhost:3000/#templates">templates</a> section for more.</p>

<p>Lastly, the Meteor server will serve any files under the <code>public</code>
directory, just like in a Rails or Django project.  This is the place
for images, <code>favicon.ico</code>, <code>robots.txt</code>, and anything else.</p>

<p>It is best to write your application in such a way that it is
insensitive to the order in which files are loaded, for example by
using <a href="http://localhost:3000/#meteor_startup">Meteor.startup</a>, or by moving load order
sensitive code into <a href="http://localhost:3000/#usingpackages">packages</a>, which can explicitly control both
the load order of their contents and their load order with respect to
other packages. However sometimes load order dependencies in your
application are unavoidable. The JavaScript and CSS files in an
application are loaded according to these rules:</p>

<ul>
<li><p>Files in the <code>lib</code> directory at the root of your application are
loaded first.</p></li>
<li><p>Files that match <code>main.*</code> are loaded after everything else.</p></li>
<li><p>Files in subdirectories are loaded before files in parent
directories, so that files in the deepest subdirectory are loaded
first (after <code>lib</code>), and files in the root directory are loaded last
(other than <code>main.*</code>).</p></li>
<li><p>Within a directory, files are loaded in alphabetical order by
filename.</p></li>
</ul>

<p>These rules stack, so that within <code>lib</code>, for example, files are still
loaded in alphabetical order; and if there are multiple files named
<code>main.js</code>, the ones in subdirectories are loaded earlier.</p>
<h2 id="dataandsecurity">Data and security</h2>

<p>Meteor makes writing distributed client code as simple as talking to a
local database.  It's a clean, simple, and secure approach that obviates
the need to implement individual RPC endpoints, manually cache data on
the client to avoid slow roundtrips to the server, and carefully
orchestrate invalidation messages to every client as data changes.</p>

<p>In Meteor, the client and server share the same database API.  The same
exact application code — like validators and computed properties — can
often run in both places.  But while code running on the server has
direct access to the database, code running on the client does <em>not</em>.
This distinction is the basis for Meteor's data security model.</p>















<div class="note">
    





<p>By default, a new Meteor app includes the <code>autopublish</code> and <code>insecure</code>
packages, which together mimic the effect of each client having full
read/write access to the server's database.  These are useful
prototyping tools, but typically not appropriate for production
applications.  When you're ready, just remove the packages.</p>






  </div>















<p>Every Meteor client includes an in-memory database cache.  To manage the
client cache, the server <em>publishes</em> sets of JSON documents, and the
client <em>subscribes</em> to those sets.  As documents in a set change, the
server patches each client's cache.</p>

<p>Today most Meteor apps use MongoDB as their database because it is the
best supported, though support for other databases is coming in the
future. The
<a href="http://docs.meteor.com/#meteor_collection" target="_blank"><code>Meteor.Collection</code></a> class
is used to declare Mongo collections and to manipulate them. Thanks to
<code>minimongo</code>, Meteor's client-side Mongo emulator, <code>Meteor.Collection</code>
can be used from both client and server code.</p>

<pre><code>// declare collections
// this code should be included in both the client and the server
Rooms = new Meteor.Collection("rooms");
Messages = new Meteor.Collection("messages");
Parties = new Meteor.Collection("parties");

// server: populate collections with some initial documents
Rooms.insert({name: "Conference Room A"});
var myRooms = Rooms.find({}).fetch();
Messages.insert({text: "Hello world", room: myRooms[0]._id});
Parties.insert({name: "Super Bowl Party"});
</code></pre>

<p>Each document set is defined by a publish function on the server.  The
publish function runs each time a new client subscribes to a document
set.  The data in a document set can come from anywhere, but the common
case is to publish a database query.</p>

<pre><code>// server: publish all room documents
Meteor.publish("all-rooms", function () {
  return Rooms.find(); // everything
});

// server: publish all messages for a given room
Meteor.publish("messages", function (roomId) {
  check(roomId, String);
  return Messages.find({room: roomId});
});

// server: publish the set of parties the logged-in user can see.
Meteor.publish("parties", function () {
  return Parties.find({$or: [{"public": true},
                             {invited: this.userId},
                             {owner: this.userId}]});
});
</code></pre>

<p>Publish functions can provide different results to each client.  In the
last example, a logged in user can only see <code>Party</code> documents that
are public, that the user owns, or that the user has been invited to.</p>

<p>Once subscribed, the client uses its cache as a fast local database,
dramatically simplifying client code.  Reads never require a costly
round trip to the server.  And they're limited to the contents of the
cache: a query for every document in a collection on a client will only
return documents the server is publishing to that client.</p>

<pre><code>// client: start a parties subscription
Meteor.subscribe("parties");

// client: return array of Parties this client can read
return Parties.find().fetch(); // synchronous!
</code></pre>

<p>Sophisticated clients can turn subscriptions on and off to control how
much data is kept in the cache and manage network traffic.  When a
subscription is turned off, all its documents are removed from the cache
unless the same document is also provided by another active
subscription.</p>

<p>When the client <em>changes</em> one or more documents, it sends a message to
the server requesting the change.  The server checks the proposed change
against a set of allow/deny rules you write as JavaScript functions.
The server only accepts the change if all the rules pass.</p>

<pre><code>// server: don't allow client to insert a party
Parties.allow({
  insert: function (userId, party) {
    return false;
  }
});

// client: this will fail
var party = { ... };
Parties.insert(party);
</code></pre>

<p>If the server accepts the change, it applies the change to the database
and automatically propagates the change to other clients subscribed to
the affected documents.  If not, the update fails, the server's database
remains untouched, and no other client sees the update.</p>

<p>Meteor has a cute trick, though.  When a client issues a write to the
server, it also updates its local cache immediately, without waiting for
the server's response.  This means the screen will redraw right away.
If the server accepted the update — what ought to happen most of the
time in a properly behaving client — then the client got a jump on the
change and didn't have to wait for the round trip to update its own
screen.  If the server rejects the change, Meteor patches up the
client's cache with the server's result.</p>

<p>Putting it all together, these techniques accomplish latency
compensation.  Clients hold a fresh copy of the data they need, and
never need to wait for a roundtrip to the server. And when clients
modify data, those modifications can run locally without waiting for the
confirmation from the server, while still giving the server final say
over the requested change.</p>















<div class="note">
    





<p>The current release of Meteor supports MongoDB, the popular document
database, and the examples in this section use the
        <a href="http://www.mongodb.org/display/DOCS/Manual" target="_blank">MongoDB API</a>.  Future
releases will include support for other databases.</p>






  </div>















<h3 id="dataandsecurity-authentication">Authentication and user accounts</h3>

<p>Meteor includes <a href="http://localhost:3000/#accounts_api">Meteor Accounts</a>, a state-of-the-art
authentication system. It features secure password login using the
<a href="http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol" target="_blank">Secure Remote Password
protocol</a>,
and integration with external services including Facebook, GitHub,
Google, Meetup, Twitter, and Weibo. Meteor Accounts defines a
<a href="http://localhost:3000/#meteor_users"><code>Meteor.users</code></a> collection where developers can store
application-specific user data.</p>

<p>Meteor also includes pre-built forms for common tasks like login, signup,
password change, and password reset emails. You can add <a href="http://localhost:3000/#accountsui">Accounts
UI</a> to your app with just one line of code. The <code>accounts-ui</code> package even provides a configuration wizard that walks you through the steps to
set up the external login services you're using in your app.</p>

<h3 id="dataandsecurity-validation">Input validation</h3>

<p>Meteor allows your methods and publish functions to take arguments of any
<a href="http://json.org/" target="_blank">JSON</a> type. (In fact, Meteor's wire protocol supports
<a href="http://localhost:3000/#ejson">EJSON</a>, an extension of JSON which also supports other common types
like dates and binary buffers.) JavaScript's dynamic typing means you don't need
to declare precise types of every variable in your app, but it's usually helpful
to ensure that the arguments that clients are passing to your methods and
publish functions are of the type that you expect.</p>

<p>Meteor provides a <a href="http://localhost:3000/#match">lightweight library</a> for checking that arguments and
other values are the type you expect them to be. Simply start your functions
with statements like <code>check(username, String)</code> or
<code>check(office, {building: String, room: Number})</code>. The <code>check</code> call will
throw an error if its argument is of an unexpected type.</p>

<p>Meteor also provides an easy way to make sure that all of your methods
and publish functions validate all of their arguments. Just run
<code>meteor add <a href="http://localhost:3000/#auditargumentchecks">audit-argument-checks</a></code> and any
method or publish function which skips <code>check</code>ing any of its arguments will fail
with an exception.</p>
<h2 id="reactivity">Reactivity</h2>

<p>Meteor embraces the concept of <a href="http://en.wikipedia.org/wiki/Reactive_programming" target="_blank">reactive
programming</a>. This means that
you can write your code in a simple imperative style, and the result will be
automatically recalculated whenever data changes that your code depends on.</p>

<pre><code>Deps.autorun(function () {
  Meteor.subscribe("messages", Session.get("currentRoomId"));
});
</code></pre>

<p>This example (taken from a chat room client) sets up a data
subscription based on the session variable <code>currentRoomId</code>.
If the value of <code>Session.get("currentRoomId")</code> changes for any reason, the
function will be automatically re-run, setting up a new subscription that
replaces the old one.</p>

<p>This automatic recomputation is achieved by a cooperation between
<code>Session</code> and <code>Deps.autorun</code>.  <code>Deps.autorun</code> performs an arbitrary "reactive
computation" inside of which data dependencies are tracked, and it
will re-run its function argument as necessary.  Data providers like
<code>Session</code>, on the other hand, make note of the computation they are
called from and what data was requested, and they are prepared to send
an invalidation signal to the computation when the data changes.</p>

<p>This simple pattern (reactive computation + reactive data source) has wide
applicability.  Above, the programmer is saved from writing
unsubscribe/resubscribe calls and making sure they are called at the
right time.  In general, Meteor can eliminate whole classes of data
propagation code which would otherwise clog up your application with
error-prone logic.</p>

<p>These Meteor functions run your code as a reactive computation:</p>

<ul>
<li><a href="http://localhost:3000/#templates">Templates</a></li>
<li><a href="http://localhost:3000/#meteor_render"><code>Meteor.render</code></a> and <a href="http://localhost:3000/#meteor_renderlist"><code>Meteor.renderList</code></a></li>
<li><a href="http://localhost:3000/#deps_autorun"><code>Deps.autorun</code></a></li>
</ul>

<p>And the reactive data sources that can trigger changes are:</p>

<ul>
<li><a href="http://localhost:3000/#session"><code>Session</code></a> variables</li>
<li>Database queries on <a href="http://localhost:3000/#find">Collections</a></li>
<li><a href="http://localhost:3000/#meteor_status"><code>Meteor.status</code></a></li>
<li>The <code>ready()</code> method on a <a href="http://localhost:3000/#meteor_subscribe">subscription handle</a></li>
<li><a href="http://localhost:3000/#meteor_user"><code>Meteor.user</code></a></li>
<li><a href="http://localhost:3000/#meteor_userid"><code>Meteor.userId</code></a></li>
<li><a href="http://localhost:3000/#meteor_loggingin"><code>Meteor.loggingIn</code></a></li>
</ul>

<p>In addition, the following functions which return an object with a
<code>stop</code> method, if called from a reactive computation, are stopped when
the computation is rerun or stopped:</p>

<ul>
<li><a href="http://localhost:3000/#deps_autorun"><code>Deps.autorun</code></a> (nested)</li>
<li><a href="http://localhost:3000/#meteor_subscribe"><code>Meteor.subscribe</code></a></li>
<li><a href="http://localhost:3000/#observe"><code>observe()</code></a> and <a href="http://localhost:3000/#observe_changes"><code>observeChanges()</code></a> on cursors</li>
</ul>

<p>Meteor's
<a href="https://github.com/meteor/meteor/blob/master/packages/deps/deps.js" target="_blank">implementation</a>
is a package called <a href="http://localhost:3000/#deps"><code>Deps</code></a> that is fairly short and straightforward.
You can use it yourself to implement new reactive data sources.</p>
<h2 id="livehtml">Live HTML</h2>

<p>HTML templating is central to web applications. With Meteor's live
page update technology, you can render your HTML <em>reactively</em>, meaning
that it will update automatically to track changes in the data used to
generate it.</p>

<p>This optional feature works with any HTML templating library, or even
with HTML you generate manually from JavaScript. Here's an example:</p>

<pre><code>var fragment = Meteor.render(
  function () {
    var name = Session.get("name") || "Anonymous";
    return "&lt;div&gt;Hello, " + name + "&lt;/div&gt;";
  });
document.body.appendChild(fragment);

Session.set("name", "Bob"); // page updates automatically!
</code></pre>

<p><a href="http://localhost:3000/#meteor_render"><code>Meteor.render</code></a> takes a rendering function, that is, a
function that returns some HTML as a string. It returns an auto-updating
<code>DocumentFragment</code>. When there is a change to data used by the rendering
function, it is re-run. The DOM nodes in the <code>DocumentFragment</code> then
update themselves in-place, no matter where they were inserted on the
page. It's completely automatic. <a href="http://localhost:3000/#meteor_render"><code>Meteor.render</code></a> uses
a <a href="http://localhost:3000/#reactivity">reactive computation</a> to discover what data is used by the
rendering function.</p>

<p>Most of the time, though, you won't call these functions directly
— you'll just use your favorite templating package, such as
Handlebars or Jade. The <code>render</code> and <code>renderList</code> functions are intended
for people that are implementing new templating systems.</p>

<p>Meteor normally batches up any needed updates and executes them only
when your code isn't running. That way, you can be sure that the DOM
won't change out from underneath you. Sometimes you want the opposite
behavior. For example, if you've just inserted a record in the
database, you might want to force the DOM to update so you can find
the new elements using a library like jQuery. In that case, call
<a href="http://localhost:3000/#deps_flush"><code>Deps.flush</code></a> to bring the DOM up to date
immediately.</p>

<p>When live-updating DOM elements are taken off the screen, they are automatically
cleaned up — their callbacks are torn down, any associated database
queries are stopped, and they stop updating. For this reason, you never have to
worry about the <a href="http://lostechies.com/derickbailey/2011/09/15/zombies-run-managing-page-transitions-in-backbone-apps/" target="_blank">zombie
templates</a>
that plague hand-written update logic. To protect your elements from cleanup,
just make sure that they are on-screen before your code returns to the event loop,
or before any call you make to <a href="http://localhost:3000/#deps_flush"><code>Deps.flush</code></a>.</p>

<p>Another thorny problem in hand-written applications is element
preservation. Suppose the user is typing text into an <code>&lt;input&gt;</code>
element, and then the area of the page that includes that element is
redrawn. The user could be in for a bumpy ride, as the focus, the
cursor position, the partially entered text, and the accented
character input state will be lost when the <code>&lt;input&gt;</code> is recreated.</p>

<p>This is another problem that Meteor solves for you. You can specify
elements to preserve when templates are re-rendered with the
<a href="http://localhost:3000/#template_preserve"><code>preserve</code></a> directive on the template. Meteor will
preserve these elements even when their enclosing template is
rerendered, but will still update their children and copy over any
attribute changes.</p>
<h2 id="templates">Templates</h2>

<p>Meteor makes it easy to use your favorite HTML templating language,
such as Handlebars or Jade, along with Meteor's live page update
technology. Just write your template as you normally would, and Meteor
will take care of making it update in realtime.</p>

<p>To use this feature, create a file in your project with the <code>.html</code>
extension. In the file, make a <code>&lt;template&gt;</code> tag and give it a
<code>name</code> attribute. Put the template contents inside the tag. Meteor
will precompile the template, ship it down to the client, and make it
available as a function on the global <code>Template</code> object.</p>















<div class="note">
    





<p>Today, the only templating system that has been packaged for Meteor is
Handlebars. Let us know what templating systems you'd like to use with
Meteor. Meanwhile, see the <a href="http://www.handlebarsjs.com/" target="_blank">Handlebars
documentation</a> and <a href="https://github.com/meteor/meteor/wiki/Handlebars" target="_blank">Meteor Handlebars
extensions</a>.</p>






  </div>















<p>A template with a <code>name</code> of <code>hello</code> is rendered by calling the
function <code>Template.hello</code>, passing any data for the template:</p>

<!-- in myapp.html -->

<pre><code>&lt;template name="hello"&gt;
  &lt;div class="greeting"&gt;Hello there, {{first}} {{last}}!&lt;/div&gt;
&lt;/template&gt;

// in the JavaScript console
&gt; Template.hello({first: "Alyssa", last: "Hacker"});
 =&gt; "&lt;div class="greeting"&gt;Hello there, Alyssa Hacker!&lt;/div&gt;"
</code></pre>

<p>This returns a string. To use the template along with the <a href="http://localhost:3000/#livehtml"><code>Live
HTML</code></a> system, and get DOM elements that update
automatically in place, use <a href="http://localhost:3000/#meteor_render"><code>Meteor.render</code></a>:</p>

<pre><code>Meteor.render(function () {
  return Template.hello({first: "Alyssa", last: "Hacker"});
})
  =&gt; automatically updating DOM elements
</code></pre>

<p>The easiest way to get data into templates is by defining helper
functions in JavaScript. Just add the helper functions directly on the
<code>Template.[template name]</code> object. For example, in this template:</p>

<pre><code>&lt;template name="players"&gt;
  {{#each topScorers}}
    &lt;div&gt;{{name}}&lt;/div&gt;
  {{/each}}
&lt;/template&gt;
</code></pre>

<p>instead of passing in <code>topScorers</code> as data when we call the
template function, we could define a function on <code>Template.players</code>:</p>

<pre><code>Template.players.topScorers = function () {
  return Users.find({score: {$gt: 100}}, {sort: {score: -1}});
};
</code></pre>

<p>In this case, the data is coming from a database query. When the
database cursor is passed to <code>#each</code>, it will wire up all of the
machinery to efficiently add and move DOM nodes as new results enter
the query.</p>

<p>Helpers can take arguments, and they receive the current template data
in <code>this</code>:</p>

<pre><code>// in a JavaScript file
Template.players.leagueIs = function (league) {
  return this.league === league;
};
</code></pre>

<!-- in a HTML file -->

<pre><code>&lt;template name="players"&gt;
  {{#each topScorers}}
    {{#if leagueIs "junior"}}
      &lt;div&gt;Junior: {{name}}&lt;/div&gt;
    {{/if}}
    {{#if leagueIs "senior"}}
      &lt;div&gt;Senior: {{name}}&lt;/div&gt;
    {{/if}}
  {{/each}}
&lt;/template&gt;
</code></pre>















<div class="note">
    





<p>Handlebars note: <code>{{#if leagueIs "junior"}}</code> is
allowed because of a Meteor extension that allows nesting a helper
in a block helper. (Both <code>if</code> and <code>leagueIs</code> are
technically helpers, and stock Handlebars would not invoke
<code>leagueIs</code> here.)</p>






  </div>















<p>Helpers can also be used to pass in constant data.</p>

<pre><code>// Works fine with {{#each sections}}
Template.report.sections = ["Situation", "Complication", "Resolution"];
</code></pre>

<p>Finally, you can use an <code>events</code> declaration on a template function to set up a
table of event handlers. The format is documented at <a href="http://localhost:3000/#eventmaps">Event
Maps</a>. The <code>this</code> argument to the event handler will be
the data context of the element that triggered the event.</p>

<!-- myapp.html -->

<pre><code>&lt;template name="scores"&gt;
  {{#each player}}
    {{&gt; playerScore}}
  {{/each}}
&lt;/template&gt;

&lt;template name="playerScore"&gt;
  &lt;div&gt;{{name}}: {{score}}
    &lt;span class="givePoints"&gt;Give points&lt;/span&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>

<!-- myapp.js -->

<pre><code>Template.playerScore.events({
  'click .givePoints': function () {
    Users.update(this._id, {$inc: {score: 2}});
  }
});
</code></pre>

<p>Putting it all together, here's an example of how you can inject
arbitrary data into your templates, and have them update automatically
whenever that data changes. See <a href="http://localhost:3000/#livehtml">Live HTML</a> for further
discussion.</p>

<!-- in myapp.html -->

<pre><code>&lt;template name="forecast"&gt;
  &lt;div&gt;It'll be {{prediction}} tonight&lt;/div&gt;
&lt;/template&gt;
</code></pre>

<!-- in myapp.js -->

<pre><code>// JavaScript: reactive helper function
Template.forecast.prediction = function () {
  return Session.get("weather");
};
</code></pre>

<!-- in the console -->

<pre><code>&gt; Session.set("weather", "cloudy");
&gt; document.body.appendChild(Meteor.render(Template.forecast));
In DOM:  &lt;div&gt;It'll be cloudy tonight&lt;/div&gt;

&gt; Session.set("weather", "cool and dry");
In DOM:  &lt;div&gt;It'll be cool and dry tonight&lt;/div&gt;
</code></pre>
<p></p><h2 id="usingpackages">Using packages</h2><p></p>

<p>All of the functionality you've read about so far is implemented as
standard Meteor packages. This is possible thanks to Meteor's
unusually powerful package and build system. The same packages work in
the browser and on the server, and packages can contain plugins that
extend the build process, such as <code>coffeescript</code> (<a href="http://coffeescript.org/" target="_blank">CoffeeScript</a>
compilation) or <code>templating</code> (compiling HTML templates).</p>

<p>You can see a list of available packages
with <a href="http://localhost:3000/#meteorlist"><code>meteor list</code></a>, add packages to your project
with <a href="http://localhost:3000/#meteoradd"><code>meteor add</code></a>, and remove them
with <a href="http://localhost:3000/#meteorremove"><code>meteor remove</code></a>.</p>

<p>By default all apps include the <code>standard-app-packages</code> package. This
automatically pulls in the packages that make up the core Meteor
stack. To keep things simple, these core packages are also hidden in
the output for <code>meteor list</code>, but you can read the
<a href="https://github.com/meteor/meteor/blob/master/packages/standard-app-packages/package.js" target="_blank">source code of <code>standard-app-packages</code></a>
to see what they are (as Meteor is pre-1.0, they may change from release to
release). If you want to build your own custom stack, just remove
<code>standard-app-packages</code> from your app and add back in whichever of the standard
packages you want to keep.</p>

<p>In addition to the packages in the official Meteor release being used
by your app, <code>meteor list</code> and <code>meteor add</code> also search the <code>packages</code>
directory at the top of your app. If you've downloaded an unofficial
package from Atmosphere you should unpack it into that directory (the
unofficial <a href="http://oortcloud.github.io/meteorite/" target="_blank">Meteorite</a> tool
streamlines this process). You can also use the <code>packages</code> directory
to break your app into subpackages for your convenience — if you
are willing to brave the fact that the Meteor package format is not
documented yet and will change significantly before Meteor 1.0. See
<a href="http://localhost:3000/#writingpackages">Writing Packages</a>.</p>
<p></p><h2 id="namespacing">Namespacing</h2><p></p>

<p>Meteor's namespacing support makes it easy to write large applications
in JavaScript. Each package that you use in your app exists in its own
separate namespace, meaning that it sees only its own global variables
and any variables provided by the packages that it specifically
uses. Here's how it works.</p>

<p>When you declare a top-level variable, you have a choice. You can make
the variable File Scope or Package Scope.</p>

<pre><code>// File Scope. This variable will be visible only inside this
// one file. Other files in this app or package won't see it.
var alicePerson = {name: "alice"};

// Package Scope. This variable is visible to every file inside
// of this package or app. The difference is that 'var' is
// omitted.
bobPerson = {name: "bob"};
</code></pre>

<p>Notice that this is just the normal JavaScript syntax for declaring a
variable that is local or global. Meteor scans your source code for
global variable assignments and generates a wrapper that makes sure
that your globals don't escape their appropriate namespace.</p>

<p>In addition to File Scope and Package Scope, there are also
Exports. An export is a variable that a package makes available to you
when you use it. For example, the <code>email</code> package exports the <code>Email</code>
variable. If your app uses the <code>email</code> package (and <em>only</em> if it uses
the <code>email</code> package!) then your app can see <code>Email</code> and you can call
<code>Email.send</code>. Most packages have only one export, but some packages
might have two or three (for example, a package that provides several
classes that work together).</p>

<p>You see only the exports of the packages that you use directly. If you
use package A, and package A uses package B, then you only see package
A's exports. Package B's exports don't "leak" into your namespace just
because you used package A. This keeps each namespace nice and
tidy. Each app or package only sees their own globals plus the APIs of
the packages that they specifically asked for.</p>

<p>When debugging your app, your browser's JavaScript console behaves as
if it were attached to your app's namespace. You see your app's
globals and the exports of the packages that your app uses
directly. You don't see the variables from inside those packages, and
you don't see the exports of your transitive dependencies (packages
that aren't used directly by your app, but that are used by packages
that are used by your app).</p>

<p>If you want to look inside packages from inside your in-browser
debugger, you've got two options:</p>

<ul>
<li><p>Set a breakpoint inside package code. While stopped on that
breakpoint, the console will be in the package's namespace. You'll
see the package's package-scope variables, imports, and also any
file-scope variables for the file you're stopped in.</p></li>
<li><p>If a package <code>foo</code> is included in your app, regardless of whether
your app uses it directly, its exports are available in
<code>Package.foo</code>. For example, if the <code>email</code> package is loaded, then
you can access <code>Package.email.Email.send</code> even from namespaces that
don't use the <code>email</code> package directly.</p></li>
</ul>

<p>When declaring functions, keep in mind that <code>function x () {}</code> is just
shorthard for <code>var x = function () {}</code> in JavaScript. Consider these
examples:</p>

<pre><code>// This is the same as 'var x = function () ...'. So x() is
// file-scope and can be called only from within this one file.
function x () { ... }

// No 'var', so x() is package-scope and can be called from
// any file inside this app or package.
x = function () { ... }
</code></pre>















<div class="note">
    





<p>Technically speaking, globals in an app (as opposed to in a package)
are actually true globals. They can't be captured in a scope that is
private to the app code, because that would mean that they wouldn't be
visible in the console during debugging! This means that app globals
actually end up being visible in packages. That should never be a
problem for properly written package code (since the app globals will
still be properly shadowed by declarations in the packages). You
certainly shouldn't depend on this quirk, and in the future Meteor may
check for it and throw an error if you do.</p>






  </div>














<h2 id="deploying">Deploying</h2>

<p>Meteor is a full application server.  We include everything you need
to deploy your application on the internet: you just provide the JavaScript,
HTML, and CSS.</p>

<h3 class="nosection">Running on Meteor's infrastructure</h3>

<p>The easiest way to deploy your application is to use <code>meteor
deploy</code>.  We provide it because it's what, personally, we've always
wanted: an easy way to take an app idea, flesh it out over a weekend,
and put it out there for the world to use, with nothing getting in the
way of creativity.</p>

<pre><code>$ meteor deploy myapp.meteor.com
</code></pre>

<p>Your application is now available at myapp.meteor.com.  If
this is the first time deploying to this hostname, Meteor creates a
fresh empty database for your application.  If you want to deploy an
update, Meteor will preserve the existing data and just refresh the
code.</p>

<p>You can also deploy to your own domain.  Just set up the hostname you
want to use as a CNAME to <code>origin.meteor.com</code>,
then deploy to that name.</p>

<pre><code>$ meteor deploy www.myapp.com
</code></pre>

<p>We provide this as a free service so you can try Meteor.  It is also
helpful for quickly putting up internal betas, demos, and so on.</p>

<h3 class="nosection">Running on your own infrastructure</h3>

<p>You can also run your application on your own infrastructure, or any
other hosting provider like Heroku.</p>

<p>To get started, run</p>

<pre><code>$ meteor bundle myapp.tgz
</code></pre>

<p>This command will generate a fully-contained Node.js application in the form of
a tarball.  To run this application, you need to provide Node.js 0.8 and a
MongoDB server.  (The current release of Meteor has been tested with Node
0.8.24.) You can then run the application by invoking node, specifying the HTTP
port for the application to listen on, and the MongoDB endpoint.  If you don't
already have a MongoDB server, we can recommend our friends at
<a href="http://mongohq.com/" target="_blank">MongoHQ</a>.</p>

<pre><code>$ PORT=3000 MONGO_URL=mongodb://localhost:27017/myapp node bundle/main.js
</code></pre>

<p>Other packages may require other environment variables (for example, the <code>email</code>
package requires a <code>MAIL_URL</code> environment variable).</p>















<div class="warning">
    





<p>For now, bundles will only run on the platform that the bundle was
created on.  To run on a different platform, you'll need to rebuild
the native packages included in the bundle.  To do that, make sure you
have <code>npm</code> available, and run the following:</p>

<pre><code>$ cd bundle/programs/server/node_modules
$ rm -r fibers
$ npm install fibers@1.0.1
</code></pre>






  </div>














<p></p><h2 id="writingpackages">Writing packages</h2><p></p>

<p>The Meteor package format isn't officially documented and will change
before Meteor 1.0. But that hasn't stopped people like you from
creating hundreds of packages by reading the source code of existing
packages and following the model. If you do decide to create your own
packages, you will have to do some detective work, but here are some
quick tips:</p>

<ul>
<li><p>A package is simply a directory with a <code>package.js</code> file in it. Look in the
<a href="https://github.com/meteor/meteor/tree/master/packages/" target="_blank"><code>packages</code> directory of the Meteor source
tree</a> for example
<code>package.js</code> files. The format and name of the <code>package.js</code> file will change
significantly before Meteor 1.0, but the functionality will be basically the
same even though the syntax is different, so it will be easy to port your
code.</p></li>
<li><p>Packages explicitly list all of their source files using <code>api.add_files</code>, and
the files are loaded exactly in the order specified. (This is different from
apps, where Meteor scans a directory tree to find the source files.)  Don't
forget to include any build plugin packages (such as <code>coffeescript</code> or, if
using HTML templates, <code>templating</code>) that you require.</p></li>
<li><p>Exporting a symbol from your package (see
<a href="http://localhost:3000/#namespacing">Namespacing</a>) is accomplished with an <code>api.export</code> call
from inside your <code>on_use</code> handler.</p></li>
<li><p>An esoteric point about exports: they are not lvalues. You can't set
an exported variable to a new value after exporting it. If you
export <code>a = {name: 'alice'}</code> then you can change <code>a.name</code> anytime
you want, but if after startup you set <code>a</code> to a whole new object
then the packages that import <code>a</code> won't see the change. Since your
exports are most always objects or functions, this is hardly ever an
issue.</p></li>
<li><p>Packages can use <a href="https://npmjs.org/" target="_blank">npm modules</a>. Use <code>Npm.depends</code> in your
<code>package.js</code> to list the npm modules that you need and the specific
versions that you want to use. Then use <code>Npm.require</code> inside your
package to pull in the modules when you need them. Meteor strives to
have 100% repeatable builds so that everyone on your team is always
running the same code, and that's why you must explicitly lock your
npm dependencies to specific versions. Behind the scenes, Meteor
will use <code>npm shrinkwrap</code> to also lock down the versions of the
transitive dependencies of all of the npm modules that you use.</p></li>
<li><p>Whenever your package changes, Meteor will rebuild it (compiling
non-JavaScript source files, fetching npm dependencies, constructing
namespace wrappers, and so on). The built package will be cached and
rebuilt only when a source file changes (tracked by SHA1) or when
other dependencies such as build plugins change. To force a rebuild
you can use the undocumented command <code>meteor rebuild-all</code>, but this
should never be necessary (if it is, please send a
<a href="https://github.com/meteor/meteor/blob/devel/Contributing.md#filing-bug-reports" target="_blank">bug report</a>!).</p></li>
<li><p>Build plugins are created with <code>_transitional_registerBuildPlugin</code>,
an API that is very much in flux. See the <code>coffeescript</code> package for
an example. Build plugins are fully-fledged Meteor programs in their
own right and have their own namespace, package dependencies, source
files and npm requirements. The old <code>register_extension</code> API is
deprecated and should not be used as it will prevent your package
from being cached, slowing down builds.</p></li>
<li><p>It is possible to create weak dependencies between packages. If
package A has a weak dependency on package B, it means that
including A in an app does not force B to be included too —
but, if B <em>is</em> included, say by the app developer or by another
package, then B will load before A. You can use this to make
packages that optionally integrate with or enhance other packages if
those packages are present. To create a weak dependency, pass
<code>{weak: true}</code> as the third argument to <code>api.use</code>. When you weakly
depend on a package you don't see its exports. You can detect if
the possibly-present weakly-depended-on package is there by seeing
if <code>Package.foo</code> exists, and get its exports from the same place.</p></li>
<li><p>It is also possible to create unordered dependencies by passing
<code>{unordered: true}</code>. An unordered dependency is the exact opposite
of a weak dependency. If A has an unordered dependency on B, then
including A forces B to be included as well, but doesn't require B
to load before A. This is occasionally useful for resolving circular
dependencies.</p></li>
<li><p>The build system also supports package implication. If package A
implies package B, then it means that when someone depends on
package A, it's as if they also depended on package B as well. In
particular, they get B's exports. This is done with <code>api.imply</code> and
can be used to create umbrella packages such as
<code>standard-app-packages</code> that are a shortcut for pulling in a set of
packages, or it can be helpful in factoring common code out of a set
of packages as with <code>accounts-base</code>.</p></li>
<li><p>The build system understands the idea of native code and has a
system of architecture names to ensure that packages that are
specific to one architecture aren't run on the wrong
architecture. For example, if you include an npm module that has a
native extension, your built Meteor package will be specific to your
machine architecture, but if not your built Meteor package will be
portable.</p></li>
</ul>
    <h1 id="api">The Meteor API</h1>

<p>Your JavaScript code can run in two environments: the <em>client</em> (browser), and
the <em>server</em> (a <a href="http://nodejs.org/" target="_blank">Node.js</a> container on a server).  For each
function in this API reference, we'll indicate if the function is available just
on the client, just on the server, or <em>Anywhere</em>.</p>

<h2 id="core"><span>Meteor Core</span></h2>



















<div class="api ">
<h3 id="meteor_isclient">
  <a class="name selflink" href="http://localhost:3000/#meteor_isclient">Meteor.isClient</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Boolean variable.  True if running in client environment.</p>










</div>







</div>





































<div class="api ">
<h3 id="meteor_isserver">
  <a class="name selflink" href="http://localhost:3000/#meteor_isserver">Meteor.isServer</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Boolean variable.  True if running in server environment.</p>










</div>







</div>

































<div class="note">
    





<p><code>Meteor.isServer</code> can be used to limit where code runs, but it does not
prevent code from being sent to the client. Any sensitive code that you
don't want served to the client, such as code containing passwords or
authentication mechanisms, should be kept in the <code>server</code> directory.</p>






  </div>

































<div class="api ">
<h3 id="meteor_startup">
  <a class="name selflink" href="http://localhost:3000/#meteor_startup">Meteor.startup(func)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Run code when a client or a server starts.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">func</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>A function to run on startup.</p></dd>





</dl>














































</div>



















<p>On a server, the function will run as soon as the server process is
finished starting. On a client, the function will run as soon as the DOM
is ready.</p>

<p>The <code>startup</code> callbacks are called in the same order as the calls to
<code>Meteor.startup</code> were made.</p>

<p>On a client, <code>startup</code> callbacks from packages will be called
first, followed by <code>&lt;body&gt;</code> templates from your <code>.html</code> files,
followed by your application code.</p>

<pre><code>// On server startup, if the database is empty, create some initial data.
if (Meteor.isServer) {
  Meteor.startup(function () {
    if (Rooms.find().count() === 0) {
      Rooms.insert({name: "Initial room"});
    }
  });
}
</code></pre>



















<div class="api ">
<h3 id="meteor_absoluteurl">
  <a class="name selflink" href="http://localhost:3000/#meteor_absoluteurl">Meteor.absoluteUrl([path], [options])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Generate an absolute URL pointing to the application. The server reads from the <code>ROOT_URL</code> environment variable to determine where it is running. This is taken care of automatically for apps deployed with <code>meteor deploy</code>, but must be provided when using <code>meteor bundle</code>.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">path</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>A path to append to the root URL. Do not include a leading "<code>/</code>".</p></dd>





</dl>















































<h4>Options</h4>




































<dl class="args">





<dt><span class="name">secure</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>Create an HTTPS URL.</p></dd>









<dt><span class="name">replaceLocalhost</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.</p></dd>









<dt><span class="name">rootUrl</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Override the default ROOT_URL from the server environment. For example: "<code>http://foo.example.com</code>"</p></dd>





</dl>












































</div>





































<div class="api ">
<h3 id="meteor_settings">
  <a class="name selflink" href="http://localhost:3000/#meteor_settings">Meteor.settings</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p><code>Meteor.settings</code> contains any deployment-specific options that were provided using the <code>--settings</code> option for <code>meteor run</code> or <code>meteor deploy</code>. If you provide the <code>--settings</code> option, <code>Meteor.settings</code> will be the JSON object in the file you specify.  Otherwise, <code>Meteor.settings</code> will be an empty object. If the object contains a key named <code>public</code>, then <code>Meteor.settings.public</code> will also be available on the client.</p>










</div>







</div>





































<div class="api ">
<h3 id="meteor_release">
  <a class="name selflink" href="http://localhost:3000/#meteor_release">Meteor.release</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p><code>Meteor.release</code> is a string containing the name of the <a href="http://localhost:3000/#meteorupdate">release</a> with which the project was built (for example, <code>"0.6.5.1"</code>). It is <code>undefined</code> if the project was built using a git checkout of Meteor.</p>










</div>







</div>



















<h2 id="publishandsubscribe"><span>Publish and subscribe</span></h2>

<p>These functions control how Meteor servers publish sets of records and
how clients can subscribe to those sets.</p>



















<div class="api ">
<h3 id="meteor_publish">
  <a class="name selflink" href="http://localhost:3000/#meteor_publish">Meteor.publish(name, func)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Publish a record set.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">name</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Name of the attribute set.  If <code>null</code>, the set has no name, and the record set is automatically sent to all connected clients.</p></dd>









<dt><span class="name">func</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Function called on the server each time a client subscribes.  Inside the function, <code>this</code> is the publish handler object, described below.  If the client passed arguments to <code>subscribe</code>, the function is called with the same arguments.</p></dd>





</dl>














































</div>



















<p>To publish records to clients, call <code>Meteor.publish</code> on the server with
two parameters: the name of the record set, and a <em>publish function</em>
that Meteor will call each time a client subscribes to the name.</p>

<p>Publish functions can return a
<a href="http://localhost:3000/#meteor_collection_cursor"><code>Collection.Cursor</code></a>, in which case Meteor
will publish that cursor's documents. You can also return an array of
<code>Collection.Cursor</code>s, in which case Meteor will publish all of the
cursors.</p>















<div class="warning">
    





<p>If you return multiple cursors in an array, they currently must all be from
different collections. We hope to lift this restriction in a future release.</p>






  </div>















<pre><code>// server: publish the rooms collection, minus secret info.
Meteor.publish("rooms", function () {
  return Rooms.find({}, {fields: {secretInfo: 0}});
});

// ... and publish secret info for rooms where the logged-in user
// is an admin. If the client subscribes to both streams, the records
// are merged together into the same documents in the Rooms collection.
Meteor.publish("adminSecretInfo", function () {
  return Rooms.find({admin: this.userId}, {fields: {secretInfo: 1}});
});

// publish dependent documents and simulate joins
Meteor.publish("roomAndMessages", function (roomId) {
  check(roomId, String);
  return [
    Rooms.find({_id: roomId}, {fields: {secretInfo: 0}}),
    Messages.find({roomId: roomId})
  ];
});
</code></pre>

<p>Otherwise, the publish function should call the functions
<a href="http://localhost:3000/#publish_added"><code>added</code></a> (when a new document is added to the published record
set), <a href="http://localhost:3000/#publish_changed"><code>changed</code></a> (when some fields on a document in the
record set are changed or cleared), and <a href="http://localhost:3000/#publish_removed"><code>removed</code></a> (when
documents are removed from the published record set) to inform subscribers about
documents.  These methods are provided by <code>this</code> in your publish function.</p>

<!-- TODO discuss ready -->

<p>Example:</p>

<pre><code>// server: publish the current size of a collection
Meteor.publish("counts-by-room", function (roomId) {
  var self = this;
  check(roomId, String);
  var count = 0;
  var initializing = true;
  var handle = Messages.find({roomId: roomId}).observeChanges({
    added: function (id) {
      count++;
      if (!initializing)
        self.changed("counts", roomId, {count: count});
    },
    removed: function (id) {
      count--;
      self.changed("counts", roomId, {count: count});
    }
    // don't care about moved or changed
  });

  // Observe only returns after the initial added callbacks have
  // run.  Now return an initial value and mark the subscription
  // as ready.
  initializing = false;
  self.added("counts", roomId, {count: count});
  self.ready();

  // Stop observing the cursor when client unsubs.
  // Stopping a subscription automatically takes
  // care of sending the client any removed messages.
  self.onStop(function () {
    handle.stop();
  });
});

// client: declare collection to hold count object
Counts = new Meteor.Collection("counts");

// client: subscribe to the count for the current room
Deps.autorun(function () {
  Meteor.subscribe("counts-by-room", Session.get("roomId"));
});

// client: use the new collection
console.log("Current room has " +
            Counts.findOne(Session.get("roomId")).count +
            " messages.");
</code></pre>















<div class="warning">
    





<p>Meteor will emit a warning message if you call <code>Meteor.publish</code> in a
project that includes the <code>autopublish</code> package.  Your publish function
will still work.</p>






  </div>

































<div class="api ">
<h3 id="publish_userId">
  <a class="name selflink" href="http://localhost:3000/#publish_userId"><i>this</i>.userId</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Access inside the publish function. The id of the logged-in user, or <code>null</code> if no user is logged in.</p>










</div>







</div>



















<p>This is constant. However, if the logged-in user changes, the publish
function is rerun with the new value.</p>



















<div class="api ">
<h3 id="publish_added">
  <a class="name selflink" href="http://localhost:3000/#publish_added"><i>this</i>.added(collection, id, fields)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Call inside the publish function.  Informs the subscriber that a document has been added to the record set.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">collection</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The name of the collection that contains the new document.</p></dd>









<dt><span class="name">id</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The new document's ID.</p></dd>









<dt><span class="name">fields</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>The fields in the new document.  If <code>_id</code> is present it is ignored.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="publish_changed">
  <a class="name selflink" href="http://localhost:3000/#publish_changed"><i>this</i>.changed(collection, id, fields)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">collection</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The name of the collection that contains the changed document.</p></dd>









<dt><span class="name">id</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The changed document's ID.</p></dd>









<dt><span class="name">fields</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>The fields in the document that have changed, together with their new values.  If a field is not present in <code>fields</code> it was left unchanged; if it is present in <code>fields</code> and has a value of <code>undefined</code> it was removed from the document.  If <code>_id</code> is present it is ignored.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="publish_removed">
  <a class="name selflink" href="http://localhost:3000/#publish_removed"><i>this</i>.removed(collection, id)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">collection</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The name of the collection that the document has been removed from.</p></dd>









<dt><span class="name">id</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The ID of the document that has been removed.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="publish_ready">
  <a class="name selflink" href="http://localhost:3000/#publish_ready"><i>this</i>.ready()</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the <code>onReady</code> callback passed to  <a href="http://localhost:3000/#meteor_subscribe"><code>Meteor.subscribe</code></a>, if any.</p>










</div>







</div>





































<div class="api ">
<h3 id="publish_onstop">
  <a class="name selflink" href="http://localhost:3000/#publish_onstop"><i>this</i>.onStop(func)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Call inside the publish function.  Registers a callback function to run when the subscription is stopped.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">func</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>The callback function</p></dd>





</dl>














































</div>



















<p>If you call <a href="http://localhost:3000/#observe"><code>observe</code></a> or <a href="http://localhost:3000/#observe_changes"><code>observeChanges</code></a> in your
publish handler, this is the place to stop the observes.</p>



















<div class="api ">
<h3 id="publish_error">
  <a class="name selflink" href="http://localhost:3000/#publish_error"><i>this</i>.error(error)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the <code>onError</code> callback passed to <a href="http://localhost:3000/#meteor_subscribe"><code>Meteor.subscribe</code></a>, if any. If <code>error</code> is not a <a href="http://localhost:3000/#meteor_error"><code>Meteor.Error</code></a>, it will be <a href="http://localhost:3000/#meteor_error">sanitized</a>.</p>










</div>







</div>





































<div class="api ">
<h3 id="publish_stop">
  <a class="name selflink" href="http://localhost:3000/#publish_stop"><i>this</i>.stop()</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Call inside the publish function.  Stops this client's subscription; the <code>onError</code> callback is <em>not</em> invoked on the client.</p>










</div>







</div>





































<div class="api ">
<h3 id="meteor_subscribe">
  <a class="name selflink" href="http://localhost:3000/#meteor_subscribe">Meteor.subscribe(name [, arg1, arg2, ... ] [, callbacks])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Subscribe to a record set.  Returns a handle that provides <code>stop()</code> and <code>ready()</code> methods.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">name</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Name of the subscription.  Matches name of server's publish() call.</p></dd>









<dt><span class="name">arg1, arg2, ...</span>
  <span class="type">
    
      Any
    
  </span></dt>
<dd><p>Optional arguments passed to publisher function on server.</p></dd>









<dt><span class="name">callbacks</span>
  <span class="type">
    
      Function or Object
    
  </span></dt>
<dd><p>Optional. May include <code>onError</code> and <code>onReady</code> callbacks. If a function is passed instead of an object, it is interpreted as an <code>onReady</code> callback.</p></dd>





</dl>














































</div>



















<p>When you subscribe to a record set, it tells the server to send records to the
client.  The client stores these records in local <a href="http://localhost:3000/#meteor_collection">Minimongo
collections</a>, with the same name as the <code>collection</code>
argument used in the publish handler's <code>added</code>, <code>changed</code>, and <code>removed</code>
callbacks.  Meteor will queue incoming attributes until you declare the
<a href="http://localhost:3000/#meteor_collection"><code>Meteor.Collection</code></a> on the client with the matching
collection name.</p>

<pre><code>// okay to subscribe (and possibly receive data) before declaring
// the client collection that will hold it.  assume "allplayers"
// publishes data from server's "players" collection.
Meteor.subscribe("allplayers");
...
// client queues incoming players records until ...
...
Players = new Meteor.Collection("players");
</code></pre>

<p>The client will see a document if the document is currently in the published
record set of any of its subscriptions.</p>

<p>The <code>onReady</code> callback is called with no arguments when the server
<a href="http://localhost:3000/#publish_ready">marks the subscription as ready</a>. The <code>onError</code> callback is
called with a <a href="http://localhost:3000/#meteor_error"><code>Meteor.Error</code></a> if the subscription fails or is
terminated by the server.</p>

<p><code>Meteor.subscribe</code> returns a subscription handle, which is an object with the
following methods:</p>

<dl class="callbacks">




























<dt><span class="name">stop()</span>
  
</dt>
<dd><p>Cancel the subscription. This will typically result in the server directing the
client to remove the subscription's data from the client's cache.</p></dd>

























































<dt><span class="name">ready()</span>
  
</dt>
<dd><p>True if the server has <a href="http://localhost:3000/#publish_ready">marked the subscription as ready</a>. A
reactive data source.</p></dd>




























</dl>

<p>If you call <code>Meteor.subscribe</code> within a <a href="http://localhost:3000/#reactivity">reactive computation</a>,
for example using
<a href="http://localhost:3000/#deps_autorun"><code>Deps.autorun</code></a>, the subscription will automatically be
cancelled when the computation is invalidated or stopped; it's not necessary
to call <code>stop</code> on
subscriptions made from inside <code>autorun</code>. However, if the next iteration
of your run function subscribes to the same record set (same name and
parameters), Meteor is smart enough to skip a wasteful
unsubscribe/resubscribe. For example:</p>

<pre><code>Deps.autorun(function () {
  Meteor.subscribe("chat", {room: Session.get("current-room")});
  Meteor.subscribe("privateMessages");
});
</code></pre>

<p>This subscribes you to the chat messages in the current room and to your private
messages. When you change rooms by calling <code>Session.set("current-room",
"new-room")</code>, Meteor will subscribe to the new room's chat messages,
unsubscribe from the original room's chat messages, and continue to
stay subscribed to your private messages.</p>

<p>If more than one subscription sends conflicting values for a field (same
collection name, document ID, and field name), then the value on the client will
be one of the published values, chosen arbitrarily.</p>

<h2 id="methods_header"><span>Methods</span></h2>

<p>Methods are remote functions that Meteor clients can invoke.</p>



















<div class="api ">
<h3 id="meteor_methods">
  <a class="name selflink" href="http://localhost:3000/#meteor_methods">Meteor.methods(methods)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Defines functions that can be invoked over the network by clients.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">methods</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>Dictionary whose keys are method names and values are functions.</p></dd>





</dl>














































</div>



















<p>Example:</p>

<pre><code>Meteor.methods({
  foo: function (arg1, arg2) {
    check(arg1, String);
    check(arg2, [Number]);
    // .. do stuff ..
    if (you want to throw an error)
      throw new Meteor.Error(404, "Can't find my pants");
    return "some return value";
  },

  bar: function () {
    // .. do other stuff ..
    return "baz";
  }
});
</code></pre>

<p>Calling <code>methods</code> on the server defines functions that can be called remotely by
clients.  They should return an <a href="http://localhost:3000/#ejson">EJSON</a>-able value or throw an
exception.  Inside your method invocation, <code>this</code> is bound to a method
invocation object, which provides the following:</p>

<ul>
<li><code>isSimulation</code>: a boolean value, true if this invocation is a stub.</li>
<li><code>unblock</code>: when called, allows the next method from this client to
begin running.</li>
<li><code>userId</code>: the id of the current user.</li>
<li><code>setUserId</code>: a function that associates the current client with a user.</li>
</ul>

<p>Calling <code>methods</code> on the client defines <em>stub</em> functions associated with
server methods of the same name.  You don't have to define a stub for
your method if you don't want to.  In that case, method calls are just
like remote procedure calls in other systems, and you'll have to wait
for the results from the server.</p>

<p>If you do define a stub, when a client invokes a server method it will
also run its stub in parallel.  On the client, the return value of a
stub is ignored.  Stubs are run for their side-effects: they are
intended to <em>simulate</em> the result of what the server's method will do,
but without waiting for the round trip delay.  If a stub throws an
exception it will be logged to the console.</p>

<p>You use methods all the time, because the database mutators
(<a href="http://localhost:3000/#insert"><code>insert</code></a>, <a href="http://localhost:3000/#update"><code>update</code></a>, <a href="http://localhost:3000/#remove"><code>remove</code></a>) are implemented
as methods. When you call any of these functions on the client, you're invoking
their stub version that update the local cache, and sending the same write
request to the server. When the server responds, the client updates the local
cache with the writes that actually occurred on the server.</p>



















<div class="api ">
<h3 id="method_userId">
  <a class="name selflink" href="http://localhost:3000/#method_userId"><i>this</i>.userId</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>The id of the user that made this method call, or <code>null</code> if no user was logged in.</p>










</div>







</div>



















<p>The user id is an arbitrary string — typically the id of the user record
in the database. You can set it with the <code>setUserId</code> function. If you're using
the <a href="http://localhost:3000/#accounts_api">Meteor accounts system</a> then this is handled for you.</p>



















<div class="api ">
<h3 id="method_setUserId">
  <a class="name selflink" href="http://localhost:3000/#method_setUserId"><i>this</i>.setUserId(userId)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Set the logged in user.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">userId</span>
  <span class="type">
    
      String or null
    
  </span></dt>
<dd><p>The value that should be returned by <code>userId</code> on this connection.</p></dd>





</dl>














































</div>



















<p>Call this function to change the currently logged in user on the
connection that made this method call. This simply sets the value of
<code>userId</code> for future method calls received on this connection. Pass
<code>null</code> to log out the connection.</p>

<p>If you are using the <a href="http://localhost:3000/#accounts_api">built-in Meteor accounts system</a> then this
should correspond to the <code>_id</code> field of a document in the
<a href="http://localhost:3000/#meteor_users"><code>Meteor.users</code></a> collection.</p>

<p><code>setUserId</code> is not retroactive. It affects the current method call and
any future method calls on the connection. Any previous method calls on
this connection will still see the value of <code>userId</code> that was in effect
when they started.</p>



















<div class="api ">
<h3 id="method_issimulation">
  <a class="name selflink" href="http://localhost:3000/#method_issimulation"><i>this</i>.isSimulation</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Access inside a method invocation.  Boolean value, true if this invocation is a stub.</p>










</div>







</div>





































<div class="api ">
<h3 id="method_unblock">
  <a class="name selflink" href="http://localhost:3000/#method_unblock"><i>this</i>.unblock()</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.</p>










</div>







</div>



















<p>On the server, methods from a given client run one at a time. The N+1th
invocation from a client won't start until the Nth invocation
returns. However, you can change this by calling <code>this.unblock</code>. This
will allow the N+1th invocation to start running in a new fiber.</p>



















<div class="api ">
<h3 id="meteor_error">
  <a class="name selflink" href="http://localhost:3000/#meteor_error">new Meteor.Error(error, reason, details)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>This class represents a symbolic error thrown by a method.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">error</span>
  <span class="type">
    
      Number
    
  </span></dt>
<dd><p>A numeric error code, likely similar to an HTTP code (eg, 404, 500).</p></dd>









<dt><span class="name">reason</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Optional.  A short human-readable summary of the error, like 'Not Found'.</p></dd>









<dt><span class="name">details</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Optional.  Additional information about the error, like a textual stack trace.</p></dd>





</dl>














































</div>



















<p>If you want to return an error from a method, throw an exception.  Methods can
throw any kind of exception.  But <code>Meteor.Error</code> is the only kind of error that
a server will send to the client. If a method function throws a different
exception, then it will be mapped to a sanitized version on the
wire. Specifically, if the <code>sanitizedError</code> field on the thrown error is set to
a <code>Meteor.Error</code>, then that error will be sent to the client. Otherwise, if no
sanitized version is available, the client gets
<code>Meteor.Error(500, 'Internal server error')</code>.</p>



















<div class="api ">
<h3 id="meteor_call">
  <a class="name selflink" href="http://localhost:3000/#meteor_call">Meteor.call(name, param1, param2, ... [, asyncCallback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Invokes a method passing any number of arguments.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">name</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Name of method to invoke</p></dd>









<dt><span class="name">param1, param2, ...</span>
  <span class="type">
    
      EJSON
    
  </span></dt>
<dd><p>Optional method arguments</p></dd>









<dt><span class="name">asyncCallback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).</p></dd>





</dl>














































</div>



















<p>This is how to invoke a method.  It will run the method on the server.  If a
stub is available, it will also run the stub on the client.  (See also
<a href="http://localhost:3000/#meteor_apply"><code>Meteor.apply</code></a>, which is identical to <code>Meteor.call</code> except that
you specify the parameters as an array instead of as separate arguments and you
can specify a few options controlling how the method is executed.)</p>

<p>If you include a callback function as the last argument (which can't be
an argument to the method, since functions aren't serializable), the
method will run asynchronously: it will return nothing in particular and
will not throw an exception.  When the method is complete (which may or
may not happen before <code>Meteor.call</code> returns), the callback will be
called with two arguments: <code>error</code> and <code>result</code>. If an error was thrown,
then <code>error</code> will be the exception object.  Otherwise, <code>error</code> will be
undefined and the return value (possibly undefined) will be in <code>result</code>.</p>

<pre><code>// async call
Meteor.call('foo', 1, 2, function (error, result) { ... } );
</code></pre>

<p>If you do not pass a callback on the server, the method invocation will
block until the method is complete.  It will eventually return the
return value of the method, or it will throw an exception if the method
threw an exception. (Possibly mapped to 500 Server Error if the
exception happened remotely and it was not a <code>Meteor.Error</code> exception.)</p>

<pre><code>// sync call
var result = Meteor.call('foo', 1, 2);
</code></pre>

<p>On the client, if you do not pass a callback and you are not inside a
stub, <code>call</code> will return <code>undefined</code>, and you will have no way to get
the return value of the method. That is because the client doesn't have
fibers, so there is not actually any way it can block on the remote
execution of a method.</p>

<p>Finally, if you are inside a stub on the client and call another
method, the other method is not executed (no RPC is generated, nothing
"real" happens).  If that other method has a stub, that stub stands in
for the method and is executed. The method call's return value is the
return value of the stub function.  The client has no problem executing
a stub synchronously, and that is why it's okay for the client to use
the synchronous <code>Meteor.call</code> form from inside a method body, as
described earlier.</p>

<p>Meteor tracks the database writes performed by methods, both on the client and
the server, and does not invoke <code>asyncCallback</code> until all of the server's writes
replace the stub's writes in the local cache. In some cases, there can be a lag
between the method's return value being available and the writes being visible:
for example, if another method still outstanding wrote to the same document, the
local cache may not be up to date until the other method finishes as well. If
you want to process the method's result as soon as it arrives from the server,
even if the method's writes are not available yet, you can specify an
<code>onResultReceived</code> callback to <a href="http://localhost:3000/#meteor_apply"><code>Meteor.apply</code></a>.</p>



















<div class="api ">
<h3 id="meteor_apply">
  <a class="name selflink" href="http://localhost:3000/#meteor_apply">Meteor.apply(name, params [, options] [, asyncCallback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Invoke a method passing an array of arguments.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">name</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Name of method to invoke</p></dd>









<dt><span class="name">params</span>
  <span class="type">
    
      Array
    
  </span></dt>
<dd><p>Method arguments</p></dd>









<dt><span class="name">asyncCallback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback; same semantics as in <a href="http://localhost:3000/#meteor_call"><code>Meteor.call</code></a>.</p></dd>





</dl>















































<h4>Options</h4>




































<dl class="args">





<dt><span class="name">wait</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>(Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.</p></dd>









<dt><span class="name">onResultReceived</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>(Client only) This callback is invoked with the error or result of the method (just like <code>asyncCallback</code>) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.</p></dd>





</dl>












































</div>



















<p><code>Meteor.apply</code> is just like <code>Meteor.call</code>, except that the method arguments are
passed as an array rather than directly as arguments, and you can specify
options about how the client executes the method.</p>

<h2 id="connections"><span>Server connections</span></h2>

<p>These functions manage and inspect the network connection between the
Meteor client and server.</p>



















<div class="api ">
<h3 id="meteor_status">
  <a class="name selflink" href="http://localhost:3000/#meteor_status">Meteor.status()</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Get the current connection status. A reactive data source.</p>










</div>







</div>



















<p>This method returns the status of the connection between the client and
the server. The return value is an object with the following fields:</p>

<dl class="objdesc">




























<dt><span class="name">connected</span>
  <span class="type">Boolean</span>
</dt>
<dd><p>True if currently connected to the server. If false, changes and
  method invocations will be queued up until the connection is
  reestablished.</p></dd>

























































<dt><span class="name">status</span>
  <span class="type">String</span>
</dt>
<dd><p>Describes the current reconnection status. The possible
  values are <code>connected</code> (the connection is up and
  running), <code>connecting</code> (disconnected and trying to open a
  new connection), <code>failed</code> (permanently failed to connect; e.g., the client
  and server support different versions of DDP), <code>waiting</code> (failed
  to connect and waiting to try to reconnect) and <code>offline</code> (user has disconnected the connection).</p></dd>

























































<dt><span class="name">retryCount</span>
  <span class="type">Number</span>
</dt>
<dd><p>The number of times the client has tried to reconnect since the
  connection was lost. 0 when connected.</p></dd>

























































<dt><span class="name">retryTime</span>
  <span class="type">Number or undefined</span>
</dt>
<dd><p>The estimated time of the next reconnection attempt. To turn this
  into an interval until the next reconnection, use
  <code>retryTime - (new Date()).getTime()</code>. This key will
  be set only when <code>status</code> is <code>waiting</code>.</p></dd>

























































<dt><span class="name">reason</span>
  <span class="type">String or undefined</span>
</dt>
<dd><p>If <code>status</code> is <code>failed</code>, a description of why the connection failed.</p></dd>




























</dl>

<p>Instead of using callbacks to notify you on changes, this is
a <a href="http://localhost:3000/#reactivity">reactive</a> data source. You can use it in a
<a href="http://localhost:3000/#templates">template</a> or <a href="http://localhost:3000/#deps_autorun">computation</a>
to get realtime updates.</p>



















<div class="api ">
<h3 id="meteor_reconnect">
  <a class="name selflink" href="http://localhost:3000/#meteor_reconnect">Meteor.reconnect()</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Force an immediate reconnection attempt if the client is not connected to the server.</p>



















<p>This method does nothing if the client is already connected.</p>










</div>







</div>





































<div class="api ">
<h3 id="meteor_disconnect">
  <a class="name selflink" href="http://localhost:3000/#meteor_disconnect">Meteor.disconnect()</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Disconnect the client from the server.</p>










</div>







</div>



















<p>Call this method to disconnect from the server and stop all
live data updates. While the client is disconnected it will not receive
updates to collections, method calls will be queued until the
connection is reestablished, and hot code push will be disabled.</p>

<p>Call <a href="http://localhost:3000/#meteor_reconnect">Meteor.reconnect</a> to reestablish the connection
and resume data transfer.</p>

<p>This can be used to save battery on mobile devices when real time
updates are not required.</p>



















<div class="api ">
<h3 id="ddp_connect">
  <a class="name selflink" href="http://localhost:3000/#ddp_connect">DDP.connect(url)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">url</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The URL of another Meteor application.</p></dd>





</dl>














































</div>



















<p>To call methods on another Meteor application or subscribe to its data
sets, call <code>DDP.connect</code> with the URL of the application.
<code>DDP.connect</code> returns an object which provides:</p>

<ul>
<li><code>subscribe</code> -
Subscribe to a record set. See
<a href="http://localhost:3000/#meteor_subscribe">Meteor.subscribe</a>.</li>
<li><code>call</code> -
Invoke a method. See <a href="http://localhost:3000/#meteor_call">Meteor.call</a>.</li>
<li><code>apply</code> -
Invoke a method with an argument array. See
<a href="http://localhost:3000/#meteor_apply">Meteor.apply</a>.</li>
<li><code>methods</code> -
Define client-only stubs for methods defined on the remote server. See
<a href="http://localhost:3000/#meteor_methods">Meteor.methods</a>.</li>
<li><code>status</code> -
Get the current connection status. See
<a href="http://localhost:3000/#meteor_status">Meteor.status</a>.</li>
<li><code>reconnect</code> -
See <a href="http://localhost:3000/#meteor_reconnect">Meteor.reconnect</a>.</li>
<li><code>disconnect</code> -
See <a href="http://localhost:3000/#meteor_disconnect">Meteor.disconnect</a>.</li>
<li><code>onReconnect</code> - Set this to a function to be called as the first step of
reconnecting. This function can call methods which will be executed before
any other outstanding methods. For example, this can be used to re-establish
the appropriate authentication context on the new connection.</li>
</ul>

<p>By default, clients open a connection to the server from which they're loaded.
When you call <code>Meteor.subscribe</code>, <code>Meteor.status</code>, <code>Meteor.call</code>, and
<code>Meteor.apply</code>, you are using a connection back to that default
server.</p>

<h2 id="collections"><span>Collections</span></h2>

<p>Meteor stores data in <em>collections</em>.  To get started, declare a
collection with <code>new Meteor.Collection</code>.</p>



















<div class="api ">
<h3 id="meteor_collection">
  <a class="name selflink" href="http://localhost:3000/#meteor_collection">new Meteor.Collection(name, [options])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Constructor for a Collection</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">name</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.</p></dd>





</dl>















































<h4>Options</h4>




































<dl class="args">





<dt><span class="name">connection</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>The Meteor connection that will manage this collection. Uses the default connection if not specified. Pass <code>null</code> to specify no connection. Unmanaged (<code>name</code> is null) collections cannot specify a connection.</p></dd>









<dt><span class="name">idGeneration</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The method of generating the <code>_id</code> fields of new documents in this collection.  Possible values:</p>

<ul>
<li><strong><code>'STRING'</code></strong>: random strings</li>
<li><strong><code>'MONGO'</code></strong>:  random <a href="http://localhost:3000/#collection_object_id"><code>Meteor.Collection.ObjectID</code></a> values</li>
</ul>

<p>The default id generation technique is <code>'STRING'</code>.</p></dd>









<dt><span class="name">transform</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>An optional transformation function. Documents will be passed through this function before being returned from <code>fetch</code> or <code>findOne</code>, and before being passed to callbacks of <code>observe</code>, <code>allow</code>, and <code>deny</code>.</p></dd>





</dl>












































</div>



















<p>Calling this function is analogous to declaring a model in a traditional ORM
(Object-Relation Mapper)-centric framework. It sets up a <em>collection</em> (a storage
space for records, or "documents") that can be used to store a particular type
of information, like users, posts, scores, todo items, or whatever matters to
your application.  Each document is a EJSON object.  It includes an <code>_id</code>
property whose value is unique in the collection, which Meteor will set when you
first create the document.</p>

<pre><code>// common code on client and server declares livedata-managed mongo
// collection.
Chatrooms = new Meteor.Collection("chatrooms");
Messages = new Meteor.Collection("messages");
</code></pre>

<p>The function returns an object with methods to <a href="http://localhost:3000/#insert"><code>insert</code></a>
documents in the collection, <a href="http://localhost:3000/#update"><code>update</code></a> their properties, and
<a href="http://localhost:3000/#remove"><code>remove</code></a> them, and to <a href="http://localhost:3000/#find"><code>find</code></a> the documents in the
collection that match arbitrary criteria. The way these methods work is
compatible with the popular Mongo database API.  The same database API
works on both the client and the server (see below).</p>

<pre><code>// return array of my messages
var myMessages = Messages.find({userId: Session.get('myUserId')}).fetch();

// create a new message
Messages.insert({text: "Hello, world!"});

// mark my first message as "important"
Messages.update(myMessages[0]._id, {$set: {important: true}});
</code></pre>

<p>If you pass a <code>name</code> when you create the collection, then you are
declaring a persistent collection — one that is stored on the
server and seen by all users. Client code and server code can both
access the same collection using the same API.</p>

<p>Specifically, when you pass a <code>name</code>, here's what happens:</p>

<ul>
<li><p>On the server, a collection with that name is created on a backend
Mongo server. When you call methods on that collection on the server,
they translate directly into normal Mongo operations (after checking that
they match your <a href="http://localhost:3000/#allow">access control rules</a>).</p></li>
<li><p>On the client, a Minimongo instance is
created. Minimongo is essentially an in-memory, non-persistent
implementation of Mongo in pure JavaScript. It serves as a local cache
that stores just the subset of the database that this client is working
with. Queries on the client (<a href="http://localhost:3000/#find"><code>find</code></a>) are served directly out of
this cache, without talking to the server.</p></li>
<li><p>When you write to the database on the client (<a href="http://localhost:3000/#insert"><code>insert</code></a>,
<a href="http://localhost:3000/#update"><code>update</code></a>, <a href="http://localhost:3000/#remove"><code>remove</code></a>), the command is executed
immediately on the client, and, simultaneously, it's shipped up to the
server and executed there too.  The <code>livedata</code> package is
responsible for this.</p></li>
</ul>

<p>If you pass <code>null</code> as the <code>name</code>, then you're creating a local
collection. It's not synchronized anywhere; it's just a local scratchpad
that supports Mongo-style <a href="http://localhost:3000/#find"><code>find</code></a>, <a href="http://localhost:3000/#insert"><code>insert</code></a>,
<a href="http://localhost:3000/#update"><code>update</code></a>, and <a href="http://localhost:3000/#remove"><code>remove</code></a> operations.  (On both the
client and the server, this scratchpad is implemented using Minimongo.)</p>

<p>By default, Meteor automatically publishes every document in your
collection to each connected client.  To turn this behavior off, remove
the <code>autopublish</code> package:</p>

<pre><code>$ meteor remove autopublish
</code></pre>

<p>and instead call <a href="http://localhost:3000/#meteor_publish"><code>Meteor.publish</code></a> to specify which parts of
your collection should be published to which users.</p>

<pre><code>// Create a collection called Posts and put a document in it. The
// document will be immediately visible in the local copy of the
// collection. It will be written to the server-side database
// a fraction of a second later, and a fraction of a second
// after that, it will be synchronized down to any other clients
// that are subscribed to a query that includes it (see
// Meteor.subscribe and autopublish)
Posts = new Meteor.Collection("posts");
Posts.insert({title: "Hello world", body: "First post"});

// Changes are visible immediately -- no waiting for a round trip to
// the server.
assert(Posts.find().count() === 1);

// Create a temporary, local collection. It works just like any other
// collection, but it doesn't send changes to the server, and it
// can't receive any data from subscriptions.
Scratchpad = new Meteor.Collection;
for (var i = 0; i &lt; 10; i++)
  Scratchpad.insert({number: i * 2});
assert(Scratchpad.find({number: {$lt: 9}}).count() === 5);
</code></pre>

<p>If you specify a <code>transform</code> option to the <code>Collection</code> or any of its retrieval
methods, documents are passed through the <code>transform</code> function before being
returned or passed to callbacks.  This allows you to add methods or otherwise
modify the contents of your collection from their database representation.  You
can also specify <code>transform</code> on a particular <code>find</code>, <code>findOne</code>, <code>allow</code>, or
<code>deny</code> call.</p>

<pre><code>// An Animal class that takes a document in its constructor
Animal = function (doc) {
  _.extend(this, doc);
};
_.extend(Animal.prototype, {
  makeNoise: function () {
    console.log(this.sound);
  }
});

// Define a Collection that uses Animal as its document
Animals = new Meteor.Collection("Animals", {
  transform: function (doc) { return new Animal(doc); }
});

// Create an Animal and call its makeNoise method
Animals.insert({name: "raptor", sound: "roar"});
Animals.findOne({name: "raptor"}).makeNoise(); // prints "roar"
</code></pre>

<p><code>transform</code> functions are not called reactively.  If you want to add a
dynamically changing attribute to an object, do it with a function that computes
the value at the time it's called, not by computing the attribute at <code>transform</code>
time.</p>















<div class="warning">
    





<p>In this release, Minimongo has some limitations:</p>

<ul>
<li><code>$pull</code> in modifiers can only accept certain kinds
of selectors.</li>
<li><code>$</code> to denote the matched array position is not
supported in modifier.</li>
<li><code>findAndModify</code>, upsert, aggregate functions, and
map/reduce aren't supported.</li>
</ul>

<p>All of these will be addressed in a future release. For full
Minimongo release notes, see packages/minimongo/NOTES
in the repository.</p>






  </div>





























<div class="warning">
    





<p>Minimongo doesn't currently have indexes. It's rare for this to be an
issue, since it's unusual for a client to have enough data that an
index is worthwhile.</p>






  </div>

































<div class="api ">
<h3 id="find">
  <a class="name selflink" href="http://localhost:3000/#find"><em>collection</em>.find(selector, [options])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Find the documents in a collection that match the selector.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">selector</span>
  <span class="type">
    
      <a href="http://localhost:3000/#selectors">Mongo selector, or String</a>
    
  </span></dt>
<dd><p>The query</p></dd>





</dl>















































<h4>Options</h4>




































<dl class="args">





<dt><span class="name">sort</span>
  <span class="type">
    
      <a href="http://localhost:3000/#sortspecifiers">Sort specifier</a>
    
  </span></dt>
<dd><p>Sort order (default: natural order)</p></dd>









<dt><span class="name">skip</span>
  <span class="type">
    
      Number
    
  </span></dt>
<dd><p>Number of results to skip at the beginning</p></dd>









<dt><span class="name">limit</span>
  <span class="type">
    
      Number
    
  </span></dt>
<dd><p>Maximum number of results to return</p></dd>









<dt><span class="name">fields</span>
  <span class="type">
    
      <a href="http://localhost:3000/#fieldspecifiers">Field specifier</a>
    
  </span></dt>
<dd><p>(Server only) Dictionary of fields to return or exclude.</p></dd>









<dt><span class="name">reactive</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>(Client only) Default <code>true</code>; pass <code>false</code> to disable reactivity</p></dd>









<dt><span class="name">transform</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Overrides <code>transform</code> on the  <a href="http://localhost:3000/#collections"><code>Collection</code></a> for this cursor.  Pass <code>null</code> to disable transformation.</p></dd>





</dl>












































</div>



















<p><code>find</code> returns a cursor.  It does not immediately access the database or return
documents.  Cursors provide <code>fetch</code> to return all matching documents, <code>map</code> and
<code>forEach</code> to iterate over all matching documents, and <code>observe</code> and
<code>observeChanges</code> to register callbacks when the set of matching documents
changes.</p>















<div class="warning">
    





<p>Collection cursors are not query snapshots.  If the database changes
between calling <code>Collection.find</code> and fetching the
results of the cursor, or while fetching results from the cursor,
those changes may or may not appear in the result set.</p>






  </div>















<p>Cursors are a reactive data source.  The first time you retrieve a
cursor's documents with <code>fetch</code>, <code>map</code>, or <code>forEach</code> inside a
reactive computation (eg, a template or
<a href="http://localhost:3000/#deps_autorun"><code>autorun</code></a>), Meteor will register a
dependency on the underlying data.  Any change to the collection that
changes the documents in a cursor will trigger a recomputation.  To
disable this behavior, pass <code>{reactive: false}</code> as an option to
<code>find</code>.</p>



















<div class="api ">
<h3 id="findone">
  <a class="name selflink" href="http://localhost:3000/#findone"><em>collection</em>.findOne(selector, [options])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Finds the first document that matches the selector, as ordered by sort and skip options.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">selector</span>
  <span class="type">
    
      <a href="http://localhost:3000/#selectors">Mongo selector, or String</a>
    
  </span></dt>
<dd><p>The query</p></dd>





</dl>















































<h4>Options</h4>




































<dl class="args">





<dt><span class="name">sort</span>
  <span class="type">
    
      <a href="http://localhost:3000/#sortspecifiers">Sort specifier</a>
    
  </span></dt>
<dd><p>Sort order (default: natural order)</p></dd>









<dt><span class="name">skip</span>
  <span class="type">
    
      Number
    
  </span></dt>
<dd><p>Number of results to skip at the beginning</p></dd>









<dt><span class="name">fields</span>
  <span class="type">
    
      <a href="http://localhost:3000/#fieldspecifiers">Field specifier</a>
    
  </span></dt>
<dd><p>(Server only) Dictionary of fields to return or exclude.</p></dd>









<dt><span class="name">reactive</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>(Client only) Default true; pass false to disable reactivity</p></dd>









<dt><span class="name">transform</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Overrides <code>transform</code> on the <a href="http://localhost:3000/#collections"><code>Collection</code></a> for this cursor.  Pass <code>null</code> to disable transformation.</p></dd>





</dl>












































</div>



















<p>Equivalent to <code>find(selector, options).fetch()[0]</code> with
<code>options.limit = 1</code>.</p>



















<div class="api ">
<h3 id="insert">
  <a class="name selflink" href="http://localhost:3000/#insert"><em>collection</em>.insert(doc, [callback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Insert a document in the collection.  Returns its unique _id.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">doc</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.</p></dd>









<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.</p></dd>





</dl>














































</div>



















<p>Add a document to the collection. A document is just an object, and
its fields can contain any combination of EJSON-compatible datatypes
(arrays, objects, numbers, strings, <code>null</code>, true, and false).</p>

<p><code>insert</code> will generate a unique ID for the object you pass, insert it
in the database, and return the ID. When <code>insert</code> is called from
untrusted client code, it will be allowed only if passes any
applicable <a href="http://localhost:3000/#allow"><code>allow</code></a> and <a href="http://localhost:3000/#deny"><code>deny</code></a> rules.</p>

<p>On the server, if you don't provide a callback, then <code>insert</code> blocks
until the database acknowledges the write, or throws an exception if
something went wrong.  If you do provide a callback, <code>insert</code> still
returns the ID immediately.  Once the insert completes (or fails), the
callback is called with error and result arguments.  In an error case,
<code>result</code> is undefined.  If the insert is successful, <code>error</code> is
undefined and <code>result</code> is the new document ID.</p>

<p>On the client, <code>insert</code> never blocks.  If you do not provide a callback
and the insert fails on the server, then Meteor will log a warning to
the console.  If you provide a callback, Meteor will call that function
with <code>error</code> and <code>result</code> arguments.  In an error case, <code>result</code> is
undefined.  If the insert is successful, <code>error</code> is undefined and
<code>result</code> is the new document ID.</p>

<p>Example:</p>

<pre><code>var groceriesId = Lists.insert({name: "Groceries"});
Items.insert({list: groceriesId, name: "Watercress"});
Items.insert({list: groceriesId, name: "Persimmons"});
</code></pre>



















<div class="api ">
<h3 id="update">
  <a class="name selflink" href="http://localhost:3000/#update"><em>collection</em>.update(selector, modifier, [options], [callback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Modify one or more documents in the collection</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">selector</span>
  <span class="type">
    
      <a href="http://localhost:3000/#selectors">Mongo selector, or object id</a>
    
  </span></dt>
<dd><p>Specifies which documents to modify</p></dd>









<dt><span class="name">modifier</span>
  <span class="type">
    
      <a href="http://localhost:3000/#modifiers">Mongo modifier</a>
    
  </span></dt>
<dd><p>Specifies how to modify the documents</p></dd>









<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional.  If present, called with an error object as its argument.</p></dd>





</dl>















































<h4>Options</h4>




































<dl class="args">





<dt><span class="name">multi</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>True to modify all matching documents; false to only modify one of the matching documents (the default).</p></dd>





</dl>












































</div>



















<p>Modify documents that match <code>selector</code> according to <code>modifier</code> (see
<a href="http://localhost:3000/#modifiers">modifier documentation</a>).</p>

<p>The behavior of <code>update</code> differs depending on whether it is called by
trusted or untrusted code. Trusted code includes server code and
method code. Untrusted code includes client-side code such as event
handlers and a browser's JavaScript console.</p>

<ul>
<li><p>Trusted code can modify multiple documents at once by setting
<code>multi</code> to true, and can use an arbitrary <a href="http://localhost:3000/#selectors">Mongo
selector</a> to find the documents to modify. It bypasses
any access control rules set up by <a href="http://localhost:3000/#allow"><code>allow</code></a> and
<a href="http://localhost:3000/#deny"><code>deny</code></a>.</p></li>
<li><p>Untrusted code can only modify a single document at once, specified
by its <code>_id</code>. The modification is allowed only after checking any
applicable <a href="http://localhost:3000/#allow"><code>allow</code></a> and <a href="http://localhost:3000/#deny"><code>deny</code></a> rules.</p></li>
</ul>

<p>On the server, if you don't provide a callback, then <code>update</code> blocks
until the database acknowledges the write, or throws an exception if
something went wrong.  If you do provide a callback, <code>update</code> returns
immediately.  Once the update completes, the callback is called with a
single error argument in the case of failure, or no arguments if the
update was successful.</p>

<p>On the client, <code>update</code> never blocks.  If you do not provide a callback
and the update fails on the server, then Meteor will log a warning to
the console.  If you provide a callback, Meteor will call that function
with an error argument if there was an error, or no arguments if the
update was successful.</p>

<p>Client example:</p>

<pre><code>// When the givePoints button in the admin dashboard is pressed,
// give 5 points to the current player. The new score will be
// immediately visible on everyone's screens.
Template.adminDashboard.events({
  'click .givePoints': function () {
    Players.update(Session.get("currentPlayer"), {$inc: {score: 5}});
  }
});
</code></pre>

<p>Server example:</p>

<pre><code>// Give the "Winner" badge to each user with a score greater than
// 10. If they are logged in and their badge list is visible on the
// screen, it will update automatically as they watch.
Meteor.methods({
  declareWinners: function () {
    Players.update({score: {$gt: 10}},
                   {$addToSet: {badges: "Winner"}},
                   {multi: true});
  }
});
</code></pre>















<div class="warning">
    





<p>The Mongo <code>upsert</code> feature is not implemented.</p>






  </div>

































<div class="api ">
<h3 id="remove">
  <a class="name selflink" href="http://localhost:3000/#remove"><em>collection</em>.remove(selector, [callback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Remove documents from the collection</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">selector</span>
  <span class="type">
    
      <a href="http://localhost:3000/#selectors">Mongo selector, or object id</a>
    
  </span></dt>
<dd><p>Specifies which documents to remove</p></dd>









<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional.  If present, called with an error object as its argument.</p></dd>





</dl>














































</div>



















<p>Find all of the documents that match <code>selector</code> and delete them from
the collection.</p>

<p>The behavior of <code>remove</code> differs depending on whether it is called by
trusted or untrusted code. Trusted code includes server code and
method code. Untrusted code includes client-side code such as event
handlers and a browser's JavaScript console.</p>

<ul>
<li><p>Trusted code can use an arbitrary <a href="http://localhost:3000/#selectors">Mongo selector</a> to
find the documents to remove, and can remove more than one document
at once by passing a selector that matches multiple documents. It
bypasses any access control rules set up by <a href="http://localhost:3000/#allow"><code>allow</code></a> and
<a href="http://localhost:3000/#deny"><code>deny</code></a>.</p>

<p>As a safety measure, if <code>selector</code> is omitted (or is <code>undefined</code>),
no documents will be removed. Set <code>selector</code> to <code>{}</code> if you really
want to remove all documents from your collection.</p></li>
<li><p>Untrusted code can only remove a single document at a time,
specified by its <code>_id</code>. The document is removed only after checking
any applicable <a href="http://localhost:3000/#allow"><code>allow</code></a> and <a href="http://localhost:3000/#deny"><code>deny</code></a> rules.</p></li>
</ul>

<p>On the server, if you don't provide a callback, then <code>remove</code> blocks
until the database acknowledges the write, or throws an exception if
something went wrong.  If you do provide a callback, <code>remove</code> returns
immediately.  Once the remove completes, the callback is called with a
single error argument in the case of failure, or no arguments if the
remove was successful.</p>

<p>On the client, <code>remove</code> never blocks.  If you do not provide a callback
and the remove fails on the server, then Meteor will log a warning to
the console.  If you provide a callback, Meteor will call that function
with an error argument if there was an error, or no arguments if the
remove was successful.</p>

<p>Client example:</p>

<pre><code>// When the remove button is clicked on a chat message, delete
// that message.
Template.chat.events({
  'click .remove': function () {
    Messages.remove(this._id);
  }
});
</code></pre>

<p>Server example:</p>

<pre><code>// When the server starts, clear the log, and delete all players
// with a karma of less than -2.
Meteor.startup(function () {
  if (Meteor.isServer) {
    Logs.remove({});
    Players.remove({karma: {$lt: -2}});
  }
});
</code></pre>



















<div class="api ">
<h3 id="allow">
  <a class="name selflink" href="http://localhost:3000/#allow"><em>collection</em>.allow(options)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Allow users to write directly to this collection from client code, subject to limitations you define.</p>










</div>








<h4>Options</h4>




































<dl class="args">





<dt><span class="name">insert, update, remove</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Functions that look at a proposed modification to the database and return true if it should be allowed.</p></dd>









<dt><span class="name">fetch</span>
  <span class="type">
    
      Array of String
    
  </span></dt>
<dd><p>Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your <code>update</code> and <code>remove</code> functions.</p></dd>









<dt><span class="name">transform</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Overrides <code>transform</code> on the  <a href="http://localhost:3000/#collections"><code>Collection</code></a>.  Pass <code>null</code> to disable transformation.</p></dd>





</dl>












































</div>



















<p>When a client calls <code>insert</code>, <code>update</code>, or <code>remove</code> on a collection, the
collection's <code>allow</code> and <a href="http://localhost:3000/#deny"><code>deny</code></a> callbacks are called
on the server to determine if the write should be allowed. If at least
one <code>allow</code> callback allows the write, and no <code>deny</code> callbacks deny the
write, then the write is allowed to proceed.</p>

<p>These checks are run only when a client tries to write to the database
directly, for example by calling <code>update</code> from inside an event
handler. Server code is trusted and isn't subject to <code>allow</code> and <code>deny</code>
restrictions. That includes methods that are called with <code>Meteor.call</code>
— they are expected to do their own access checking rather than
relying on <code>allow</code> and <code>deny</code>.</p>

<p>You can call <code>allow</code> as many times as you like, and each call can
include any combination of <code>insert</code>, <code>update</code>, and <code>remove</code>
functions. The functions should return <code>true</code> if they think the
operation should be allowed. Otherwise they should return <code>false</code>, or
nothing at all (<code>undefined</code>). In that case Meteor will continue
searching through any other <code>allow</code> rules on the collection.</p>

<p>The available callbacks are:</p>

<dl class="callbacks">




























<dt><span class="name">insert(userId, doc)</span>
  
</dt>
<dd><p>The user <code>userId</code> wants to insert the document <code>doc</code> into the
collection. Return <code>true</code> if this should be allowed.</p></dd>

























































<dt><span class="name">update(userId, doc, fieldNames, modifier)</span>
  
</dt>
<dd><p>The user <code>userId</code> wants to update a document <code>doc</code>. (<code>doc</code> is the
current version of the document from the database, without the
proposed update.) Return <code>true</code> to permit the change.</p>

<p><code>fieldNames</code> is an array of the (top-level) fields in <code>doc</code> that the
client wants to modify, for example
<code>['name',</code>&nbsp;<code>'score']</code>. <code>modifier</code> is the raw Mongo modifier that
the client wants to execute, for example <code>{$set: {'name.first':
"Alice"}, $inc: {score: 1}}</code>.</p>

<p>Only Mongo modifiers are supported (operations like <code>$set</code> and <code>$push</code>).
If the user tries to replace the entire document rather than use
$-modifiers, the request will be denied without checking the <code>allow</code>
functions.</p></dd>

























































<dt><span class="name">remove(userId, doc)</span>
  
</dt>
<dd><p>The user <code>userId</code> wants to remove <code>doc</code> from the database. Return
<code>true</code> to permit this.</p></dd>





























</dl>

<p>When calling <code>update</code> or <code>remove</code> Meteor will by default fetch the
entire document <code>doc</code> from the database. If you have large documents
you may wish to fetch only the fields that are actually used by your
functions. Accomplish this by setting <code>fetch</code> to an array of field
names to retrieve.</p>

<p>Example:</p>

<pre><code>// Create a collection where users can only modify documents that
// they own. Ownership is tracked by an 'owner' field on each
// document. All documents must be owned by the user that created
// them and ownership can't be changed. Only a document's owner
// is allowed to delete it, and the 'locked' attribute can be
// set on a document to prevent its accidental deletion.

Posts = new Meteor.Collection("posts");

Posts.allow({
  insert: function (userId, doc) {
    // the user must be logged in, and the document must be owned by the user
    return (userId &amp;&amp; doc.owner === userId);
  },
  update: function (userId, doc, fields, modifier) {
    // can only change your own documents
    return doc.owner === userId;
  },
  remove: function (userId, doc) {
    // can only remove your own documents
    return doc.owner === userId;
  },
  fetch: ['owner']
});

Posts.deny({
  update: function (userId, docs, fields, modifier) {
    // can't change owners
    return _.contains(fields, 'owner');
  },
  remove: function (userId, doc) {
    // can't remove locked documents
    return doc.locked;
  },
  fetch: ['locked'] // no need to fetch 'owner'
});
</code></pre>

<p>If you never set up any <code>allow</code> rules on a collection then all client
writes to the collection will be denied, and it will only be possible to
write to the collection from server-side code. In this case you will
have to create a method for each possible write that clients are allowed
to do. You'll then call these methods with <code>Meteor.call</code> rather than
having the clients call <code>insert</code>, <code>update</code>, and <code>remove</code> directly on the
collection.</p>

<p>Meteor also has a special "insecure mode" for quickly prototyping new
applications. In insecure mode, if you haven't set up any <code>allow</code> or <code>deny</code>
rules on a collection, then all users have full write access to the
collection. This is the only effect of insecure mode. If you call <code>allow</code> or
<code>deny</code> at all on a collection, even <code>Posts.allow({})</code>, then access is checked
just like normal on that collection. <strong>New Meteor projects start in insecure
mode by default.</strong> To turn it off just run <code>$ meteor remove insecure</code>.</p>



















<div class="api ">
<h3 id="deny">
  <a class="name selflink" href="http://localhost:3000/#deny"><em>collection</em>.deny(options)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Override <code>allow</code> rules.</p>










</div>








<h4>Options</h4>




































<dl class="args">





<dt><span class="name">insert, update, remove</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Functions that look at a proposed modification to the database and return true if it should be denied, even if an <code>allow</code> rule says otherwise.</p></dd>









<dt><span class="name">fetch</span>
  <span class="type">
    
      Array of Strings
    
  </span></dt>
<dd><p>Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your <code>update</code> and <code>remove</code> functions.</p></dd>









<dt><span class="name">transform</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Overrides <code>transform</code> on the  <a href="http://localhost:3000/#collections"><code>Collection</code></a>.  Pass <code>null</code> to disable transformation.</p></dd>





</dl>












































</div>



















<p>This works just like <a href="http://localhost:3000/#allow"><code>allow</code></a>, except it lets you
make sure that certain writes are definitely denied, even if there is an
<code>allow</code> rule that says that they should be permitted.</p>

<p>When a client tries to write to a collection, the Meteor server first
checks the collection's <code>deny</code> rules. If none of them return true then
it checks the collection's <code>allow</code> rules. Meteor allows the write only
if no <code>deny</code> rules return <code>true</code> and at least one <code>allow</code> rule returns
<code>true</code>.</p>

<h2 id="meteor_collection_cursor"><span>Cursors</span></h2>

<p>To create a cursor, use <a href="http://localhost:3000/#find"><code>find</code></a>.  To access the documents in a
cursor, use <a href="http://localhost:3000/#foreach"><code>forEach</code></a>, <a href="http://localhost:3000/#map"><code>map</code></a>, or <a href="http://localhost:3000/#fetch"><code>fetch</code></a>.</p>



















<div class="api ">
<h3 id="foreach">
  <a class="name selflink" href="http://localhost:3000/#foreach"><em>cursor</em>.forEach(callback)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Call <code>callback</code> once for each matching document, sequentially and synchronously.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Function to call.</p></dd>





</dl>














































</div>



















<p>When called from a reactive computation, <code>forEach</code> registers dependencies on
the matching documents.</p>

<p>Examples:</p>

<pre><code>// Print the titles of the five top-scoring posts
var topPosts = Posts.find({}, {sort: {score: -1}, limit: 5});
var count = 0;
topPosts.forEach(function (post) {
  console.log("Title of post " + count + ": " + post.title);
  count += 1;
});
</code></pre>



















<div class="api ">
<h3 id="map">
  <a class="name selflink" href="http://localhost:3000/#map"><em>cursor</em>.map(callback)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Map callback over all matching documents.  Returns an Array.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Function to call.</p></dd>





</dl>














































</div>



















<p>When called from a reactive computation, <code>map</code> registers dependencies on
the matching documents.</p>

<!-- The following is not yet implemented, but users shouldn't assume
     sequential execution anyway because that will break. -->

<p>On the server, if <code>callback</code> yields, other calls to <code>callback</code> may occur while
the first call is waiting. If strict sequential execution is necessary, use
<code>forEach</code> instead.</p>



















<div class="api ">
<h3 id="fetch">
  <a class="name selflink" href="http://localhost:3000/#fetch"><em>cursor</em>.fetch()</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Return all matching documents as an Array.</p>










</div>







</div>



















<p>When called from a reactive computation, <code>fetch</code> registers dependencies on
the matching documents.</p>



















<div class="api ">
<h3 id="count">
  <a class="name selflink" href="http://localhost:3000/#count"><em>cursor</em>.count()</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Returns the number of documents that match a query.</p>










</div>







</div>



















<pre><code>// Display a count of posts matching certain criteria. Automatically
// keep it updated as the database changes.
var frag = Meteor.render(function () {
  var highScoring = Posts.find({score: {$gt: 10}});
  return "&lt;p&gt;There are " + highScoring.count() + " posts with " +
    "scores greater than 10&lt;/p&gt;";
});
document.body.appendChild(frag);
</code></pre>

<p>Unlike the other functions, <code>count</code> registers a dependency only on the
number of matching documents.  (Updates that just change or reorder the
documents in the result set will not trigger a recomputation.)</p>



















<div class="api ">
<h3 id="rewind">
  <a class="name selflink" href="http://localhost:3000/#rewind"><em>cursor</em>.rewind()</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Resets the query cursor.</p>










</div>







</div>



















<p>The <code>forEach</code>, <code>map</code>, or <code>fetch</code> methods can only be called once on a
cursor.  To access the data in a cursor more than once, use <code>rewind</code> to
reset the cursor.</p>



















<div class="api ">
<h3 id="observe">
  <a class="name selflink" href="http://localhost:3000/#observe"><em>cursor</em>.observe(callbacks)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Watch a query.  Receive callbacks as the result set changes.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callbacks</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>Functions to call to deliver the result set as it changes</p></dd>





</dl>














































</div>



















<p>Establishes a <em>live query</em> that invokes callbacks when the result of
the query changes. The callbacks receive the entire contents of the
document that was affected, as well as its old contents, if
applicable. If you only need to receive the fields that changed, see
<a href="http://localhost:3000/#observe_changes"><code>observeChanges</code></a>.</p>

<p><code>callbacks</code> may have the following functions as properties:</p>

<dl class="callbacks">
<dt><span class="name">added(document)</span> <span class="or">or</span></dt>
<dt><span class="name">addedAt(document, atIndex, before)</span></dt>
<dd>
<p>A new document <code>document</code> entered the result set. The new document
appears at position <code>atIndex</code>. It is immediately before the document
whose <code>_id</code> is <code>before</code>. <code>before</code> will be <code>null</code> if the new document
is at the end of the results.</p>
</dd>

<dt><span class="name">changed(newDocument, oldDocument)
    <span class="or">or</span></span></dt>
<dt><span class="name">changedAt(newDocument, oldDocument, atIndex)</span></dt>
<dd>
<p>The contents of a document were previously <code>oldDocument</code> and are now
<code>newDocument</code>. The position of the changed document is <code>atIndex</code>.</p>
</dd>

<dt><span class="name">removed(oldDocument)</span>
  <span class="or">or</span></dt>
<dt><span class="name">removedAt(oldDocument, atIndex)</span></dt>
<dd>
<p>The document <code>oldDocument</code> is no longer in the result set. It used to be at position <code>atIndex</code>.</p>
</dd>





























<dt><span class="name">movedTo(document, fromIndex, toIndex, before)</span>
  
</dt>
<dd><p>A document changed its position in the result set, from <code>fromIndex</code> to <code>toIndex</code>
(which is before the document with id <code>before</code>). Its current contents is
<code>document</code>.</p></dd>




























</dl>

<p>Use <code>added</code>, <code>changed</code>, and <code>removed</code> when you don't care about the
order of the documents in the result set. They are more efficient than
<code>addedAt</code>, <code>changedAt</code>, and <code>removedAt</code>.</p>

<p>Before <code>observe</code> returns, <code>added</code> (or <code>addedAt</code>) will be called zero
or more times to deliver the initial results of the query.</p>

<p><code>observe</code> returns a live query handle, which is an object with a <code>stop</code> method.
Call <code>stop</code> with no arguments to stop calling the callback functions and tear
down the query. <strong>The query will run forever until you call this.</strong>  If
<code>observe</code> is called from a <code>Deps.autorun</code> computation, it is automatically
stopped when the computation is rerun or stopped.
(If the cursor was created with the option <code>reactive</code> set to false, it will
only deliver the initial results and will not call any further callbacks;
it is not necessary to call <code>stop</code> on the handle.)</p>



















<div class="api ">
<h3 id="observe_changes">
  <a class="name selflink" href="http://localhost:3000/#observe_changes"><em>cursor</em>.observeChanges(callbacks)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callbacks</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>Functions to call to deliver the result set as it changes</p></dd>





</dl>














































</div>



















<p>Establishes a <em>live query</em> that invokes callbacks when the result of
the query changes. In contrast to <a href="http://localhost:3000/#observe"><code>observe</code></a>,
<code>observeChanges</code> provides only the difference between the old and new
result set, not the entire contents of the document that changed.</p>

<p><code>callbacks</code> may have the following functions as properties:</p>

<dl class="callbacks">
<dt><span class="name">added(id, fields)</span>
  <span class="or">or</span></dt>
<dt><span class="name">addedBefore(id, fields, before)</span></dt>
<dd>
<p>A new document entered the result set. It has the <code>id</code> and <code>fields</code>
specified. <code>fields</code> contains all fields of the document excluding the
<code>_id</code> field. The new document is before the document identified by
<code>before</code>, or at the end if <code>before</code> is <code>null</code>.</p>
</dd>





























<dt><span class="name">changed(id, fields)</span>
  
</dt>
<dd><p>The document identified by <code>id</code> has changed. <code>fields</code> contains the
changed fields with their new values. If a field was removed from the
document then it will be present in <code>fields</code> with a value of
<code>undefined</code>.</p></dd>

























































<dt><span class="name">movedBefore(id, before)</span>
  
</dt>
<dd><p>The document identified by <code>id</code> changed its position in the ordered result set,
and now appears before the document identified by <code>before</code>.</p></dd>

























































<dt><span class="name">removed(id)</span>
  
</dt>
<dd><p>The document identified by <code>id</code> was removed from the result set.</p></dd>




























</dl>

<p><code>observeChanges</code> is significantly more efficient if you do not use
<code>addedBefore</code> or <code>movedBefore</code>.</p>

<p>Before <code>observeChanges</code> returns, <code>added</code> (or <code>addedBefore</code>) will be called
zero or more times to deliver the initial results of the query.</p>

<p><code>observeChanges</code> returns a live query handle, which is an object with a <code>stop</code>
method.  Call <code>stop</code> with no arguments to stop calling the callback functions
and tear down the query. <strong>The query will run forever until you call this.</strong>
If
<code>observeChanges</code> is called from a <code>Deps.autorun</code> computation, it is automatically
stopped when the computation is rerun or stopped.
(If the cursor was created with the option <code>reactive</code> set to false, it will
only deliver the initial results and will not call any further callbacks;
it is not necessary to call <code>stop</code> on the handle.)</p>















<div class="note">
    





<p>Unlike <code>observe</code>, <code>observeChanges</code> does not provide absolute position
information (that is, <code>atIndex</code> positions rather than <code>before</code>
positions.) This is for efficiency.</p>






  </div>















<p>Example:</p>

<pre><code>// Keep track of how many administrators are online.
var count = 0;
var query = Users.find({admin: true, onlineNow: true});
var handle = query.observeChanges({
  added: function (id, user) {
    count++;
    console.log(user.name + " brings the total to " + count + " admins.");
  },
  removed: function () {
    count--;
    console.log("Lost one. We're now down to " + count + " admins.");
  }
});

// After five seconds, stop keeping the count.
setTimeout(function () {handle.stop();}, 5000);
</code></pre>



















<div class="api ">
<h3 id="collection_object_id">
  <a class="name selflink" href="http://localhost:3000/#collection_object_id">new Meteor.Collection.ObjectID(hexString)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Create a Mongo-style <code>ObjectID</code>.  If you don't specify a <code>hexString</code>, the <code>ObjectID</code> will generated randomly (not using MongoDB's ID construction rules).</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">hexString</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Optional.  The 24-character hexadecimal contents of the ObjectID to create</p></dd>





</dl>














































</div>



















<p><code>Meteor.Collection.ObjectID</code> follows the same API as the <a href="http://mongodb.github.com/node-mongodb-native/api-bson-generated/objectid.html" target="_blank">Node MongoDB driver
<code>ObjectID</code></a>
class. Note that you must use the <code>equals</code> method (or <a href="http://localhost:3000/#ejson_equals"><code>EJSON.equals</code></a>) to
compare them; the <code>===</code> operator will not work. If you are writing generic code
that needs to deal with <code>_id</code> fields that may be either strings or <code>ObjectID</code>s, use
<a href="http://localhost:3000/#ejson_equals"><code>EJSON.equals</code></a> instead of <code>===</code> to compare them.</p>















<div class="note">
    





<p><code>ObjectID</code> values created by Meteor will not have meaningful answers to their <code>getTimestamp</code>
  method, since Meteor currently constructs them fully randomly.</p>






  </div>





























<div class="api bareapi">
<h3 id="selectors">
  <a class="name selflink" href="http://localhost:3000/#selectors">Mongo-style Selectors</a>

</h3>

<div class="desc">

</div>






<p>In its simplest form, a selector is just a set of keys that must
match in a document:</p>

<pre><code>// Matches all documents where deleted is false
{deleted: false}

// Matches all documents where the name and cognomen are as given
{name: "Rhialto", cognomen: "the Marvelous"}

// Matches every document
{}
</code></pre>

<p>But they can also contain more complicated tests:</p>

<pre><code>// Matches documents where age is greater than 18
{age: {$gt: 18}}

// Also matches documents where tags is an array containing "popular"
{tags: "popular"}

// Matches documents where fruit is one of three possibilities
{fruit: {$in: ["peach", "plum", "pear"]}}
</code></pre>

<p>See the <a href="http://www.mongodb.org/display/DOCS/Advanced+Queries" target="_blank">complete
documentation</a>.</p>


</div>





























<div class="api bareapi">
<h3 id="modifiers">
  <a class="name selflink" href="http://localhost:3000/#modifiers">Mongo-style Modifiers</a>

</h3>

<div class="desc">

</div>






<p>A modifier is an object that describes how to update a document in
place by changing some of its fields. Some examples:</p>

<pre><code>// Set the 'admin' property on the document to true
{$set: {admin: true}}

// Add 2 to the 'votes' property, and add "Traz"
// to the end of the 'supporters' array
{$inc: {votes: 2}, $push: {supporters: "Traz"}}
</code></pre>

<p>But if a modifier doesn't contain any $-operators, then it is instead
interpreted as a literal document, and completely replaces whatever was
previously in the database. (Literal document modifiers are not currently
supported by <a href="http://localhost:3000/#allow">validated updates</a>.)</p>

<pre><code>// Find the document with id "123", and completely replace it.
Users.update({_id: "123"}, {name: "Alice", friends: ["Bob"]});
</code></pre>

<p>See the <a href="http://www.mongodb.org/display/DOCS/Updating#Updating-ModifierOperations" target="_blank">full list of
modifiers</a>.</p>


</div>





























<div class="api bareapi">
<h3 id="sortspecifiers">
  <a class="name selflink" href="http://localhost:3000/#sortspecifiers">Sort Specifiers</a>

</h3>

<div class="desc">

</div>






<p>Sorts may be specified using your choice of several syntaxes:</p>

<pre><code>// All of these do the same thing (sort in ascending order by
// key "a", breaking ties in descending order of key "b")

[["a", "asc"], ["b", "desc"]]
["a", ["b", "desc"]]
{a: 1, b: -1}
</code></pre>

<p>The last form will only work if your JavaScript implementation
preserves the order of keys in objects. Most do, most of the time, but
it's up to you to be sure.</p>


</div>





























<div class="api bareapi">
<h3 id="fieldspecifiers">
  <a class="name selflink" href="http://localhost:3000/#fieldspecifiers">Field Specifiers</a>

</h3>

<div class="desc">

</div>






<p>On the server, queries can specify a particular set of fields to include
or exclude from the result object.  (The field specifier is currently
ignored on the client.)</p>

<p>To exclude certain fields from the result objects, the field specifier
is a dictionary whose keys are field names and whose values are <code>0</code>.</p>

<pre><code>// Users.find({}, {fields: {password: 0, hash: 0}})
</code></pre>

<p>To return an object that only includes the specified field, use <code>1</code> as
the value.  The <code>_id</code> field is still included in the result.</p>

<pre><code>// Users.find({}, {fields: {firstname: 1, lastname: 1}})
</code></pre>

<p>It is not possible to mix inclusion and exclusion styles.</p>


</div>















<h2 id="session"><span>Session</span></h2>

<p><code>Session</code> provides a global object on the client that you can use to
store an arbitrary set of key-value pairs. Use it to store things like
the currently selected item in a list.</p>

<p>What's special about <code>Session</code> is that it's reactive. If
you call <a href="http://localhost:3000/#session_get"><code>Session.get</code></a><code>("currentList")</code>
from inside a template, the template will automatically be rerendered
whenever <a href="http://localhost:3000/#session_set"><code>Session.set</code></a><code>("currentList", x)</code> is called.</p>



















<div class="api ">
<h3 id="session_set">
  <a class="name selflink" href="http://localhost:3000/#session_set">Session.set(key, value)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Set a variable in the session. Notify any listeners that the value has changed (eg: redraw templates, and rerun any <a href="http://localhost:3000/#deps_autorun"><code>Deps.autorun</code></a> computations, that called <a href="http://localhost:3000/#session_get"><code>Session.get</code></a> on this <code>key</code>.)</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">key</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The key to set, eg, <code>selectedItem</code></p></dd>









<dt><span class="name">value</span>
  <span class="type">
    
      EJSON-able object or undefined
    
  </span></dt>
<dd><p>The new value for <code>key</code></p></dd>





</dl>














































</div>



















<p>Example:</p>

<pre><code>Deps.autorun(function () {
  Meteor.subscribe("chat-history", {room: Session.get("currentRoomId")});
});

// Causes the function passed to Deps.autorun to be re-run, so
// that the chat-history subscription is moved to the room "home".
Session.set("currentRoomId", "home");
</code></pre>



















<div class="api ">
<h3 id="session_set_default">
  <a class="name selflink" href="http://localhost:3000/#session_set_default">Session.setDefault(key, value)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Set a variable in the session if it is undefined. Otherwise works exactly the same as <a href="http://localhost:3000/#session_set"><code>Session.set</code></a>.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">key</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The key to set, eg, <code>selectedItem</code></p></dd>









<dt><span class="name">value</span>
  <span class="type">
    
      EJSON-able object or undefined
    
  </span></dt>
<dd><p>The new value for <code>key</code></p></dd>





</dl>














































</div>



















<p>This is useful in initialization code, to avoid re-initializing a session
variable every time a new version of your app is loaded.</p>



















<div class="api ">
<h3 id="session_get">
  <a class="name selflink" href="http://localhost:3000/#session_get">Session.get(key)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Get the value of a session variable. If inside a <a href="http://localhost:3000/#reactivity">reactive computation</a>, invalidate the computation the next time the value of the variable is changed by <a href="http://localhost:3000/#session_set"><code>Session.set</code></a>. This returns a clone of the session value, so if it's an object or an array, mutating the returned value has no effect on the value stored in the session.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">key</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The name of the session variable to return</p></dd>





</dl>














































</div>



















<p>Example:</p>

<pre><code>Session.set("enemy", "Eastasia");
var frag = Meteor.render(function () {
  return "&lt;p&gt;We've always been at war with " +
    Session.get("enemy") + "&lt;/p&gt;";
});

// Page will say "We've always been at war with Eastasia"
document.body.append(frag);

// Page will change to say "We've always been at war with Eurasia"
Session.set("enemy", "Eurasia");
</code></pre>



















<div class="api ">
<h3 id="session_equals">
  <a class="name selflink" href="http://localhost:3000/#session_equals">Session.equals(key, value)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Test if a session variable is equal to a value. If inside a <a href="http://localhost:3000/#reactivity">reactive computation</a>, invalidate the computation the next time the variable changes to or from the value.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">key</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The name of the session variable to test</p></dd>









<dt><span class="name">value</span>
  <span class="type">
    
      String, Number, Boolean, null, or undefined
    
  </span></dt>
<dd><p>The value to test against</p></dd>





</dl>














































</div>



















<p>If value is a scalar, then these two expressions do the same thing:</p>

<pre><code>(1) Session.get("key") === value
(2) Session.equals("key", value)
</code></pre>

<p>... but the second one is always better. It triggers fewer invalidations
(template redraws), making your program more efficient.</p>

<p>Example:</p>

<pre><code>&lt;template name="postsView"&gt;
{{! Show a dynamically updating list of items. Let the user click on an
    item to select it. The selected item is given a CSS class so it
    can be rendered differently. }}

{{#each posts}}
  {{&gt; postItem }}
{{/each}}
&lt;/template&gt;

&lt;template name="postItem"&gt;
  &lt;div class="{{postClass}}"&gt;{{title}}&lt;/div&gt;
&lt;/template&gt;

///// in JS file
Template.postsView.posts = function() {
  return Posts.find();
};

Template.postItem.postClass = function() {
  return Session.equals("selectedPost", this._id) ?
    "selected" : "";
};

Template.postItem.events({
  'click': function() {
    Session.set("selectedPost", this._id);
  }
});

// Using Session.equals here means that when the user clicks
// on an item and changes the selection, only the newly selected
// and the newly unselected items are re-rendered.
//
// If Session.get had been used instead of Session.equals, then
// when the selection changed, all the items would be re-rendered.
</code></pre>

<p>For object and array session values, you cannot use <code>Session.equals</code>; instead,
you need to use the <code>underscore</code> package and write
<code>_.isEqual(Session.get(key), value)</code>.</p>

<h2 id="accounts_api"><span>Accounts</span></h2>

<p>The Meteor Accounts system builds on top of the <code>userId</code> support in
<a href="http://localhost:3000/#publish_userId"><code>publish</code></a> and <a href="http://localhost:3000/#method_userId"><code>methods</code></a>. The core
packages add the concept of user documents stored in the database, and
additional packages add <a href="http://localhost:3000/#accounts_passwords">secure password
authentication</a>, <a href="http://localhost:3000/#meteor_loginwithexternalservice">integration with third party
login services</a>, and a <a href="http://localhost:3000/#accountsui">pre-built user
interface</a>.</p>

<p>The basic Accounts system is in the <code>accounts-base</code> package, but
applications typically include this automatically by adding one of the
login provider packages: <code>accounts-password</code>, <code>accounts-facebook</code>,
<code>accounts-github</code>, <code>accounts-google</code>, <code>accounts-meetup</code>,
<code>accounts-twitter</code>, or <code>accounts-weibo</code>.</p>



















<div class="api ">
<h3 id="meteor_user">
  <a class="name selflink" href="http://localhost:3000/#meteor_user">Meteor.user()</a>

  <span class="locus">Anywhere but publish functions</span>

</h3>

<div class="desc">










<p>Get the current user record, or <code>null</code> if no user is logged in. A reactive data source.</p>










</div>







</div>



















<p>Retrieves the user record for the current user from
the <a href="http://localhost:3000/#meteor_users"><code>Meteor.users</code></a> collection.</p>

<p>On the client, this will be the subset of the fields in the document that
are published from the server (other fields won't be available on the
client). By default the server publishes <code>username</code>, <code>emails</code>, and
<code>profile</code>. See <a href="http://localhost:3000/#meteor_users"><code>Meteor.users</code></a> for more on
the fields used in user documents.</p>



















<div class="api ">
<h3 id="meteor_userid">
  <a class="name selflink" href="http://localhost:3000/#meteor_userid">Meteor.userId()</a>

  <span class="locus">Anywhere but publish functions</span>

</h3>

<div class="desc">










<p>Get the current user id, or <code>null</code> if no user is logged in. A reactive data source.</p>










</div>







</div>





































<div class="api ">
<h3 id="meteor_users">
  <a class="name selflink" href="http://localhost:3000/#meteor_users">Meteor.users</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>A <a href="http://localhost:3000/#collections">Meteor.Collection</a> containing user documents.</p>










</div>







</div>



















<p>This collection contains one document per registered user. Here's an example
user document:</p>

<pre><code>{
  _id: "bbca5d6a-2156-41c4-89da-0329e8c99a4f",  // Meteor.userId()
  username: "cool_kid_13", // unique name
  emails: [
    // each email address can only belong to one user.
    { address: "cool@example.com", verified: true },
    { address: "another@different.com", verified: false }
  ],
  createdAt: 1349761684042,
  profile: {
    // The profile is writable by the user by default.
    name: "Joe Schmoe"
  },
  services: {
    facebook: {
      id: "709050", // facebook id
      accessToken: "AAACCgdX7G2...AbV9AZDZD"
    },
    resume: {
      loginTokens: [
        { token: "97e8c205-c7e4-47c9-9bea-8e2ccc0694cd",
          when: 1349761684048 }
      ]
    }
  }
}
</code></pre>

<p>A user document can contain any data you want to store about a user. Meteor
treats the following fields specially:</p>

<ul>
<li><code>username</code>: a unique String identifying the user.</li>
<li><code>emails</code>: an Array of Objects with keys <code>address</code> and <code>verified</code>;
an email address may belong to at most one user. <code>verified</code> is
a Boolean which is true if the user has <a href="http://localhost:3000/#accounts_verifyemail">verified the
address</a> with a token sent over email.</li>
<li><code>createdAt</code>: a numeric timestamp (milliseconds since January 1 1970)
of the time the user document was created.</li>
<li><code>profile</code>: an Object which (by default) the user can create
and update with any data.</li>
<li><code>services</code>: an Object containing data used by particular
login services. For example, its <code>reset</code> field contains
tokens used by <a href="http://localhost:3000/#accounts_forgotpassword">forgot password</a> links,
and its <code>resume</code> field contains tokens used to keep you
logged in between sessions.</li>
</ul>

<p>Like all <a href="http://localhost:3000/#collections">Meteor.Collection</a>s, you can access all
documents on the server, but only those specifically published by the server are
available on the client.</p>

<p>By default, the current user's <code>username</code>, <code>emails</code> and <code>profile</code> are
published to the client. You can publish additional fields for the
current user with:</p>

<pre><code>Meteor.publish("userData", function () {
  return Meteor.users.find({_id: this.userId},
                           {fields: {'other': 1, 'things': 1}});
});
</code></pre>

<p>If the autopublish package is installed, information about all users
on the system is published to all clients. This includes <code>username</code>,
<code>profile</code>, and any fields in <code>services</code> that are meant to be public
(eg <code>services.facebook.id</code>,
<code>services.twitter.screenName</code>). Additionally, when using autopublish
more information is published for the currently logged in user,
including access tokens. This allows making API calls directly from
the client for services that allow this.</p>

<p>Users are by default allowed to specify their own <code>profile</code> field with
<a href="http://localhost:3000/#accounts_createuser"><code>Accounts.createUser</code></a> and modify it with
<code>Meteor.users.update</code>. To allow users to edit additional fields, use
<a href="http://localhost:3000/#allow"><code>Meteor.users.allow</code></a>. To forbid users from making any modifications to
their user document:</p>

<pre><code>Meteor.users.deny({update: function () { return true; }});
</code></pre>



















<div class="api ">
<h3 id="meteor_loggingin">
  <a class="name selflink" href="http://localhost:3000/#meteor_loggingin">Meteor.loggingIn()</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>True if a login method (such as <code>Meteor.loginWithPassword</code>, <code>Meteor.loginWithFacebook</code>, or <code>Accounts.createUser</code>) is currently in progress. A reactive data source.</p>










</div>







</div>



















<p>For example, <a href="http://localhost:3000/#accountsui">the <code>accounts-ui</code> package</a> uses this to display an
animation while the login request is being processed.</p>



















<div class="api ">
<h3 id="meteor_logout">
  <a class="name selflink" href="http://localhost:3000/#meteor_logout">Meteor.logout([callback])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Log the user out.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="meteor_loginwithpassword">
  <a class="name selflink" href="http://localhost:3000/#meteor_loginwithpassword">Meteor.loginWithPassword(user, password, [callback])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Log the user in with a password.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">user</span>
  <span class="type">
    
      Object or String
    
  </span></dt>
<dd><p>Either a string interpreted as a username or an email; or an object with a single key: <code>email</code>, <code>username</code> or <code>id</code>.</p></dd>









<dt><span class="name">password</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The user's password. This is <strong>not</strong> sent in plain text over the wire — it is secured with <a href="http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol" target="_blank">SRP</a>.</p></dd>









<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p></dd>





</dl>














































</div>



















<p>This function is provided by the <code>accounts-password</code> package. See the
<a href="http://localhost:3000/#accounts_passwords">Passwords</a> section below.</p>



















<div class="api ">
<h3 id="meteor_loginwithexternalservice">
  <a class="name selflink" href="http://localhost:3000/#meteor_loginwithexternalservice">Meteor.loginWith<i>ExternalService</i>([options], [callback])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Log the user in using an external service.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p></dd>





</dl>















































<h4>Options</h4>




































<dl class="args">





<dt><span class="name">requestPermissions</span>
  <span class="type">
    
      Array of Strings
    
  </span></dt>
<dd><p>A list of permissions to request from the user.</p></dd>









<dt><span class="name">requestOfflineToken</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>If true, asks the user for permission to act on their behalf when offline. This stores an additional offline token in the <code>services</code> field of the user document. Currently only supported with Google.</p></dd>









<dt><span class="name">forceApprovalPrompt</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>If true, forces the user to approve the app's permissions, even if previously approved. Currently only supported with Google.</p></dd>





</dl>












































</div>



















<p>These functions initiate the login process with an external
service (eg: Facebook, Google, etc), using OAuth. When called they open a new pop-up
window that loads the provider's login page. Once the user has logged in
with the provider, the pop-up window is closed and the Meteor client
logs in to the Meteor server with the information provided by the external
service.</p>

<p><a id="requestpermissions" name="requestpermissions" target="_blank"></a></p>

<p>In addition to identifying the user to your application, some services
have APIs that allow you to take action on behalf of the user. To
request specific permissions from the user, pass the
<code>requestPermissions</code> option the login function. This will cause the user
to be presented with an additional page in the pop-up dialog to permit
access to their data. The user's <code>accessToken</code> — with permissions
to access the service's API — is stored in the <code>services</code> field of
the user document. The supported values for <code>requestPermissions</code> differ
for each login service and are documented on their respective developer
sites:</p>

<ul>
<li>Facebook: <a href="http://developers.facebook.com/docs/authentication/permissions/" target="_blank">http://developers.facebook.com/docs/authentication/permissions/</a></li>
<li>GitHub: <a href="http://developer.github.com/v3/oauth/#scopes" target="_blank">http://developer.github.com/v3/oauth/#scopes</a></li>
<li>Google: <a href="https://developers.google.com/accounts/docs/OAuth2Login#scopeparameter" target="_blank">https://developers.google.com/accounts/docs/OAuth2Login#scopeparameter</a></li>
<li>Meetup: <a href="http://www.meetup.com/meetup_api/auth/#oauth2-scopes" target="_blank">http://www.meetup.com/meetup_api/auth/#oauth2-scopes</a></li>
<li>Twitter, Weibo: <code>requestPermissions</code> currently not supported</li>
</ul>

<p>External login services typically require registering and configuring
your application before use. The easiest way to do this is with the
<a href="http://localhost:3000/#accountsui"><code>accounts-ui</code> package</a> which presents a step-by-step guide
to configuring each service. However, the data can be also be entered
manually in the <code>Accounts.loginServiceConfiguration</code> collection. For
example:</p>

<pre><code>// first, remove configuration entry in case service is already configured
Accounts.loginServiceConfiguration.remove({
  service: "weibo"
});
Accounts.loginServiceConfiguration.insert({
  service: "weibo",
  clientId: "1292962797",
  secret: "75a730b58f5691de5522789070c319bc"
});
</code></pre>

<p>Each external service has its own login provider package and login function. For
example, to support GitHub login, run <code>$ meteor add accounts-github</code> and use the
<code>Meteor.loginWithGithub</code> function:</p>

<pre><code>Meteor.loginWithGithub({
  requestPermissions: ['user', 'public_repo']
}, function (err) {
  if (err)
    Session.set('errorMessage', err.reason || 'Unknown error');
});
</code></pre>



















<div class="api ">
<h3 id="template_currentuser">
  <a class="name selflink" href="http://localhost:3000/#template_currentuser">{{currentUser}}</a>

  <span class="locus">Handlebars templates</span>

</h3>

<div class="desc">










<p>Calls <a href="http://localhost:3000/#meteor_user">Meteor.user()</a>. Use <code>{{#if currentUser}}</code> to check whether the user is logged in.</p>










</div>







</div>





































<div class="api ">
<h3 id="template_loggingin">
  <a class="name selflink" href="http://localhost:3000/#template_loggingin">{{loggingIn}}</a>

  <span class="locus">Handlebars templates</span>

</h3>

<div class="desc">










<p>Calls <a href="http://localhost:3000/#meteor_loggingin">Meteor.loggingIn()</a>.</p>










</div>







</div>





































<div class="api ">
<h3 id="accounts_config">
  <a class="name selflink" href="http://localhost:3000/#accounts_config">Accounts.config(options)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Set global accounts options.</p>










</div>








<h4>Options</h4>




































<dl class="args">





<dt><span class="name">sendVerificationEmail</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>New users with an email address will receive an address verification email.</p></dd>









<dt><span class="name">forbidClientAccountCreation</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>Calls to <a href="http://localhost:3000/#accounts_createuser"><code>createUser</code></a> from the client will be rejected. In addition, if you are using <a href="http://localhost:3000/#accountsui">accounts-ui</a>, the "Create account" link will not be available.</p></dd>





</dl>












































</div>





































<div class="api ">
<h3 id="accounts_ui_config">
  <a class="name selflink" href="http://localhost:3000/#accounts_ui_config">Accounts.ui.config(options)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Configure the behavior of <a href="http://localhost:3000/#accountsui"><code>{{loginButtons}}</code></a>.</p>










</div>








<h4>Options</h4>




































<dl class="args">





<dt><span class="name">requestPermissions</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>Which <a href="http://localhost:3000/#requestpermissions">permissions</a> to request from the user for each external service.</p></dd>









<dt><span class="name">requestOfflineToken</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>To ask the user for permission to act on their behalf when offline, map the relevant external service to <code>true</code>. Currently only supported with Google. See <a href="http://localhost:3000/#meteor_loginwithexternalservice">Meteor.loginWithExternalService</a> for more details.</p></dd>









<dt><span class="name">passwordSignupFields</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Which fields to display in the user creation form. One of '<code>USERNAME_AND_EMAIL</code>', '<code>USERNAME_AND_OPTIONAL_EMAIL</code>', '<code>USERNAME_ONLY</code>', or '<code>EMAIL_ONLY</code>' (default).</p></dd>





</dl>












































</div>



















<p>Example:</p>

<pre><code>Accounts.ui.config({
  requestPermissions: {
    facebook: ['user_likes'],
    github: ['user', 'repo']
  },
  requestOfflineToken: {
    google: true
  },
  passwordSignupFields: 'USERNAME_AND_OPTIONAL_EMAIL'
});
</code></pre>



















<div class="api ">
<h3 id="accounts_validatenewuser">
  <a class="name selflink" href="http://localhost:3000/#accounts_validatenewuser">Accounts.validateNewUser(func)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Set restrictions on new user creation.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">func</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.</p></dd>





</dl>














































</div>



















<p>This can be called multiple times. If any of the functions return <code>false</code> or
throw an error, the new user creation is aborted. To set a specific error
message (which will be displayed by <a href="http://localhost:3000/#accountsui"><code>accounts-ui</code></a>), throw a new
<a href="http://localhost:3000/#meteor_error"><code>Meteor.Error</code></a>.</p>

<p>Example:</p>

<pre><code>// Validate username, sending a specific error message on failure.
Accounts.validateNewUser(function (user) {
  if (user.username &amp;&amp; user.username.length &gt;= 3)
    return true;
  throw new Meteor.Error(403, "Username must have at least 3 characters");
});
// Validate username, without a specific error message.
Accounts.validateNewUser(function (user) {
  return user.username !== "root";
});
</code></pre>



















<div class="api ">
<h3 id="accounts_oncreateuser">
  <a class="name selflink" href="http://localhost:3000/#accounts_oncreateuser">Accounts.onCreateUser(func)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Customize new user creation.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">func</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Called whenever a new user is created. Return the new user object, or throw an <code>Error</code> to abort the creation.</p></dd>





</dl>














































</div>



















<p>Use this when you need to do more than simply accept or reject new user
creation. With this function you can programatically control the
contents of new user documents.</p>

<p>The function you pass will be called with two arguments: <code>options</code> and
<code>user</code>. The <code>options</code> argument comes
from <a href="http://localhost:3000/#accounts_createuser"><code>Accounts.createUser</code></a> for
password-based users or from an external service login flow. <code>options</code> may come
from an untrusted client so make sure to validate any values you read from
it. The <code>user</code> argument is created on the server and contains a
proposed user object with all the automatically generated fields
required for the user to log in.</p>

<p>The function should return the user document (either the one passed in or a
newly-created object) with whatever modifications are desired. The returned
document is inserted directly into the <a href="http://localhost:3000/#meteor_users"><code>Meteor.users</code></a> collection.</p>

<p>The default create user function simply copies <code>options.profile</code> into
the new user document. Calling <code>onCreateUser</code> overrides the default
hook. This can only be called once.</p>

<p>Example:</p>

<!-- XXX replace d6 with _.random once we have underscore 1.4.2 -->

<pre><code>// Support for playing D&amp;D: Roll 3d6 for dexterity
Accounts.onCreateUser(function(options, user) {
  var d6 = function () { return Math.floor(Random.fraction() * 6) + 1; };
  user.dexterity = d6() + d6() + d6();
  // We still want the default hook's 'profile' behavior.
  if (options.profile)
    user.profile = options.profile;
  return user;
});
</code></pre>

<h2 id="accounts_passwords"><span>Passwords</span></h2>

<p>The <code>accounts-password</code> package contains a full system for password-based
authentication. In addition to the basic username and password-based
sign-in process, it also supports email-based sign-in including
address verification and password recovery emails.</p>

<p>Unlike most web applications, the Meteor client does not send the user's
password directly to the server. It uses the <a href="http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol" target="_blank">Secure Remote Password
protocol</a>
to ensure the server never sees the user's plain-text password. This
helps protect against embarrassing password leaks if the server's
database is compromised.</p>

<p>To add password support to your application, run <code>$ meteor add
accounts-password</code>. You can construct your own user interface using the
functions below, or use the <a href="http://localhost:3000/#accountsui"><code>accounts-ui</code> package</a> to
include a turn-key user interface for password-based sign-in.</p>



















<div class="api ">
<h3 id="accounts_createuser">
  <a class="name selflink" href="http://localhost:3000/#accounts_createuser">Accounts.createUser(options, [callback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Create a new user.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Client only, optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p></dd>





</dl>















































<h4>Options</h4>




































<dl class="args">





<dt><span class="name">username</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>A unique name for this user.</p></dd>









<dt><span class="name">email</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The user's email address.</p></dd>









<dt><span class="name">password</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The user's password. This is <strong>not</strong> sent in plain text over the wire.</p></dd>









<dt><span class="name">profile</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>The user's profile, typically including the <code>name</code> field.</p></dd>





</dl>












































</div>



















<p>On the client, this function logs in as the newly created user on
successful completion. On the server, it returns the newly created user
id.</p>

<p>On the client, you must pass <code>password</code> and one of <code>username</code> or <code>email</code>
— enough information for the user to be able to log in again
later. On the server, you can pass any subset of these options, but the
user will not be able to log in until it has an identifier and a
password.</p>

<p>To create an account without a password on the server and still let the
user pick their own password, call <code>createUser</code> with the <code>email</code> option
and then
call <a href="http://localhost:3000/#accounts_sendenrollmentemail"><code>Accounts.sendEnrollmentEmail</code></a>. This
will send the user an email with a link to set their initial password.</p>

<p>By default the <code>profile</code> option is added directly to the new user document. To
override this behavior, use <a href="http://localhost:3000/#accounts_oncreateuser"><code>Accounts.onCreateUser</code></a>.</p>

<p>This function is only used for creating users with passwords. The external
service login flows do not use this function.</p>



















<div class="api ">
<h3 id="accounts_changepassword">
  <a class="name selflink" href="http://localhost:3000/#accounts_changepassword">Accounts.changePassword(oldPassword, newPassword, [callback])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Change the current user's password. Must be logged in.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">oldPassword</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The user's current password. This is <strong>not</strong> sent in plain text over the wire.</p></dd>









<dt><span class="name">newPassword</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>A new password for the user. This is <strong>not</strong> sent in plain text over the wire.</p></dd>









<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="accounts_forgotpassword">
  <a class="name selflink" href="http://localhost:3000/#accounts_forgotpassword">Accounts.forgotPassword(options, [callback])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Request a forgot password email.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p></dd>





</dl>















































<h4>Options</h4>




































<dl class="args">





<dt><span class="name">email</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The email address to send a password reset link.</p></dd>





</dl>












































</div>



















<p>This triggers a call
to <a href="http://localhost:3000/#accounts_sendresetpasswordemail"><code>Accounts.sendResetPasswordEmail</code></a>
on the server. Pass the token the user receives in this email
to <a href="http://localhost:3000/#accounts_resetpassword"><code>Accounts.resetPassword</code></a> to
complete the password reset process.</p>

<p>If you are using the <a href="http://localhost:3000/#accountsui"><code>accounts-ui</code> package</a>, this is handled
automatically. Otherwise, it is your responsiblity to prompt the user for the
new password and call <code>resetPassword</code>.</p>



















<div class="api ">
<h3 id="accounts_resetpassword">
  <a class="name selflink" href="http://localhost:3000/#accounts_resetpassword">Accounts.resetPassword(token, newPassword, [callback])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Reset the password for a user using a token received in email. Logs the user in afterwards.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">token</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The token retrieved from the reset password URL.</p></dd>









<dt><span class="name">newPassword</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>A new password for the user. This is <strong>not</strong> sent in plain text over the wire.</p></dd>









<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p></dd>





</dl>














































</div>



















<p>This function accepts tokens generated
by <a href="http://localhost:3000/#accounts_sendresetpasswordemail"><code>Accounts.sendResetPasswordEmail</code></a>
and
<a href="http://localhost:3000/#accounts_sendenrollmentemail"><code>Accounts.sendEnrollmentEmail</code></a>.</p>



















<div class="api ">
<h3 id="accounts_setpassword">
  <a class="name selflink" href="http://localhost:3000/#accounts_setpassword">Accounts.setPassword(userId, newPassword)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Forcibly change the password for a user.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">userId</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The id of the user to update.</p></dd>









<dt><span class="name">newPassword</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>A new password for the user.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="accounts_verifyemail">
  <a class="name selflink" href="http://localhost:3000/#accounts_verifyemail">Accounts.verifyEmail(token, [callback])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Marks the user's email address as verified. Logs the user in afterwards.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">token</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The token retrieved from the verification URL.</p></dd>









<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p></dd>





</dl>














































</div>



















<p>This function accepts tokens generated
by <a href="http://localhost:3000/#accounts_sendverificationemail"><code>Accounts.sendVerificationEmail</code></a>. It
sets the <code>emails.verified</code> field in the user record.</p>



















<div class="api ">
<h3 id="accounts_sendresetpasswordemail">
  <a class="name selflink" href="http://localhost:3000/#accounts_sendresetpasswordemail">Accounts.sendResetPasswordEmail(userId, [email])</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Send an email with a link the user can use to reset their password.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">userId</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The id of the user to send email to.</p></dd>









<dt><span class="name">email</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Optional. Which address of the user's to send the email to. This address must be in the user's <code>emails</code> list. Defaults to the first email in the list.</p></dd>





</dl>














































</div>



















<p>The token in this email should be passed
to <a href="http://localhost:3000/#accounts_resetpassword"><code>Accounts.resetPassword</code></a>.</p>

<p>To customize the contents of the email, see
<a href="http://localhost:3000/#accounts_emailtemplates"><code>Accounts.emailTemplates</code></a>.</p>



















<div class="api ">
<h3 id="accounts_sendenrollmentemail">
  <a class="name selflink" href="http://localhost:3000/#accounts_sendenrollmentemail">Accounts.sendEnrollmentEmail(userId, [email])</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Send an email with a link the user can use to set their initial password.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">userId</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The id of the user to send email to.</p></dd>









<dt><span class="name">email</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Optional. Which address of the user's to send the email to. This address must be in the user's <code>emails</code> list. Defaults to the first email in the list.</p></dd>





</dl>














































</div>



















<p>The token in this email should be passed
to <a href="http://localhost:3000/#accounts_resetpassword"><code>Accounts.resetPassword</code></a>.</p>

<p>To customize the contents of the email, see
<a href="http://localhost:3000/#accounts_emailtemplates"><code>Accounts.emailTemplates</code></a>.</p>



















<div class="api ">
<h3 id="accounts_sendverificationemail">
  <a class="name selflink" href="http://localhost:3000/#accounts_sendverificationemail">Accounts.sendVerificationEmail(userId, [email])</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Send an email with a link the user can use verify their email address.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">userId</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The id of the user to send email to.</p></dd>









<dt><span class="name">email</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Optional. Which address of the user's to send the email to. This address must be in the user's <code>emails</code> list. Defaults to the first unverified email in the list.</p></dd>





</dl>














































</div>



















<p>The token in this email should be passed
to <a href="http://localhost:3000/#accounts_verifyemail"><code>Accounts.verifyEmail</code></a>.</p>

<p>To customize the contents of the email, see
<a href="http://localhost:3000/#accounts_emailtemplates"><code>Accounts.emailTemplates</code></a>.</p>



















<div class="api ">
<h3 id="accounts_emailtemplates">
  <a class="name selflink" href="http://localhost:3000/#accounts_emailtemplates">Accounts.emailTemplates</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Options to customize emails sent from the Accounts system.</p>










</div>







</div>



















<p>This is an <code>Object</code> with several fields that are used to generate text
for the emails sent by <code>sendResetPasswordEmail</code>, <code>sendEnrollmentEmail</code>,
and <code>sendVerificationEmail</code>.</p>

<p>Override fields of the object by assigning to them:</p>

<ul>
<li><code>from</code>: A <code>String</code> with an <a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC5322</a> From
address. By default, the email is sent from <code>no-reply@meteor.com</code>. If you
wish to receive email from users asking for help with their account, be sure
to set this to an email address that you can receive email at.</li>
<li><code>siteName</code>: The public name of your application. Defaults to the DNS name of
the application (eg: <code>awesome.meteor.com</code>).</li>
<li><code>resetPassword</code>: An <code>Object</code> with two fields:
<ul><li><code>resetPassword.subject</code>: A <code>Function</code> that takes a user object and returns
a <code>String</code> for the subject line of a reset password email.</li>
<li><code>resetPassword.text</code>: A <code>Function</code> that takes a user object and a url, and
returns the body text for a reset password email.</li></ul></li>
<li><code>enrollAccount</code>: Same as <code>resetPassword</code>, but for initial password setup for
new accounts.</li>
<li><code>verifyEmail</code>: Same as <code>resetPassword</code>, but for verifying the users email
address.</li>
</ul>

<p>Example:</p>

<pre><code>Accounts.emailTemplates.siteName = "AwesomeSite";
Accounts.emailTemplates.from = "AwesomeSite Admin &lt;accounts@example.com&gt;";
Accounts.emailTemplates.enrollAccount.subject = function (user) {
    return "Welcome to Awesome Town, " + user.profile.name;
};
Accounts.emailTemplates.enrollAccount.text = function (user, url) {
   return "You have been selected to participate in building a better future!"
     + " To activate your account, simply click the link below:\n\n"
     + url;
};
</code></pre>

<h2 id="templates_api"><span>Templates</span></h2>

<p>A template that you declare as <code>&lt;template name="foo"&gt; ... &lt;/template&gt;</code> can be accessed as the function <code>Template.foo</code>, which
returns a string of HTML when called.</p>

<p>The same template may occur many times on the page, and these
occurrences are called template instances.  Template instances have a
life cycle of being created, put into the document, and later taken
out of the document and destroyed.  Meteor manages these stages for
you, including determining when a template instance has been removed
or replaced and should be cleaned up.  You can associate data with a
template instance, and you can access its DOM nodes when it is in the
document.</p>

<p>Additionally, Meteor will maintain a template instance and its state
even if its surrounding HTML is re-rendered into new DOM nodes.  As
long as the structure of template invocations is the same, Meteor will
not consider any instances to have been created or destroyed.  You can
request that the same DOM nodes be retained as well using <code>preserve</code>
and <code>constant</code>.</p>

<p>There are a number of callbacks and directives that you can specify on
a named template and that apply to all instances of the template.
They are described below.</p>



















<div class="api ">
<h3 id="template_call">
  <a class="name selflink" href="http://localhost:3000/#template_call">Template.<em>myTemplate</em>([data])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Call a template function by name to produce HTML.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">data</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>Optional. The data context object with which to call the template.</p></dd>





</dl>














































</div>



















<p>When called inside a template helper, the body of <code>Meteor.render</code>, or
other settings where reactive HTML is being generated, the resulting
HTML is annotated so that it renders as reactive DOM elements.
Otherwise, the HTML is unadorned and static.</p>



















<div class="api ">
<h3 id="template_rendered">
  <a class="name selflink" href="http://localhost:3000/#template_rendered">Template.<em>myTemplate</em>.rendered = function ( ) { ... }</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Provide a callback when an instance of a template is rendered.</p>










</div>







</div>



















<p>This callback is called once when an instance of Template.<em>myTemplate</em> is
rendered into DOM nodes and put into the document for the first time, and again
each time any part of the template is re-rendered.</p>

<p>In the body of the callback, <code>this</code> is a <a href="http://localhost:3000/#template_inst">template
instance</a> object that is unique to this occurrence of
the template and persists across re-renderings.  Use the <code>created</code> and
<code>destroyed</code> callbacks to perform initialization or clean-up on the
object.</p>



















<div class="api ">
<h3 id="template_created">
  <a class="name selflink" href="http://localhost:3000/#template_created">Template.<em>myTemplate</em>.created = function ( ) { ... }</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Provide a callback when an instance of a template is created.</p>










</div>







</div>



















<p>This callback is called when an invocation of <em>myTemplate</em> represents
a new occurrence of the template and not a re-rendering of an existing
template instance.  Inside the callback, <code>this</code> is the new <a href="http://localhost:3000/#template_inst">template
instance</a> object.  Properties you set on this object
will be visible from the <code>rendered</code> and <code>destroyed</code> callbacks and from
event handlers.</p>

<p>This callback fires once and is the first callback to fire.  Every
<code>created</code> has a corresponding <code>destroyed</code>; that is, if you get a
<code>created</code> callback with a certain template instance object in <code>this</code>,
you will eventually get a <code>destroyed</code> callback for the same object.</p>



















<div class="api ">
<h3 id="template_destroyed">
  <a class="name selflink" href="http://localhost:3000/#template_destroyed">Template.<em>myTemplate</em>.destroyed = function ( ) { ... }</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Provide a callback when an instance of a template is destroyed.</p>










</div>







</div>



















<p>This callback is called when an occurrence of a template is taken off
the page for any reason and not replaced with a re-rendering.  Inside
the callback, <code>this</code> is the <a href="http://localhost:3000/#template_inst">template instance</a> object
being destroyed.</p>

<p>This callback is most useful for cleaning up or undoing any external
effects of <code>created</code>.  It fires once and is the last callback to fire.</p>



















<div class="api ">
<h3 id="template_events">
  <a class="name selflink" href="http://localhost:3000/#template_events">Template.<em>myTemplate</em>.events(eventMap)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Specify event handlers for this template.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">eventMap</span>
  <span class="type">
    
      <a href="http://localhost:3000/#eventmaps">Event map</a>
    
  </span></dt>
<dd><p>Event handlers to associate with this template.</p></dd>





</dl>














































</div>



















<p>Declare event handers for instances of this template. Multiple calls add
new event handlers in addition to the existing ones.</p>

<p>See <a href="http://localhost:3000/#eventmaps">Event Maps</a> for a detailed description of the event
map format and how event handling works in Meteor.</p>



















<div class="api ">
<h3 id="template_helpers">
  <a class="name selflink" href="http://localhost:3000/#template_helpers">Template.<em>myTemplate</em>.helpers(helpers)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Specify template helpers available to this template.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">helpers</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>Dictionary of helper functions by name.</p></dd>





</dl>














































</div>



















<p>Each template has a local dictionary of helpers that are made available to it,
and this call specifies helpers to add to the template's dictionary.</p>

<p>Example:</p>

<pre><code>Template.myTemplate.helpers({
  foo: function () {
    return Session.get("foo");
  }
});
</code></pre>

<p>In Handlebars, this helper would then be invoked as <code>{{foo}}</code>.</p>

<p>The following syntax is equivalent, but won't work for reserved property
names:</p>

<pre><code>Template.myTemplate.foo = function () {
  return Session.get("foo");
};
</code></pre>



















<div class="api ">
<h3 id="template_preserve">
  <a class="name selflink" href="http://localhost:3000/#template_preserve">Template.<em>myTemplate</em>.preserve(selectors)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Specify rules for preserving individual DOM elements on re-render.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">selectors</span>
  <span class="type">
    
      Array or Object
    
  </span></dt>
<dd><p>Array of CSS selectors that each match at most one element, such as <code>['.thing1', '.thing2']</code>, or, alternatively, a dictionary of selectors and node-labeling functions (see below).</p></dd>





</dl>














































</div>



















<p>You can "preserve" a DOM element during re-rendering, leaving the
existing element in place in the document while replacing the
surrounding HTML.  This means that re-rendering a template need not
disturb text fields, iframes, and other sensitive elements it
contains.  The elements to preserve must be present both as nodes in
the old DOM and as tags in the new HTML.  Meteor will patch the DOM
around the preserved elements.</p>















<div class="note">
    





<p>By default, new Meteor apps automatically include the
<code>preserve-inputs</code> package.  This preserves all elements of type
<code>input</code>, <code>textarea</code>, <code>button</code>, <code>select</code>, and <code>option</code> that have unique
<code>id</code> attributes or that have <code>name</code> attributes that are unique within
an enclosing element with an <code>id</code> attribute.  To turn off this default
behavior, simply remove the <code>preserve-inputs</code> package.</p>






  </div>















<p>Preservation is useful in a variety of cases where replacing a DOM
element with an identical or modified element would not have the same
effect as retaining the original element.  These include:</p>

<ul>
<li>Input text fields and other form controls</li>
<li>Elements with CSS animations</li>
<li>Iframes</li>
<li>Nodes with references kept in JavaScript code</li>
</ul>

<p>If you want to preserve a whole region of the DOM, an element and its
children, or nodes not rendered by Meteor, use a <a href="http://localhost:3000/#constant">constant
region</a> instead.</p>

<p>To preserve nodes, pass a list of selectors, each of which should match
at most one element in the template.  When the template is re-rendered,
the selector is run on the old DOM and the new DOM, and Meteor will
reuse the old element in place while working in any HTML changes around
it.</p>

<p>A second form of <code>preserve</code> takes a labeling function for each selector
and allows the selectors to match multiple nodes. The node-labeling
function takes a node and returns a label string that is unique for each
node, or <code>false</code> to exclude the node from preservation.</p>

<p>For example, to preserve all <code>&lt;input&gt;</code> elements with ids in template 'foo', use:</p>

<pre><code>Template.foo.preserve({
  'input[id]': function (node) { return node.id; }
});
</code></pre>

<p>Selectors are interpreted as rooted at the top level of the template.
Each occurrence of the template operates independently, so the selectors
do not have to be unique on the entire page, only within one occurrence
of the template.  Selectors will match nodes even if they are in
sub-templates.</p>

<p>Preserving a node does <em>not</em> preserve its attributes or contents. They
will be updated to reflect the new HTML. Text in input fields is not
preserved unless the input field has focus, in which case the cursor and
selection are left intact. Iframes retain their navigation state and
animations continue to run as long as their parameters haven't changed.</p>

<p>There are some cases where nodes can not be preserved because of
constraints inherent in the DOM API. For example, an element's tag name
can't be changed, and it can't be moved relative to its parent or other
preserved nodes.  For this reason, nodes that are re-ordered or
re-parented by an update will not be preserved.</p>















<div class="note">
    





<p>Previous versions of Meteor had an implicit page-wide <code>preserve</code>
directive that labeled nodes by their "id" and "name" attributes.
This has been removed in favor of the explicit, opt-in mechanism.</p>






  </div>















<h2 id="template_inst"><span>Template instances</span></h2>

<p>A template instance object represents an occurrence of a template in
the document.  It can be used to access the DOM and it can be
assigned properties that persist across page re-renderings.</p>

<p>Template instance objects are found as the value of <code>this</code> in the
<code>created</code>, <code>rendered</code>, and <code>destroyed</code> template callbacks and as an
argument to event handlers.</p>

<p>In addition to the properties and functions described below, you can
assign additional properties of your choice to the object.  Property names
starting with <code>_</code> are guaranteed to be available for your use.  Use
the <code>created</code> and <code>destroyed</code> callbacks to perform initialization or
clean-up on the object.</p>

<p>You can only access <code>findAll</code>, <code>find</code>, <code>firstNode</code>, and <code>lastNode</code>
from the <code>rendered</code> callback and event handlers, not from <code>created</code>
and <code>destroyed</code>, because they require the template instance to be
in the DOM.</p>



















<div class="api ">
<h3 id="template_findAll">
  <a class="name selflink" href="http://localhost:3000/#template_findAll"><em>this</em>.findAll(selector)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Find all elements matching <code>selector</code> in this template instance.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">selector</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The CSS selector to match, scoped to the template contents.</p></dd>





</dl>














































</div>



















<p>Returns an array of DOM elements matching <code>selector</code>.</p>

<p>The template instance serves as the document root for the selector. Only
elements inside the template and its sub-templates can match parts of
the selector.</p>



















<div class="api ">
<h3 id="template_find">
  <a class="name selflink" href="http://localhost:3000/#template_find"><em>this</em>.find(selector)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Find one element matching <code>selector</code> in this template instance.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">selector</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The CSS selector to match, scoped to the template contents.</p></dd>





</dl>














































</div>



















<p>Returns one DOM element matching <code>selector</code>, or <code>null</code> if there are no
such elements.</p>

<p>The template instance serves as the document root for the selector. Only
elements inside the template and its sub-templates can match parts of
the selector.</p>



















<div class="api ">
<h3 id="template_firstNode">
  <a class="name selflink" href="http://localhost:3000/#template_firstNode"><em>this</em>.firstNode</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>The first top-level DOM node in this template instance.</p>










</div>







</div>



















<p>The two nodes <code>firstNode</code> and <code>lastNode</code> indicate the extent of the
rendered template in the DOM.  The rendered template includes these
nodes, their intervening siblings, and their descendents.  These two
nodes are siblings (they have the same parent), and <code>lastNode</code> comes
after <code>firstNode</code>, or else they are the same node.</p>



















<div class="api ">
<h3 id="template_lastNode">
  <a class="name selflink" href="http://localhost:3000/#template_lastNode"><em>this</em>.lastNode</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>The last top-level DOM node in this template instance.</p>










</div>







</div>





































<div class="api ">
<h3 id="template_data">
  <a class="name selflink" href="http://localhost:3000/#template_data"><em>this</em>.data</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>The data context of this instance's latest invocation.</p>










</div>







</div>



















<p>This property provides access to the data context at the top level of
the template.  It is updated each time the template is re-rendered.
Access is read-only and non-reactive.</p>



















<div class="api ">
<h3 id="meteor_render">
  <a class="name selflink" href="http://localhost:3000/#meteor_render">Meteor.render(htmlFunc)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Create DOM nodes that automatically update themselves as data changes.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">htmlFunc</span>
  <span class="type">
    
      Function returning a string of HTML
    
  </span></dt>
<dd><p>Function that generates HTML to be rendered.  Called immediately and re-run whenever data changes.  May also be a string of HTML instead of a function.</p></dd>





</dl>














































</div>



















<p><code>Meteor.render</code> creates a <code>DocumentFragment</code> (a sequence of DOM nodes)
that automatically updates in realtime. Most Meteor apps don't need to
call this directly; they use templates and Meteor handles the rendering.</p>

<p>Pass in <code>htmlFunc</code>, a function that returns an HTML
string. <code>Meteor.render</code> calls the function and turns the output into
DOM nodes. Meanwhile, it tracks the data that was used when <code>htmlFunc</code>
ran, and automatically wires up callbacks so that whenever any of the
data changes, <code>htmlFunc</code> is re-run and the DOM nodes are updated in
place.</p>

<p>You may insert the returned <code>DocumentFragment</code> directly into the DOM
wherever you would like it to appear. The inserted nodes will continue
to update until they are taken off the screen. Then they will be
automatically cleaned up. For more details about clean-up, see
<a href="http://localhost:3000/#deps_flush"><code>Deps.flush</code></a>.</p>

<p><code>Meteor.render</code> tracks the data dependencies of <code>htmlFunc</code> by running
it in a reactive computation, so it can respond to changes in any reactive
data sources used by that function. For more information, or to learn
how to make your own reactive data sources, see
<a href="http://localhost:3000/#reactivity">Reactivity</a>.</p>

<p>Example:</p>

<pre><code>// Client side: show the number of players online.
var frag = Meteor.render(function () {
  return "&lt;p&gt;There are " + Players.find({online: true}).count() +
    " players online.&lt;/p&gt;";
});
document.body.appendChild(frag);

// Server side: find all players that have been idle for a while,
// and mark them as offline. The count on the screen will
// automatically update on all clients.
Players.update({idleTime: {$gt: 30}}, {$set: {online: false}});
</code></pre>



















<div class="api ">
<h3 id="meteor_renderlist">
  <a class="name selflink" href="http://localhost:3000/#meteor_renderlist">Meteor.renderList(observable, docFunc, [elseFunc])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Create DOM nodes that automatically update themselves based on the results of a database query.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">observable</span>
  <span class="type">
    
      <a href="http://localhost:3000/#meteor_collection_cursor">Cursor</a>
    
  </span></dt>
<dd><p>Query cursor to observe as a reactive source of ordered documents.</p></dd>









<dt><span class="name">docFunc</span>
  <span class="type">
    
      Function taking a document and returning HTML
    
  </span></dt>
<dd><p>Render function to be called for each document.</p></dd>









<dt><span class="name">elseFunc</span>
  <span class="type">
    
      Function returning HTML
    
  </span></dt>
<dd><p>Optional.  Render function to be called when query is empty.</p></dd>





</dl>














































</div>



















<p>Creates a <code>DocumentFragment</code> that automatically updates as the results
of a database query change. Most Meteor apps use <code>{{#each}}</code> in
a template instead of calling this directly.</p>

<p><code>renderList</code> is more efficient than using <code>Meteor.render</code> to render HTML
for a list of documents.  For example, if a new document is created in
the database that matches the query, a new item will be rendered and
inserted at the appropriate place in the DOM without re-rendering the
other elements.  Similarly, if a document changes position in a sorted
query, the DOM nodes will simply be moved and not re-rendered.</p>

<p><code>docFunc</code> is called as needed to generate HTML for each document.  If
you provide <code>elseFunc</code>, then whenever the query returns no results, it
will be called to render alternate content. You might use this to show
a message like "No records match your query."</p>

<p>Each call to <code>docFunc</code> or <code>elseFunc</code> is run in its own reactive
computation so that if it has other external data dependencies, it will be
individually re-run when the data changes.</p>

<p>Example:</p>

<pre><code>// List the titles of all of the posts that have the tag
// "frontpage". Keep the list updated as new posts are made, as tags
// change, etc.  Display the selected post differently.
var frag = Meteor.renderList(
  Posts.find({tags: "frontpage"}),
  function(post) {
    var style = Session.equals("selectedId", post._id) ? "selected" : "";
    // A real app would need to quote/sanitize post.name
    return '&lt;div class="' + style + '"&gt;' + post.name + '&lt;/div&gt;';
  });
document.body.appendChild(frag);

// Select a post.  This will cause only the selected item and the
// previously selected item to update.
var somePost = Posts.findOne({tags: "frontpage"});
Session.set("selectedId", somePost._id);
</code></pre>















<div class="api bareapi">
<h3 id="eventmaps">
  <a class="name selflink" href="http://localhost:3000/#eventmaps">Event Maps</a>

</h3>

<div class="desc">

</div>






<p>Several functions take event maps. An event map is an object where
the properties specify a set of events to handle, and the values are
the handlers for those events. The property can be in one of several
forms:</p>

<dl>
























































<dt><span class="name"><em>eventtype</em></span>
  
</dt>
<dd><p>Matches a particular type of event, such as 'click'.</p></dd>

















































































































<dt><span class="name"><em>eventtype selector</em></span>
  
</dt>
<dd><p>Matches a particular type of event, but only when it appears on
an element that matches a certain CSS selector.</p></dd>

















































































































<dt><span class="name"><em>event1, event2</em></span>
  
</dt>
<dd><p>To handle more than one type of event with the same function, use a
comma-separated list.</p></dd>
























































</dl>

<p>The handler function receives two arguments: <code>event</code>, an object with
information about the event, and <code>template</code>, a <a href="http://localhost:3000/#template_inst">template
instance</a> for the template where the handler is
defined.  The handler also receives some additional context data in
<code>this</code>, depending on the context of the current element handling the
event.  In a Handlebars template, an element's context is the
Handlebars data context where that element occurs, which is set by
block helpers such as <code>#with</code> and <code>#each</code>.</p>

<p>Example:</p>

<pre><code>{
  // Fires when any element is clicked
  'click': function (event) { ... },

  // Fires when any element with the 'accept' class is clicked
  'click .accept': function (event) { ... },

  // Fires when 'accept' is clicked, or a key is pressed
  'keydown, click .accept': function (event) { ... }
}
</code></pre>

<p>Most events bubble up the document tree from their originating
element.  For example, <code>'click p'</code> catches a click anywhere in a
paragraph, even if the click originated on a link, span, or some other
element inside the paragraph.  The originating element of the event
is available as the <code>target</code> property, while the element that matched
the selector and is currently handling it is called <code>currentTarget</code>.</p>

<pre><code>{
  'click p': function (event) {
    var paragraph = event.currentTarget; // always a P
    var clickedElement = event.target; // could be the P or a child element
  }
}
</code></pre>

<p>If a selector matches multiple elements that an event bubbles to, it
will be called multiple times, for example in the case of <code>'click
div'</code> or <code>'click *'</code>.  If no selector is given, the handler
will only be called once, on the original target element.</p>

<p>The following properties and methods are available on the event object
passed to handlers:</p>

<dl class="objdesc">
























































<dt><span class="name">type</span>
  <span class="type">String</span>
</dt>
<dd><p>The event's type, such as "click", "blur" or "keypress".</p></dd>

















































































































<dt><span class="name">target</span>
  <span class="type">DOM Element</span>
</dt>
<dd><p>The element that originated the event.</p></dd>

















































































































<dt><span class="name">currentTarget</span>
  <span class="type">DOM Element</span>
</dt>
<dd><p>The element currently handling the event.  This is the element that
matched the selector in the event map.  For events that bubble, it may
be <code>target</code> or an ancestor of <code>target</code>, and its value changes as the
event bubbles.</p></dd>

















































































































<dt><span class="name">which</span>
  <span class="type">Number</span>
</dt>
<dd><p>For mouse events, the number of the mouse button (1=left, 2=middle, 3=right).
For key events, a character or key code.</p></dd>

















































































































<dt><span class="name">stopPropagation()</span>
  
</dt>
<dd><p>Prevent the event from propagating (bubbling) up to other elements.
Other event handlers matching the same element are still fired, in
this and other event maps.</p></dd>

















































































































<dt><span class="name">stopImmediatePropagation()</span>
  
</dt>
<dd><p>Prevent all additional event handlers from being run on this event,
including other handlers in this event map, handlers reached by
bubbling, and handlers in other event maps.</p></dd>

















































































































<dt><span class="name">preventDefault()</span>
  
</dt>
<dd><p>Prevents the action the browser would normally take in response to this
event, such as following a link or submitting a form.  Further handlers
are still called, but cannot reverse the effect.</p></dd>

















































































































<dt><span class="name">isPropagationStopped()</span>
  
</dt>
<dd><p>Returns whether <code>stopPropagation()</code> has been called for this event.</p></dd>

















































































































<dt><span class="name">isImmediatePropagationStopped()</span>
  
</dt>
<dd><p>Returns whether <code>stopImmediatePropagation()</code> has been called for this event.</p></dd>

















































































































<dt><span class="name">isDefaultPrevented()</span>
  
</dt>
<dd><p>Returns whether <code>preventDefault()</code> has been called for this event.</p></dd>
























































</dl>

<p>Returning <code>false</code> from a handler is the same as calling
both <code>stopImmediatePropagation</code> and <code>preventDefault</code> on the event.</p>

<p>Event types and their uses include:</p>

<dl class="objdesc">
























































<dt><span class="name"><code>click</code></span>
  
</dt>
<dd><p>Mouse click on any element, including a link, button, form control, or div.
Use <code>preventDefault()</code> to prevent a clicked link from being followed.
Some ways of activating an element from the keyboard also fire <code>click</code>.</p></dd>

















































































































<dt><span class="name"><code>dblclick</code></span>
  
</dt>
<dd><p>Double-click.</p></dd>

















































































































<dt><span class="name"><code>focus, blur</code></span>
  
</dt>
<dd><p>A text input field or other form control gains or loses focus.  You
can make any element focusable by giving it a <code>tabindex</code> property.
Browsers differ on whether links, checkboxes, and radio buttons are
natively focusable.  These events do not bubble.</p></dd>

















































































































<dt><span class="name"><code>change</code></span>
  
</dt>
<dd><p>A checkbox or radio button changes state.  For text fields, use
<code>blur</code> or key events to respond to changes.</p></dd>

















































































































<dt><span class="name"><code>mouseenter, mouseleave</code></span>
  
</dt>
<dd><p>The pointer enters or
leaves the bounds of an element.  These events do not bubble.</p></dd>

















































































































<dt><span class="name"><code>mousedown, mouseup</code></span>
  
</dt>
<dd><p>The mouse button is newly down or up.</p></dd>

















































































































<dt><span class="name"><code>keydown, keypress, keyup</code></span>
  
</dt>
<dd><p>The user presses a keyboard key.  <code>keypress</code> is most useful for
catching typing in text fields, while <code>keydown</code> and <code>keyup</code> can be
used for arrow keys or modifier keys.</p></dd>

















































































































<dt><span class="name"><code>tap</code></span>
  
</dt>
<dd><p>Tap on an element.  On touch-enabled
devices, this is a replacement to <code>click</code> that fires immediately.
These events are synthesized from <code>touchmove</code> and <code>touchend</code>.</p></dd>

























































</dl>

<p>Other DOM events are available as well, but for the events above,
Meteor has taken some care to ensure that they work uniformly in all
browsers.</p>


</div>





























<div class="api bareapi">
<h3 id="constant">
  <a class="name selflink" href="http://localhost:3000/#constant">Constant regions</a>

</h3>

<div class="desc">

</div>






<p>You can mark a region of a template as "constant" and not subject to
re-rendering using the
<code>{{#constant}}...{{/constant}}</code> block helper.
Content inside the <code>#constant</code> block helper is preserved exactly as-is
even if the enclosing template is re-rendered.  Changes to other parts
of the template are patched in around it in the same manner as
<code>preserve</code>.  Unlike individual node preservation, a constant region
retains not only the identities of its nodes but also their attributes
and contents.  The contents of the block will only be evaluated once
per occurrence of the enclosing template.</p>

<p>Constant regions allow non-Meteor content to be embedded in a Meteor
template.  Many third-party widgets create and manage their own DOM
nodes programmatically. Typically, you put an empty element in your
template, which the widget or library will then populate with
children. Normally, when Meteor re-renders the enclosing template it
would remove the new children, since the template says it should be
empty. If the container is wrapped in a <code>#constant</code> block, however, it
is left alone; whatever content is currently in the DOM remains.</p>











































<div class="note">
    









<p>Constant regions are intended for embedding non-Meteor content.
Event handlers and reactive dependencies don't currently work
correctly inside constant regions.</p>










  </div>












































</div>





























<div class="api bareapi">
<h3 id="isolate">
  <a class="name selflink" href="http://localhost:3000/#isolate">Reactivity isolation</a>

</h3>

<div class="desc">

</div>






<p>Each template runs as its own reactive computation.  When the template
accesses a reactive data source, such as by calling <code>Session.get</code> or
making a database query, this establishes a data dependency that will
cause the whole template to be re-rendered when the data changes.
This means that the amount of re-rendering for a particular change
is affected by how you've divided your HTML into templates.</p>

<p>Typically, the exact extent of re-rendering is not crucial, but if you
want more control, such as for performance reasons, you can use the
<code>{{#isolate}}...{{/isolate}}</code> helper.  Data
dependencies established inside an <code>#isolate</code> block are localized to
the block and will not in themselves cause the parent template to be
re-rendered.  This block helper essentially conveys the reactivity
benefits you would get by pulling the content out into a new
sub-template.</p>


</div>















<h2 id="match"><span>Match</span></h2>

<p>Meteor methods and publish functions take arbitrary <a href="http://localhost:3000/#ejson">EJSON</a> types as
arguments, but most arguments are expected to be of a particular type. Meteor's
<code>check</code> package is a lightweight library for checking that arguments and other
values are of the expected type. For example:</p>

<pre><code>Meteor.publish("chats-in-room", function (roomId) {
  // Make sure roomId is a string, not an arbitrary mongo selector object.
  check(roomId, String);
  return Chats.find({room: roomId});
});

Meteor.methods({addChat: function (roomId, message) {
  check(roomId, String);
  check(message, {
    text: String,
    timestamp: Date,
    // Optional, but if present must be an array of strings.
    tags: Match.Optional([String])
  });

  // ... do something with the message ...
}});
</code></pre>



















<div class="api ">
<h3 id="check">
  <a class="name selflink" href="http://localhost:3000/#check">check(value, pattern)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Checks that a value matches a <a href="http://localhost:3000/#matchpatterns">pattern</a>. If the value does not match the pattern, throws a <code>Match.Error</code>.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">value</span>
  <span class="type">
    
      Any
    
  </span></dt>
<dd><p>The value to check</p></dd>









<dt><span class="name">pattern</span>
  <span class="type">
    
      Match pattern
    
  </span></dt>
<dd><p>The <a href="http://localhost:3000/#matchpatterns">pattern</a> to match <code>value</code> against</p></dd>





</dl>














































</div>



















<p>If the match fails, <code>check</code> throws a <code>Match.Error</code> describing how it failed. If
this error gets sent over the wire to the client, it will appear only as
<code>Meteor.Error(400, "Match Failed")</code>; the failure details will be written to the
server logs but not revealed to the client.</p>



















<div class="api ">
<h3 id="match_test">
  <a class="name selflink" href="http://localhost:3000/#match_test">Match.test(value, pattern)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Returns true if the value matches the <a href="http://localhost:3000/#matchpatterns">pattern</a>.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">value</span>
  <span class="type">
    
      Any
    
  </span></dt>
<dd><p>The value to check</p></dd>









<dt><span class="name">pattern</span>
  <span class="type">
    
      Match pattern
    
  </span></dt>
<dd><p>The <a href="http://localhost:3000/#matchpatterns">pattern</a> to match <code>value</code> against</p></dd>





</dl>














































</div>

































<div class="api bareapi">
<h3 id="matchpatterns">
  <a class="name selflink" href="http://localhost:3000/#matchpatterns">Match patterns</a>

</h3>

<div class="desc">

</div>






<p>The following patterns can be used as pattern arguments to <code>check</code> and <code>Match.test</code>:</p>

<dl>
























































<dt><span class="name"><code>Match.Any</code></span>
  
</dt>
<dd><p>Matches any value.</p></dd>

















































































































<dt><span class="name"><code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>undefined</code>, <code>null</code></span>
  
</dt>
<dd><p>Matches a primitive of the given type.</p></dd>

















































































































<dt><span class="name"><code>Match.Integer</code></span>
  
</dt>
<dd><p>Matches a signed 32-bit integer. Doesn't match <code>Infinity</code>, <code>-Infinity</code>, or <code>NaN</code>.</p></dd>

















































































































<dt><span class="name"><code>[<em>pattern</em>]</code></span>
  
</dt>
<dd><p>A one-element array matches an array of elements, each of which match
<em>pattern</em>. For example, <code>[Number]</code> matches a (possibly empty) array of numbers;
<code>[Match.Any]</code> matches any array.</p></dd>

















































































































<dt><span class="name"><code>{<em>key1</em>: <em>pattern1</em>, <em>key2</em>: <em>pattern2</em>, ...}</code></span>
  
</dt>
<dd><p>Matches an Object with the given keys, with values matching the given patterns.
If any <em>pattern</em> is a <code>Match.Optional</code>, that key does not need to exist
in the object. The value may not contain any keys not listed in the pattern.
The value must be a plain Object with no special prototype.</p></dd>

















































































































<dt><span class="name"><code>Match.ObjectIncluding({<em>key1</em>: <em>pattern1</em>, <em>key2</em>: <em>pattern2</em>, ...})</code></span>
  
</dt>
<dd><p>Matches an Object with the given keys; the value may also have other keys
with arbitrary values.</p></dd>

















































































































<dt><span class="name"><code>Object</code></span>
  
</dt>
<dd><p>Matches any plain Object with any keys; equivalent to
<code>Match.ObjectIncluding({})</code>.</p></dd>

















































































































<dt><span class="name"><code>Match.Optional(<em>pattern</em>)</code></span>
  
</dt>
<dd><p>Matches either
<code>undefined</code> or something that matches pattern. If used in an object this matches
only if the key is not set as opposed to the value being set to <code>undefined</code>.</p>

<pre><code>// In an object
var pat = { name: Match.Optional(String) };
check({ name: "something" }, pat) // OK
check({}, pat) // OK
check({ name: undefined }, pat) // Throws an exception

// Outside an object
check(undefined, Match.Optional(String)); // OK
</code></pre></dd>

















































































































<dt><span class="name"><code>Match.OneOf(<em>pattern1</em>, <em>pattern2</em>, ...)</code></span>
  
</dt>
<dd><p>Matches any value that matches at least one of the provided patterns.</p></dd>

















































































































<dt><span class="name">Any constructor function (eg, <code>Date</code>)</span>
  
</dt>
<dd><p>Matches any element that is an instance of that type.</p></dd>

















































































































<dt><span class="name"><code>Match.Where(<em>condition</em>)</code></span>
  
</dt>
<dd><p>Calls the function <em>condition</em> with the value as the argument. If <em>condition</em>
returns true, this matches. If <em>condition</em> throws a <code>Match.Error</code> or returns
false, this fails. If <em>condition</em> throws any other error, that error is thrown
from the call to <code>check</code> or <code>Match.test</code>. Examples:</p>

<pre><code>check(buffer, Match.Where(EJSON.isBinary));

NonEmptyString = Match.Where(function (x) {
  check(x, String);
  return x.length &gt; 0;
});
check(arg, NonEmptyString);
</code></pre></dd>
























































</dl>


</div>















<h2 id="timers"><span>Timers</span></h2>

<p>Meteor uses global environment variables
to keep track of things like the current request's user.  To make sure
these variables have the right values, you need to use
<code>Meteor.setTimeout</code> instead of <code>setTimeout</code> and <code>Meteor.setInterval</code>
instead of <code>setInterval</code>.</p>

<p>These functions work just like their native JavaScript equivalents.
You'll get an error if you call the native function.</p>



















<div class="api ">
<h3 id="meteor_settimeout">
  <a class="name selflink" href="http://localhost:3000/#meteor_settimeout">Meteor.setTimeout(func, delay)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Call a function in the future after waiting for a specified delay.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">func</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>The function to run</p></dd>









<dt><span class="name">delay</span>
  <span class="type">
    
      Number
    
  </span></dt>
<dd><p>Number of milliseconds to wait before calling function</p></dd>





</dl>














































</div>



















<p>Returns a handle that can be used by <code>Meteor.clearTimeout</code>.</p>



















<div class="api ">
<h3 id="meteor_setinterval">
  <a class="name selflink" href="http://localhost:3000/#meteor_setinterval">Meteor.setInterval(func, delay)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Call a function repeatedly, with a time delay between calls.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">func</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>The function to run</p></dd>









<dt><span class="name">delay</span>
  <span class="type">
    
      Number
    
  </span></dt>
<dd><p>Number of milliseconds to wait between each function call.</p></dd>





</dl>














































</div>



















<p>Returns a handle that can be used by <code>Meteor.clearInterval</code>.</p>



















<div class="api ">
<h3 id="meteor_cleartimeout">
  <a class="name selflink" href="http://localhost:3000/#meteor_cleartimeout">Meteor.clearTimeout(id)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Cancel a function call scheduled by <code>Meteor.setTimeout</code>.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">id</span>
  <span class="type">
    
      Number
    
  </span></dt>
<dd><p>The handle returned by <code>Meteor.setTimeout</code></p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="meteor_clearinterval">
  <a class="name selflink" href="http://localhost:3000/#meteor_clearinterval">Meteor.clearInterval(id)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Cancel a repeating function call scheduled by <code>Meteor.setInterval</code>.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">id</span>
  <span class="type">
    
      Number
    
  </span></dt>
<dd><p>The handle returned by <code>Meteor.setInterval</code></p></dd>





</dl>














































</div>



















<h2 id="deps"><span>Deps</span></h2>

<p>Meteor has a simple dependency tracking system which allows it to
automatically rerun templates and other computations whenever
<a href="http://localhost:3000/#session"><code>Session</code></a> variables, database queries, and other data
sources change.</p>

<p>Unlike most other systems, you don't have to manually declare these
dependencies — it "just works". The mechanism is simple and
efficient. When you call a function that supports reactive updates
(such as a database query), it automatically saves the current
Computation object, if any (representing, for example, the current
template being rendered).  Later, when the data changes, the function
can "invalidate" the Computation, causing it to rerun (rerendering the
template).</p>

<p>Applications will find <a href="http://localhost:3000/#deps_autorun"><code>Deps.autorun</code></a> useful, while more
advanced facilities such as <code>Deps.Dependency</code> and <code>onInvalidate</code>
callbacks are intended primarily for package authors implementing new
reactive data sources.</p>



















<div class="api ">
<h3 id="deps_autorun">
  <a class="name selflink" href="http://localhost:3000/#deps_autorun">Deps.autorun(runFunc)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Run a function now and rerun it later whenever its dependencies change. Returns a Computation object that can be used to stop or observe the rerunning.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">runFunc</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>The function to run. It receives one argument: the Computation object that will be returned.</p></dd>





</dl>














































</div>



















<p><code>Deps.autorun</code> allows you to run a function that depends on reactive data
sources, in such a way that if there are changes to the data later,
the function will be rerun.</p>

<p>For example, you can monitor a cursor (which is a reactive data
source) and aggregate it into a session variable:</p>

<pre><code>Deps.autorun(function () {
  var oldest = _.max(Monkeys.find().fetch(), function (monkey) {
    return monkey.age;
  });
  if (oldest)
    Session.set("oldest", oldest.name);
});
</code></pre>

<p>Or you can wait for a session variable to have a certain value, and do
something the first time it does, calling <code>stop</code> on the computation to
prevent further rerunning:</p>

<pre><code>Deps.autorun(function (c) {
  if (! Session.equals("shouldAlert", true))
    return;

  c.stop();
  alert("Oh no!");
});
</code></pre>

<p>The function is invoked immediately, at which point it may alert and
stop right away if <code>shouldAlert</code> is already true.  If not, the
function is run again when <code>shouldAlert</code> becomes true.</p>

<p>A change to a data dependency does not cause an immediate rerun, but
rather "invalidates" the computation, causing it to rerun the next
time a flush occurs.  A flush will occur automatically as soon as
the system is idle if there are invalidated computations.  You can
also use <a href="http://localhost:3000/#deps_flush"><code>Deps.flush</code></a> to cause an immediate flush of
all pending reruns.</p>

<p>If you nest calls to <code>Deps.autorun</code>, then when the outer call stops or
reruns, the inner call will stop automatically.  Subscriptions and
observers are also automatically stopped when used as part of a
computation that is rerun, allowing new ones to be established.  See
<a href="http://localhost:3000/#meteor_subscribe"><code>Meteor.subscribe</code></a> for more information about
subscriptions and reactivity.</p>

<p>If the initial run of an autorun throws an exception, the computation
is automatically stopped and won't be rerun.</p>



















<div class="api ">
<h3 id="deps_flush">
  <a class="name selflink" href="http://localhost:3000/#deps_flush">Deps.flush()</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Process all reactive updates immediately and ensure that all invalidated computations are rerun.</p>










</div>







</div>



















<p>Normally, when you make changes (like writing to the database),
their impact (like updating the DOM) is delayed until the system is
idle. This keeps things predictable — you can know that the DOM
won't go changing out from under your code as it runs. It's also one
of the things that makes Meteor fast.</p>

<p><code>Deps.flush</code> forces all of the pending reactive updates to complete.
For example, if an event handler changes a Session
variable that will cause part of the user interface to rerender, the
handler can call <code>flush</code> to perform the rerender immediately and then
access the resulting DOM.</p>

<p>An automatic flush occurs whenever the system is idle which performs
exactly the same work as <code>Deps.flush</code>.  The flushing process consists
of rerunning any invalidated computations.  If additional
invalidations happen while flushing, they are processed as part of the
same flush until there is no more work to be done.  Callbacks
registered with <a href="http://localhost:3000/#deps_afterflush"><code>Meteor.afterFlush</code></a> are called
after processing outstanding invalidations.</p>

<p>Any auto-updating DOM elements that are found to not be in the
document during a flush may be cleaned up by Meteor (meaning that
Meteor will stop tracking and updating the elements, so that the
browser's garbage collector can delete them).  So, if you manually
call <code>flush</code>, you need to make sure that any auto-updating elements
that you have created by calling <a href="http://localhost:3000/#meteor_render"><code>Meteor.render</code></a>
have already been inserted in the main DOM tree.</p>

<p>It is illegal to call <code>flush</code> from inside a <code>flush</code> or from a running
computation.</p>



















<div class="api ">
<h3 id="deps_nonreactive">
  <a class="name selflink" href="http://localhost:3000/#deps_nonreactive">Deps.nonreactive(func)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Run a function without tracking dependencies.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">func</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>A function to call immediately.</p></dd>





</dl>














































</div>



















<p>Calls <code>func()</code> with <code>Deps.currentComputation</code> temporarily set to
<code>null</code>.  If <code>func</code> accesses reactive data sources, these data sources
will never cause a rerun of the enclosing computation.</p>



















<div class="api ">
<h3 id="deps_active">
  <a class="name selflink" href="http://localhost:3000/#deps_active">Deps.active</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.</p>










</div>







</div>



















<p>This value is useful for data source implementations to determine
whether they are being accessed reactively or not.</p>



















<div class="api ">
<h3 id="deps_currentcomputation">
  <a class="name selflink" href="http://localhost:3000/#deps_currentcomputation">Deps.currentComputation</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>The current computation, or <code>null</code> if there isn't one.  The current computation is the <a href="http://localhost:3000/#deps_computation"><code>Deps.Computation</code></a> object created by the innermost active call to <code>Deps.autorun</code>, and it's the computation that gains dependencies when reactive data sources are accessed.</p>










</div>







</div>



















<p>It's very rare to need to access <code>currentComputation</code> directly.  The
current computation is used implicitly by
<a href="http://localhost:3000/#deps_active"><code>Deps.active</code></a> (which tests whether there is one),
<a href="http://localhost:3000/#dependency_depend"><code>dependency.depend()</code></a> (which registers that it depends on a
dependency), and <a href="http://localhost:3000/#deps_oninvalidate"><code>Deps.onInvalidate</code></a> (which
registers a callback with it).</p>



















<div class="api ">
<h3 id="deps_oninvalidate">
  <a class="name selflink" href="http://localhost:3000/#deps_oninvalidate">Deps.onInvalidate(callback)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Registers a new <a href="http://localhost:3000/#computation_oninvalidate"><code>onInvalidate</code></a> callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>A callback function that will be invoked as <code>func(c)</code>, where <code>c</code> is the computation on which the callback is registered.</p></dd>





</dl>














































</div>



















<p>See <a href="http://localhost:3000/#computation_oninvalidate"><em><code>computation</code></em><code>.onInvalidate</code></a> for more
details.</p>



















<div class="api ">
<h3 id="deps_afterflush">
  <a class="name selflink" href="http://localhost:3000/#deps_afterflush">Deps.afterFlush(callback)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless <code>afterFlush</code> is called again.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>A function to call at flush time.</p></dd>





</dl>














































</div>



















<p>Functions scheduled by multiple calls to <code>afterFlush</code> are guaranteed
to run in the order that <code>afterFlush</code> was called.  Functions are
guaranteed to be called at a time when there are no invalidated
computations that need rerunning.  This means that if an <code>afterFlush</code>
function invalidates a computation, that computation will be rerun
before any other <code>afterFlush</code> functions are called.</p>

<h2 id="deps_computation"><span>Deps.Computation</span></h2>

<p>A Computation object represents code that is repeatedly rerun in
response to reactive data changes.  Computations don't have return
values; they just perform actions, such as rerendering a template on
the screen.  Computations are created using <a href="http://localhost:3000/#deps_autorun"><code>Deps.autorun</code></a>.
Use <a href="http://localhost:3000/#computation_stop"><code>stop</code></a> to prevent further rerunning of a
computation.</p>

<p>Each time a computation runs, it may access various reactive data
sources that serve as inputs to the computation, which are called its
dependencies.  At some future time, one of these dependencies may
trigger the computation to be rerun by invalidating it.  When this
happens, the dependencies are cleared, and the computation is
scheduled to be rerun at flush time.</p>

<p>The <em>current computation</em>
(<a href="http://localhost:3000/#deps_currentcomputation"><code>Deps.currentComputation</code></a>) is the
computation that is currently being run or rerun (computed), and the
one that gains a dependency when a reactive data source is accessed.
Data sources are responsible for tracking these dependencies using
<a href="http://localhost:3000/#deps_dependency"><code>Deps.Dependency</code></a> objects.</p>

<p>Invalidating a computation sets its <code>invalidated</code> property to true
and immediately calls all of the computation's <code>onInvalidate</code>
callbacks.  When a flush occurs, if the computation has been invalidated
and not stopped, then the computation is rerun by setting the
<code>invalidated</code> property to <code>false</code> and calling the original function
that was passed to <code>Deps.autorun</code>.  A flush will occur when the current
code finishes running, or sooner if <code>Deps.flush</code> is called.</p>

<p>Stopping a computation invalidates it (if it is valid) for the purpose
of calling callbacks, but ensures that it will never be rerun.</p>

<p>Example:</p>

<pre><code>// if we're in a computation, then perform some clean-up
// when the current computation is invalidated (rerun or
// stopped)
if (Deps.active) {
  Deps.onInvalidate(function () {
    x.destroy();
    y.finalize();
  });
}
</code></pre>



















<div class="api ">
<h3 id="computation_stop">
  <a class="name selflink" href="http://localhost:3000/#computation_stop"><em>computation</em>.stop()</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Prevents this computation from rerunning.</p>










</div>







</div>



















<p>Stopping a computation is irreversible and guarantees that it will
never be rerun.  You can stop a computation at any time, including
from the computation's own run function.  Stopping a computation that
is already stopped has no effect.</p>

<p>Stopping a computation causes its <code>onInvalidate</code> callbacks to run
immediately if it is not currently invalidated.</p>

<p>Nested computations are stopped automatically when their enclosing
computation is rerun.</p>



















<div class="api ">
<h3 id="computation_invalidate">
  <a class="name selflink" href="http://localhost:3000/#computation_invalidate"><em>computation</em>.invalidate()</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Invalidates this computation so that it will be rerun.</p>










</div>







</div>



















<p>Invalidating a computation marks it to be rerun at
<a href="http://localhost:3000/#deps_flush">flush time</a>, at
which point the computation becomes valid again.  It is rare to
invalidate a computation manually, because reactive data sources
invalidate their calling computations when they change.  Reactive data
sources in turn perform this invalidation using one or more
<a href="http://localhost:3000/#deps_dependency"><code>Deps.Dependency</code></a> objects.</p>

<p>Invalidating a computation immediately calls all <code>onInvalidate</code>
callbacks registered on it.  Invalidating a computation that is
currently invalidated or is stopped has no effect.  A computation can
invalidate itself, but if it continues to do so indefinitely, the
result will be an infinite loop.</p>



















<div class="api ">
<h3 id="computation_oninvalidate">
  <a class="name selflink" href="http://localhost:3000/#computation_oninvalidate"><em>computation</em>.onInvalidate(callback)</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Registers <code>callback</code> to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless <code>onInvalidate</code> is called again after the computation becomes valid again.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">callback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Function to be called on invalidation. Receives one argument, the computation that was invalidated.</p></dd>





</dl>














































</div>



















<p><code>onInvalidate</code> registers a one-time callback that either fires
immediately or as soon as the computation is next invalidated or
stopped.  It is used by reactive data sources to clean up resources or
break dependencies when a computation is rerun or stopped.</p>

<p>To get a callback after a computation has been recomputed, you can
call <a href="http://localhost:3000/#deps_afterflush"><code>Deps.afterFlush</code></a> from <code>onInvalidate</code>.</p>



















<div class="api ">
<h3 id="computation_stopped">
  <a class="name selflink" href="http://localhost:3000/#computation_stopped"><em>computation</em>.stopped</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>True if this computation has been stopped.</p>










</div>







</div>





































<div class="api ">
<h3 id="computation_invalidated">
  <a class="name selflink" href="http://localhost:3000/#computation_invalidated"><em>computation</em>.invalidated</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>True if this computation has been invalidated (and not yet rerun), or if it has been stopped.</p>










</div>







</div>



















<p>This property is initially false.  It is set to true by <code>stop()</code> and
<code>invalidate()</code>.  It is reset to false when the computation is
recomputed at flush time.</p>



















<div class="api ">
<h3 id="computation_firstrun">
  <a class="name selflink" href="http://localhost:3000/#computation_firstrun"><em>computation</em>.firstRun</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>True during the initial run of the computation at the time <code>Deps.autorun</code> is called, and false on subsequent reruns and at other times.</p>










</div>







</div>



















<p>This property is a convenience to support the common pattern where a
computation has logic specific to the first run.</p>

<h2 id="deps_dependency"><span>Deps.Dependency</span></h2>

<p>A Dependency represents an atomic unit of reactive data that a
computation might depend on.  Reactive data sources such as Session or
Minimongo internally create different Dependency objects for different
pieces of data, each of which may be depended on by multiple
computations.  When the data changes, the computations are
invalidated.</p>

<p>Dependencies don't store data, they just track the set of computations to
invalidate if something changes.  Typically, a data value will be
accompanied by a Dependency object that tracks the computations that depend
on it, as in this example:</p>

<pre><code>var weather = "sunny";
var weatherDep = new Deps.Dependency;

var getWeather = function () {
  weatherDep.depend()
  return weather;
};

var setWeather = function (w) {
  weather = w;
  // (could add logic here to only call changed()
  // if the new value is different from the old)
  weatherDep.changed();
};
</code></pre>

<p>This example implements a weather data source with a simple getter and
setter.  The getter records that the current computation depends on
the <code>weatherDep</code> dependency using <code>depend()</code>, while the setter
signals the dependency to invalidate all dependent computations by
calling <code>changed()</code>.</p>

<p>The reason Dependencies do not store data themselves is that it can be
useful to associate multiple Dependencies with the same piece of data.
For example, one Dependency might represent the result of a database
query, while another might represent just the number of documents in
the result.  A Dependency could represent whether the weather is sunny
or not, or whether the temperature is above freezing.
<a href="http://localhost:3000/#session_equals"><code>Session.equals</code></a> is implemented this way for
efficiency.  When you call <code>Session.equals("weather", "sunny")</code>, the
current computation is made to depend on an internal Dependency that
does not change if the weather goes from, say, "rainy" to "cloudy".</p>

<p>Conceptually, the only two things a Dependency can do are gain a
dependent and change.</p>

<p>A Dependency's dependent computations are always valid (they have
<code>invalidated === false</code>).  If a dependent is invalidated at any time,
either by the Dependency itself or some other way, it is immediately
removed.</p>



















<div class="api ">
<h3 id="dependency_changed">
  <a class="name selflink" href="http://localhost:3000/#dependency_changed"><em>dependency</em>.changed()</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Invalidate all dependent computations immediately and remove them as dependents.</p>










</div>







</div>





































<div class="api ">
<h3 id="dependency_depend">
  <a class="name selflink" href="http://localhost:3000/#dependency_depend"><em>dependency</em>.depend([fromComputation])</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>Declares that the current computation (or <code>fromComputation</code> if given) depends on <code>dependency</code>.  The computation will be invalidated the next time <code>dependency</code> changes.</p>



















<p>If there is no current computation and <code>depend()</code> is called with no arguments, it does nothing and returns false.</p>



















<p>Returns true if the computation is a new dependent of <code>dependency</code> rather than an existing one.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">fromComputation</span>
  <span class="type">
    
      Deps.Computation
    
  </span></dt>
<dd><p>An optional computation declared to depend on <code>dependency</code> instead of the current computation.</p></dd>





</dl>














































</div>



















<p><code>dep.depend()</code> is used in reactive data source implementations to record
the fact that <code>dep</code> is being accessed from the current computation.</p>



















<div class="api ">
<h3 id="dependency_hasdependents">
  <a class="name selflink" href="http://localhost:3000/#dependency_hasdependents"><em>dependency</em>.hasDependents()</a>

  <span class="locus">Client</span>

</h3>

<div class="desc">










<p>True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.</p>










</div>







</div>



















<p>For reactive data sources that create many internal Dependencies,
this function is useful to determine whether a particular Dependency is
still tracking any dependency relationships or if it can be cleaned up
to save memory.</p>

<h2 id="ejson"><span>EJSON</span></h2>

<p>EJSON is an extension of JSON to support more types. It supports all JSON-safe
types, as well as:</p>

<ul>
<li><strong>Date</strong> (JavaScript <code>Date</code>)</li>
<li><strong>Binary</strong> (JavaScript <code>Uint8Array</code> or the
result of <a href="http://localhost:3000/#ejson_new_binary"><code>EJSON.newBinary</code></a>)</li>
<li><strong>User-defined types</strong> (see <a href="http://localhost:3000/#ejson_add_type"><code>EJSON.addType</code></a>.  For example,
<a href="http://localhost:3000/#collection_object_id"><code>Meteor.Collection.ObjectID</code></a> is implemented this way.)</li>
</ul>

<p>All EJSON serializations are also valid JSON.  For example an object with a date
and a binary buffer would be serialized in EJSON as:</p>

<pre><code>{
  "d": {"$date": 1358205756553},
  "b": {"$binary": "c3VyZS4="}
}
</code></pre>

<p>Meteor supports all built-in EJSON data types in publishers, method arguments
and results, Mongo databases, and <a href="http://localhost:3000/#session"><code>Session</code></a> variables.</p>



















<div class="api ">
<h3 id="ejson_parse">
  <a class="name selflink" href="http://localhost:3000/#ejson_parse">EJSON.parse(str)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Parse a string into an EJSON value. Throws an error if the string is not valid EJSON.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">str</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>A string to parse into an EJSON value.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="ejson_stringify">
  <a class="name selflink" href="http://localhost:3000/#ejson_stringify">EJSON.stringify(val)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Serialize a value to a string.</p>

<p>For EJSON values, the serialization fully represents the value. For non-EJSON values, serializes the same way as <code>JSON.stringify</code>.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">val</span>
  <span class="type">
    
      EJSON-compatible value
    
  </span></dt>
<dd><p>A value to stringify.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="ejson_from_json_value">
  <a class="name selflink" href="http://localhost:3000/#ejson_from_json_value">EJSON.fromJSONValue(val)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Deserialize an EJSON value from its  plain JSON representation.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">val</span>
  <span class="type">
    
      JSON-compatible value
    
  </span></dt>
<dd><p>A value to deserialize into EJSON.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="ejson_to_json_value">
  <a class="name selflink" href="http://localhost:3000/#ejson_to_json_value">EJSON.toJSONValue(val)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Serialize an EJSON-compatible value into its plain JSON representation.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">val</span>
  <span class="type">
    
      EJSON-compatible value
    
  </span></dt>
<dd><p>A value to serialize to plain JSON.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="ejson_equals">
  <a class="name selflink" href="http://localhost:3000/#ejson_equals">EJSON.equals(a, b)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Return true if <code>a</code> and <code>b</code> are equal to each other.  Return false otherwise.  Uses the <code>equals</code> method on <code>a</code> if present, otherwise performs a deep comparison.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">a</span>
  <span class="type">
    
      EJSON-compatible object
    
  </span></dt>
<dd></dd>









<dt><span class="name">b</span>
  <span class="type">
    
      EJSON-compatible object
    
  </span></dt>
<dd></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="ejson_clone">
  <a class="name selflink" href="http://localhost:3000/#ejson_clone">EJSON.clone(val)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Return a deep copy of <code>val</code>.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">val</span>
  <span class="type">
    
      EJSON-compatible value
    
  </span></dt>
<dd><p>A value to copy.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="ejson_new_binary">
  <a class="name selflink" href="http://localhost:3000/#ejson_new_binary">EJSON.newBinary(size)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Allocate a new buffer of binary data that EJSON can serialize.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">size</span>
  <span class="type">
    
      Number
    
  </span></dt>
<dd><p>The number of bytes of binary data to allocate.</p></dd>





</dl>














































</div>



















<p>Buffers of binary data are represented by <code>Uint8Array</code> instances on JavaScript
platforms that support them.  On implementations of JavaScript that do not
support <code>Uint8Array</code>, binary data buffers are represented by standard arrays
containing numbers ranging from 0 to 255, and the <code>$Uint8ArrayPolyfill</code> key
set to <code>true</code>.</p>



















<div class="api ">
<h3 id="ejson_is_binary">
  <a class="name selflink" href="http://localhost:3000/#ejson_is_binary">EJSON.isBinary(x)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Returns true if <code>x</code> is a buffer of binary data, as returned from <a href="http://localhost:3000/#ejson_new_binary"><code>EJSON.newBinary</code></a>.</p>










</div>







</div>





































<div class="api ">
<h3 id="ejson_add_type">
  <a class="name selflink" href="http://localhost:3000/#ejson_add_type">EJSON.addType(name, factory)</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Add a custom datatype to EJSON.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">name</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>A tag for your custom type; must be unique among custom data types defined in your project, and must match the result of your type's <code>typeName</code> method.</p></dd>









<dt><span class="name">factory</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>A function that deserializes a JSON-compatible value into an instance of your type.  This should match the serialization performed by your type's <code>toJSONValue</code> method.</p></dd>





</dl>














































</div>



















<p>When you add a type to EJSON, Meteor will be able to use that type in:</p>

<ul>
<li>publishing objects of your type if you pass them to publish handlers.</li>
<li>allowing your type in the return values or arguments to
<a href="http://localhost:3000/#methods_header">methods</a>.</li>
<li>storing your type client-side in Minimongo.</li>
<li>allowing your type in <a href="http://localhost:3000/#session"><code>Session</code></a> variables.</li>
</ul>















<div class="note">
    





<p>MongoDB cannot store most user-defined types natively on the server.  Your
  type will work in Minimongo, and you can send it to the client using a custom
  publisher, but MongoDB can only store the types defined in
  <a href="http://bsonspec.org/" target="_blank">BSON</a>.</p>






  </div>















<p>Instances of your type should implement the following interface:</p>



















<div class="api ">
<h3 id="ejson_type_clone">
  <a class="name selflink" href="http://localhost:3000/#ejson_type_clone"><i>instance</i>.clone()</a>

</h3>

<div class="desc">










<p>Return a value <code>r</code> such that <code>this.equals(r)</code> is true, and modifications to <code>r</code> do not affect <code>this</code> and vice versa.</p>










</div>







</div>





































<div class="api ">
<h3 id="ejson_type_equals">
  <a class="name selflink" href="http://localhost:3000/#ejson_type_equals"><i>instance</i>.equals(other)</a>

</h3>

<div class="desc">










<p>Return <code>true</code> if <code>other</code> has a value equal to <code>this</code>; <code>false</code> otherwise.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">other</span>
  <span class="type">
    
      object
    
  </span></dt>
<dd><p>Another object to compare this to.</p></dd>





</dl>














































</div>



















<p>The <code>equals</code> method should define an <a href="http://en.wikipedia.org/wiki/Equivalence_relation" target="_blank">equivalence
relation</a>.  It should have
the following properties:</p>

<ul>
<li><em>Reflexivity</em> - for any instance <code>a</code>: <code>a.equals(a)</code> must be true.</li>
<li><em>Symmetry</em> - for any two instances <code>a</code> and <code>b</code>: <code>a.equals(b)</code> if and only if <code>b.equals(a)</code>.</li>
<li><em>Transitivity</em> - for any three instances <code>a</code>, <code>b</code>, and <code>c</code>: <code>a.equals(b)</code> and <code>b.equals(c)</code> implies <code>a.equals(c)</code>.</li>
</ul>



















<div class="api ">
<h3 id="ejson_type_typeName">
  <a class="name selflink" href="http://localhost:3000/#ejson_type_typeName"><i>instance</i>.typeName()</a>

</h3>

<div class="desc">










<p>Return the tag used to identify this type.  This must match the tag used to register this type with <a href="http://localhost:3000/#ejson_add_type"><code>EJSON.addType</code></a>.</p>










</div>







</div>





































<div class="api ">
<h3 id="ejson_type_toJSONValue">
  <a class="name selflink" href="http://localhost:3000/#ejson_type_toJSONValue"><i>instance</i>.toJSONValue()</a>

</h3>

<div class="desc">










<p>Serialize this instance into a JSON-compatible value.</p>










</div>







</div>



















<p>For example, the <code>toJSONValue</code> method for
<a href="http://localhost:3000/#collection_object_id"><code>Meteor.Collection.ObjectID</code></a> could be:</p>

<pre><code>function () {
  return this.toHexString();
};
</code></pre>

<h2 id="http"><span>HTTP</span></h2>

<p><code>HTTP</code> provides an HTTP request API on the client and server.  To use
these functions, add the HTTP package to your project with <code>$ meteor add
http</code>.</p>



















<div class="api ">
<h3 id="http_call">
  <a class="name selflink" href="http://localhost:3000/#http_call">HTTP.call(method, url [, options] [, asyncCallback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Perform an outbound HTTP request.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">method</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The HTTP method to use: "<code>GET</code>", "<code>POST</code>", "<code>PUT</code>", or "<code>DELETE</code>".</p></dd>









<dt><span class="name">url</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The URL to retrieve.</p></dd>









<dt><span class="name">asyncCallback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback.  If passed, the method runs asynchronously, instead of synchronously, and calls asyncCallback.  On the client, this callback is required.</p></dd>





</dl>















































<h4>Options</h4>




































<dl class="args">





<dt><span class="name">content</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>String to use as the HTTP request body.</p></dd>









<dt><span class="name">data</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>JSON-able object to stringify and use as the HTTP request body. Overwrites <code>content</code>.</p></dd>









<dt><span class="name">query</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>Query string to go in the URL. Overwrites any query string in <code>url</code>.</p></dd>









<dt><span class="name">params</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>Dictionary of request parameters to be encoded and placed in the URL (for GETs) or request body (for POSTs).  If <code>content</code> or <code>data</code> is specified, <code>params</code> will always be placed in the URL.</p></dd>









<dt><span class="name">auth</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>HTTP basic authentication string of the form <code>"username:password"</code></p></dd>









<dt><span class="name">headers</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p>Dictionary of strings, headers to add to the HTTP request.</p></dd>









<dt><span class="name">timeout</span>
  <span class="type">
    
      Number
    
  </span></dt>
<dd><p>Maximum time in milliseconds to wait for the request before failing.  There is no timeout by default.</p></dd>









<dt><span class="name">followRedirects</span>
  <span class="type">
    
      Boolean
    
  </span></dt>
<dd><p>If true, transparently follow HTTP redirects.  Cannot be set to false on the client.</p></dd>





</dl>












































</div>



















<p>This function initiates an HTTP request to a remote server. It returns
a result object with the contents of the HTTP response.  The result
object is detailed below.</p>

<p>On the server, this function can be run either synchronously or
asynchronously.  If the callback is omitted, it runs synchronously,
and the results are returned once the request completes. This is
useful when making server-to-server HTTP API calls from within Meteor
methods, as the method can succeed or fail based on the results of the
synchronous HTTP call.  In this case, consider using
<a href="http://localhost:3000/#method_unblock"><code>this.unblock()</code></a> to allow other methods to run in
the mean time.  On the client, this function must be used
asynchronously by passing a callback.</p>

<p>Both HTTP and HTTPS protocols are supported.  The <code>url</code> argument must be
an absolute URL including protocol and host name on the server, but may be
relative to the current host on the client.  The <code>query</code> option
replaces the query string of <code>url</code>.  Parameters specified in <code>params</code>
that are put in the URL are appended to any query string.
For example, with a <code>url</code> of <code>"/path?query"</code> and
<code>params</code> of <code>{foo:"bar"}</code>, the final URL will be <code>"/path?query&amp;foo=bar"</code>.</p>

<p>The <code>params</code> are put in the URL or the request body, depending on the
type of request.  In the case of request with no bodies, like GET and
HEAD, the parameters will always go in the URL.  For a POST or other
type of request, the parameters will be encoded into the body with a
standard <code>x-www-form-urlencoded</code> content type, unless the <code>content</code>
or <code>data</code> option is used to specify a body, in which case the
parameters will be appended to the URL instead.</p>

<p>The callback receives two arguments, <code>error</code> and <code>result</code>.  The
<code>error</code> argument will contain an Error if the request fails in any
way, including a network error, time-out, or an HTTP status code in
the 400 or 500 range.  In case of a 4xx/5xx HTTP status code, the
<code>response</code> property on <code>error</code> matches the contents of the result
object.  When run in synchronous mode, either <code>result</code> is returned
from the function, or <code>error</code> is thrown.</p>

<p>Contents of the result object:</p>

<dl class="objdesc">

<dt><span class="name">statusCode</span>
  <span class="type">Number</span></dt>
<dd>Numeric HTTP result status code, or <code>null</code> on error.</dd>

<dt><span class="name">content</span>
  <span class="type">String</span></dt>
<dd>The body of the HTTP response as a string.</dd>

<dt><span class="name">data</span>
  <span class="type">Object or <code>null</code></span></dt>
<dd>If the response headers indicate JSON content, this contains the body of the document parsed as a JSON object.</dd>

<dt><span class="name">headers</span>
  <span class="type">Object</span></dt>
<dd>A dictionary of HTTP headers from the response.</dd>

</dl>

<p>Example server method:</p>

<pre><code>Meteor.methods({checkTwitter: function (userId) {
  check(userId, String);
  this.unblock();
  var result = HTTP.call("GET", "http://api.twitter.com/xyz",
                         {params: {user: userId}});
  if (result.statusCode === 200)
     return true
  return false;
}});
</code></pre>

<p>Example asynchronous HTTP call:</p>

<pre><code>HTTP.call("POST", "http://api.twitter.com/xyz",
          {data: {some: "json", stuff: 1}},
          function (error, result) {
            if (result.statusCode === 200) {
              Session.set("twizzled", true);
            }
          });
</code></pre>



















<div class="api ">
<h3 id="http_get">
  <a class="name selflink" href="http://localhost:3000/#http_get">HTTP.get(url, [options], [asyncCallback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Send an HTTP GET request.  Equivalent to <code>HTTP.call("GET", ...)</code>.</p>










</div>







</div>





































<div class="api ">
<h3 id="http_post">
  <a class="name selflink" href="http://localhost:3000/#http_post">HTTP.post(url, [options], [asyncCallback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Send an HTTP POST request.  Equivalent to <code>HTTP.call("POST", ...)</code>.</p>










</div>







</div>





































<div class="api ">
<h3 id="http_put">
  <a class="name selflink" href="http://localhost:3000/#http_put">HTTP.put(url, [options], [asyncCallback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Send an HTTP PUT request.  Equivalent to <code>HTTP.call("PUT", ...)</code>.</p>










</div>







</div>





































<div class="api ">
<h3 id="http_del">
  <a class="name selflink" href="http://localhost:3000/#http_del">HTTP.del(url, [options], [asyncCallback])</a>

  <span class="locus">Anywhere</span>

</h3>

<div class="desc">










<p>Send an HTTP DELETE request.  Equivalent to <code>HTTP.call("DELETE", ...)</code>.  (Named <code>del</code> to avoid conflict with JavaScript's <code>delete</code>.)</p>










</div>







</div>



















<h2 id="email"><span>Email</span></h2>

<p>The <code>email</code> package allows sending email from a Meteor app. To use it, add the
package to your project with <code>$ meteor add email</code>.</p>

<p>The server reads from the <code>MAIL_URL</code> environment variable to determine how to
send mail. Currently, Meteor supports sending mail over SMTP; the <code>MAIL_URL</code>
environment variable should be of the form
<code>smtp://USERNAME:PASSWORD@HOST:PORT/</code>. For apps deployed with <code>meteor deploy</code>,
<code>MAIL_URL</code> defaults to an account (provided by
<a href="http://www.mailgun.com/" target="_blank">Mailgun</a>) which allows apps to send up to 200 emails
per day; you may override this default by assigning to <code>process.env.MAIL_URL</code>
before your first call to <code>Email.send</code>.</p>

<p>If <code>MAIL_URL</code> is not set (eg, when running your application locally),
<code>Email.send</code> outputs the message to standard output instead.</p>



















<div class="api ">
<h3 id="email_send">
  <a class="name selflink" href="http://localhost:3000/#email_send">Email.send(options)</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Send an email. Throws an <code>Error</code> on failure to contact mail server or if mail server returns an error.</p>










</div>








<h4>Options</h4>




































<dl class="args">





<dt><span class="name">from</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p><a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC5322</a> "From:" address (required)</p></dd>









<dt><span class="name">to</span>
  <span class="type">
    
      String or Array of strings
    
  </span></dt>
<dd><p><a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC5322</a> "To:" address[es]</p></dd>









<dt><span class="name">cc</span>
  <span class="type">
    
      String or Array of strings
    
  </span></dt>
<dd><p><a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC5322</a> "Cc:" address[es]</p></dd>









<dt><span class="name">bcc</span>
  <span class="type">
    
      String or Array of strings
    
  </span></dt>
<dd><p><a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC5322</a> "Bcc:" address[es]</p></dd>









<dt><span class="name">replyTo</span>
  <span class="type">
    
      String or Array of strings
    
  </span></dt>
<dd><p><a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC5322</a> "Reply-To:" address[es]</p></dd>









<dt><span class="name">subject</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p><a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC5322</a> "Subject:" line</p></dd>









<dt><span class="name">text</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p><a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC5322</a> mail body (plain text)</p></dd>









<dt><span class="name">html</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p><a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC5322</a> mail body (HTML)</p></dd>









<dt><span class="name">headers</span>
  <span class="type">
    
      Object
    
  </span></dt>
<dd><p><a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC5322</a> custom headers (dictionary)</p></dd>





</dl>












































</div>



















<p>You must provide the <code>from</code> option and at least one of <code>to</code>, <code>cc</code>, and <code>bcc</code>;
all other options are optional.</p>

<p><code>Email.send</code> only works on the server. Here is an example of how a
client could use a server method call to send an email. (In an actual
application, you'd need to be careful to limit the emails that a
client could send, to prevent your server from being used as a relay
by spammers.)</p>

<pre><code>// In your server code: define a method that the client can call
Meteor.methods({
  sendEmail: function (to, from, subject, text) {
    check([to, from, subject, text], [String]);

    // Let other method calls from the same client start running,
    // without waiting for the email sending to complete.
    this.unblock();

    Email.send({
      to: to,
      from: from,
      subject: subject,
      text: text
    });
  }
});

// In your client code: asynchronously send an email
Meteor.call('sendEmail',
            'alice@example.com',
            'bob@example.com',
            'Hello from Meteor!',
            'This is a test of Email.send.');
</code></pre>

<h2 id="assets"><span>Assets</span></h2>

<p><code>Assets</code> allows server code in a Meteor application to access static server
assets, which are located in the <code>private</code> subdirectory of an application's
tree.</p>



















<div class="api ">
<h3 id="assets_getText">
  <a class="name selflink" href="http://localhost:3000/#assets_getText">Assets.getText(assetPath, [asyncCallback])</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Retrieve the contents of the static server asset as a UTF8-encoded string.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">assetPath</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The path of the asset, relative to the application's <code>private</code> subdirectory.</p></dd>









<dt><span class="name">asyncCallback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback, which is called asynchronously with the error or result after the function is complete. If not provided, the function runs synchronously.</p></dd>





</dl>














































</div>





































<div class="api ">
<h3 id="assets_getBinary">
  <a class="name selflink" href="http://localhost:3000/#assets_getBinary">Assets.getBinary(assetPath, [asyncCallback])</a>

  <span class="locus">Server</span>

</h3>

<div class="desc">










<p>Retrieve the contents of the static server asset as an <a href="http://localhost:3000/#ejson_new_binary">EJSON Binary</a>.</p>










</div>






<h4>Arguments</h4>




































<dl class="args">





<dt><span class="name">assetPath</span>
  <span class="type">
    
      String
    
  </span></dt>
<dd><p>The path of the asset, relative to the application's <code>private</code> subdirectory.</p></dd>









<dt><span class="name">asyncCallback</span>
  <span class="type">
    
      Function
    
  </span></dt>
<dd><p>Optional callback, which is called asynchronously with the error or result after the function is complete. If not provided, the function runs synchronously.</p></dd>





</dl>














































</div>



















<p>Static server assets are included by placing them in the application's <code>private</code>
subdirectory. For example, if an application's <code>private</code> subdirectory includes a
directory called <code>nested</code> with a file called <code>data.txt</code> inside it, then server
code can read <code>data.txt</code> by running:</p>

<pre><code>var data = Assets.getText('nested/data.txt');
</code></pre>
    <h1 id="packages">Packages</h1>

<p>Meteor supports a variety of add-on packages and third party
libraries. While you can build great applications using only the Meteor
core functionality, optional packages can make development even faster
and better.</p>

<p>Packages can be added and removed from a Meteor project with:</p>

<pre><code>$ meteor add &lt;package_name&gt;
</code></pre>

<p>and removed with:</p>

<pre><code>$ meteor remove &lt;package_name&gt;
</code></pre>















<h2 id="accountsui"><code>accounts-ui</code></h2>

<p>A turn-key user interface for Meteor Accounts.</p>

<p>To add Accounts and a set of login controls to an application, add the
<code>accounts-ui</code> package and at least one login provider package:
<code>accounts-password</code>, <code>accounts-facebook</code>, <code>accounts-github</code>,
<code>accounts-google</code>, <code>accounts-twitter</code>, or <code>accounts-weibo</code>.</p>

<p>Then simply add the <code>{{loginButtons}}</code> helper to an HTML file. This
will place a login widget on the page. If there is only one provider configured
and it is an external service, this will add a login/logout button. If you use
<code>accounts-password</code> or use multiple external login services, this will add
a "Sign in" link which opens a dropdown menu with login options. If you plan to
position the login dropdown in the right edge of the screen, use
<code>{{loginButtons align="right"}}</code> in order to get the dropdown to lay
itself out without expanding off the edge of the screen.</p>

<p>To configure the behavior of <code>{{loginButtons}}</code>, use
<a href="http://localhost:3000/#accounts_ui_config"><code>Accounts.ui.config</code></a>.</p>

<p><code>accounts-ui</code> also includes modal popup dialogs to handle links from
<a href="http://localhost:3000/#accounts_sendresetpasswordemail"><code>sendResetPasswordEmail</code></a>, <a href="http://localhost:3000/#accounts_sendverificationemail"><code>sendVerificationEmail</code></a>,
and <a href="http://localhost:3000/#accounts_sendenrollmentemail"><code>sendEnrollmentEmail</code></a>. These
do not have to be manually placed in HTML: they are automatically activated
when the URLs are loaded.</p>





























<h2 id="amplify"><code>amplify</code></h2>

<p><a href="http://amplifyjs.com/" target="_blank">Amplify</a> provides a simple cross-browser API for HTML5 local storage, an
in-browser communication channel for loosely coupling application
components, and several useful utility functions.</p>

<p>Amplify defines a global namespace <code>amplify</code> on the client only. It does
not run on the server.</p>





























<h2 id="appcache"><code>appcache</code></h2>

<p>The <code>appcache</code> package stores the static parts of a Meteor application
(the client side Javascript, HTML, CSS, and images) in the browser's
<a href="https://en.wikipedia.org/wiki/AppCache" target="_blank">application cache</a>. To enable
caching simply add the <code>appcache</code> package to your project.</p>

<ul>
<li><p>Once a user has visited a Meteor application for the first time and
the application has been cached, on subsequent visits the web page
loads faster because the browser can load the application out of the
cache without contacting the server first.</p></li>
<li><p>Hot code pushes are loaded by the browser in the background while the
app continues to run.  Once the new code has been fully loaded the
browser is able to switch over to the new code quickly.</p></li>
<li><p>The application cache allows the application to be loaded even when
the browser doesn't have an Internet connection, and so enables using
the app offline.</p></li>
</ul>

<p>(Note however that the <code>appcache</code> package by itself doesn't make
<em>data</em> available offline: in an application loaded offline, a Meteor
Collection will appear to be empty in the client until the Internet
becomes available and the browser is able to establish a livedata
connection).</p>

<p>The application cache works transparently in all supported browsers
except for Firefox, which pops up a message saying "This website is
asking to store data on your computer for offline use" and asks the
user whether to allow or deny the request.  The application cache is
disabled on Firefox by default; to turn it on use:</p>

<pre><code>Meteor.AppCache.config({firefox: true});
</code></pre>

<p>You can also disable the application cache for specific browsers:</p>

<pre><code>Meteor.AppCache.config({
  chrome: false,
  firefox: true,
  ie: false
});
</code></pre>

<p>The supported browsers that can be enabled or disabled are <code>android</code>,
<code>chrome</code>, <code>chromium</code>, <code>firefox</code>, <code>ie</code>, <code>mobileSafari</code> and <code>safari</code>.</p>

<p>Browsers limit the amount of data they will put in the application
cache, which can vary due to factors such as how much disk space is
free.  Unfortunately if your application goes over the limit rather
than disabling the application cache altogether and running the
application online, the browser will instead fail that particular
<em>update</em> of the cache, leaving your users running old code.</p>

<p>Thus it's best to keep the size of the cache below 5MB.  The
<code>appcache</code> package will print a warning on the Meteor server console
if the total size of the resources being cached is over 5MB.</p>

<p>If you have files too large to fit in the cache you can disable
caching by URL prefix.  For example,</p>

<pre><code>Meteor.AppCache.config({onlineOnly: ['/online/']});
</code></pre>

<p>causes files in your <code>public/online</code> directory to not be cached, and
so they will only be available online.  You can then move your large
files into that directory and refer to them at the new URL:</p>

<pre><code>&lt;img src="/online/bigimage.jpg"&gt;
</code></pre>

<p>If you'd prefer not to move your files, you can use the file names
themselves as the URL prefix:</p>

<pre><code>Meteor.AppCache.config({
  onlineOnly: [
    '/bigimage.jpg',
    '/largedata.json'
  ]
});
</code></pre>

<p>though keep in mind that since the exclusion is by prefix (this is a
limitation of the application cache manifest), excluding
<code>/largedata.json</code> will also exclude such URLs as
<code>/largedata.json.orig</code> and <code>/largedata.json/file1</code>.</p>

<p>For more information about how Meteor interacts with the application
cache, see the
<a href="https://github.com/meteor/meteor/wiki/AppCache" target="_blank">AppCache page</a>
in the Meteor wiki.</p>





























<h2 id="auditargumentchecks"><code>audit-argument-checks</code></h2>

<p>This package causes Meteor to require that all arguments passed to methods and
publish functions are <a href="http://localhost:3000/#check"><code>check</code>ed</a>. Any method that does not pass each
one of its arguments to <code>check</code> will throw an error, which will be logged on the
server and which will appear to the client as a
<code>500 Internal server error</code>. This is a simple way to help ensure that your
app has complete check coverage.</p>

<p>Methods and publish functions that do not need to validate their arguments can
simply run <code>check(arguments, [Match.Any])</code> to satisfy the
<code>audit-argument-checks</code> coverage checker.</p>





























<h2 id="backbone"><code>backbone</code></h2>

<p><a href="http://documentcloud.github.com/backbone/" target="_blank">Backbone</a> is a popular client-side MVC framework for managing complex
data in the browser. In addition to the MVC and DOM-binding
functionality, it also provides an API for HTML5 pushState and
client-side URL routing.</p>





























<h2 id="bootstrap"><code>bootstrap</code></h2>

<p><a href="http://twitter.github.com/bootstrap/" target="_blank">Twitter's Bootstrap</a> package is a front-end toolkit for faster, more
beautiful web development.  Bootstrap provides simple and flexible HTML,
CSS, and JavaScript for popular user interface components and
interactions including typography, forms, buttons, tables, grids, and
navigation.</p>





























<h2 id="coffeescript"><code>coffeescript</code></h2>

<p><a href="http://coffeescript.org/" target="_blank">CoffeeScript</a> is a little language that
compiles into JavaScript. It provides a simple syntax without lots of
braces and parentheses.  The code compiles one-to-one into the
equivalent JS, and there is no interpretation at runtime.</p>

<p>CoffeeScript is supported on both the client and the server. Files
ending with <code>.coffee</code> or <code>.litcoffee</code> are automatically compiled to
JavaScript.</p>

<h3 id="namespacingandcoffeescript">Namespacing and CoffeeScript</h3>

<p>Here's how CoffeeScript works with Meteor's namespacing.</p>

<ul>
<li><p>Per the usual CoffeeScript convention, CoffeeScript variable are
file-scoped by default (visible only in the <code>.coffee</code> file where
they are defined.)</p></li>
<li><p>When writing a package, CoffeeScript-defined variables can be
exported like any other variable (see <a href="http://localhost:3000/#writingpackages">Writing
Packages</a>). Exporting a variable pulls it up to
package scope, meaning that it will be visible to all of the code in
your app or package (both <code>.js</code> and <code>.coffee</code> files).</p></li>
<li><p>Package-scope variables declared in <code>.js</code> files are visible in any
<code>.coffee</code> files in the same app or project.</p></li>
<li><p>There is no way to make a package-scope variable from a <code>.coffee</code>
file other than exporting it. We couldn't figure out a way to make
this fit naturally inside the CoffeeScript language. If you want to
use package-scope variables with CoffeeScript, one way is to make a
short <code>.js</code> file that declares all of your package-scope
variables. They can then be used and assigned to from <code>.coffee</code>
files.</p></li>
<li><p>If you want to share variables between <code>.coffee</code> files in the same
package, and don't want to separately declare them in a <code>.js</code> file,
we have an experimental feature that you may like. An object called
<code>share</code> is visible in CoffeeScript code and is shared across all
<code>.coffee</code> files in the same package. So, you can write <code>share.foo</code>
for a value that is shared between all CoffeeScript code in a
package, but doesn't escape that package.</p></li>
</ul>

<p>Heavy CoffeeScript users, please let us know how this arrangement
works for you, whether <code>share</code> is helpful for you, and anything else
you'd like to see changed.</p>





























<h2 id="d3"><code>d3</code></h2>

<p><a href="http://d3js.org/" target="_blank">D3.js</a> is a JavaScript library for manipulating
documents based on data. D3 helps you bring data to life using HTML, SVG
and CSS. D3's emphasis on web standards gives you the full capabilities
of modern browsers without tying yourself to a proprietary framework,
combining powerful visualization components and a data-driven approach
to DOM manipulation.</p>

<p>The <code>d3</code> package adds the D3 library to the client JavaScript
bundle. It has no effect on the server.</p>





























<h2 id="forcessl"><code>force-ssl</code></h2>

<p>This package causes Meteor to redirect insecure connections (HTTP) to a
secure URL (HTTPS). Use this package to ensure that communication to the
server is always encrypted to protect users from active spoofing
attacks.</p>

<p>To simplify development, unencrypted connections from <code>localhost</code> are
always accepted over HTTP.</p>

<p>Application bundles (<code>meteor bundle</code>) do not include an HTTPS server or
certificate. A proxy server that terminates SSL in front of a Meteor
bundle must set the standard <code>x-forwarded-proto</code> header for the
<code>force-ssl</code> package to work.</p>

<p>Applications deployed to <code>meteor.com</code> subdomains with
<code>meteor deploy</code> are automatically served via HTTPS using Meteor's
certificate.</p>





























<h2 id="jquery"><code>jquery</code></h2>

<p><a href="http://jquery.com/" target="_blank">jQuery</a> is a fast and concise JavaScript
Library that simplifies HTML document traversing, event handling,
animating, and Ajax interactions for rapid web development.</p>

<p>The <code>jquery</code> package adds the jQuery library to the client JavaScript
bundle. It has no effect on the server.</p>

<p>In addition to the <code>jquery</code> package, Meteor provides several jQuery
plugins as separate packages. These include:</p>

<ul>
<li><a href="https://github.com/balupton/history.js" target="_blank"><code>jquery-history</code></a></li>
<li><a href="http://layout.jquery-dev.net/" target="_blank"><code>jquery-layout</code></a></li>
<li><a href="http://imakewebthings.com/jquery-waypoints/" target="_blank"><code>jquery-waypoints</code></a></li>
</ul>































<h2 id="less"><code>less</code></h2>

<p><a href="http://lesscss.org/" target="_blank">LESS</a> extends CSS with dynamic behavior such as variables, mixins,
operations and functions. It allows for more compact stylesheets and
helps reduce code duplication in CSS files.</p>

<p>With the <code>less</code> package installed, <code>.less</code> files in your application are
automatically compiled to CSS and the results are included in the client CSS
bundle.</p>















<div class="note">
    









<p>If you want to <code>@import</code> a file, give it the extension <code>.lessimport</code>
to prevent Meteor from processing it independently.</p>










  </div>















































<h2 id="random"><code>random</code></h2>

<p>The <code>random</code> package provides several functions for generating random
numbers. It uses a Meteor-provided random number generator that does not depend
on the browser's facilities.</p>

<dl class="callbacks">
























































<dt><span class="name">Random.id()</span>
  
</dt>
<dd><p>Returns a unique identifier, such as <code>"Jjwjg6gouWLXhMGKW"</code>, that is likely to
be unique in the whole world.</p></dd>

















































































































<dt><span class="name">Random.fraction()</span>
  
</dt>
<dd><p>Returns a number between 0 and 1, like <code>Math.random</code>.</p></dd>

















































































































<dt><span class="name">Random.choice(arrayOrString)</span>
  
</dt>
<dd><p>Returns a random element of the given array or string.</p></dd>

















































































































<dt><span class="name">Random.hexString(n)</span>
  
</dt>
<dd><p>Returns a random string of <code>n</code> hexadecimal digits.</p></dd>
























































</dl>















<div class="note">
    









<p>In the current implementation, random values do not come from a
cryptographically strong pseudorandom number generator. Future releases will
improve this, particularly on the server.</p>










  </div>















































<h2 id="spiderable"><code>spiderable</code></h2>

<p>The <code>spiderable</code> package is a temporary solution to allow web search engines to
index a Meteor application. It uses the <a href="https://developers.google.com/webmasters/ajax-crawling/" target="_blank">AJAX Crawling
specification</a>
published by Google to serve HTML to compatible spiders (Google, Bing, Yandex,
and more).</p>

<p>When a spider requests an HTML snapshot of a page the Meteor server runs the
client half of the application inside <a href="http://phantomjs.org/" target="_blank">phantomjs</a>, a
headless browser, and returns the full HTML generated by the client code.</p>















<div class="warning">
    









<p>This is a temporary approach to allow Meteor applications to be
searchable. Expect significant changes to this package.</p>










  </div>















<p>In order to have links between multiple pages on a site visible to spiders, apps
must use real links (eg <code>&lt;a href="/about"&gt;</code>) rather than simply re-rendering
portions of the page when an element is clicked. Apps should render their
content based on the URL of the page and can use <a href="https://developer.mozilla.org/en-US/docs/DOM/Manipulating_the_browser_history" target="_blank">HTML5
pushState</a>
to alter the URL on the client without triggering a page reload. See the <a href="http://meteor.com/examples/todos" target="_blank">Todos
example</a> for a demonstration.</p>















<div class="warning">
    









<p>If you deploy your application with <code>meteor bundle</code>, you must install
<code>phantomjs</code> (<a href="http://phantomjs.org/" target="_blank">http://phantomjs.org</a>) somewhere in your
<code>$PATH</code>. If you use <code>meteor deploy</code> this is already taken care of.</p>










  </div>













































<h2 id="stylus"><code>stylus</code></h2>

<p><a href="http://learnboost.github.com/stylus/" target="_blank">Stylus</a> is a CSS pre-processor with a simple syntax and expressive
dynamic behavior. It allows for more compact stylesheets and
helps reduce code duplication in CSS files.</p>

<p>With the <code>stylus</code> package installed, <code>.styl</code> files in your application are
automatically compiled to CSS and the results are included in the client
CSS bundle.</p>

<p>The <code>stylus</code> package also includes <code>nib</code> support. Add <code>@import 'nib'</code> to
your <code>.styl</code> files to enable cross-browser mixins such as
<code>linear-gradient</code> and <code>border-radius</code>.</p>

<p>See <a href="http://visionmedia.github.com/nib" target="_blank">http://visionmedia.github.com/nib</a> for documentation of the nib extensions of Stylus.</p>





























<h2 id="showdown"><code>showdown</code></h2>

<!-- XXX rename to markdown when we rename the package -->

<p>This package lets you use Markdown in your templates. It's easy: just
put your markdown inside
<code>{{#markdown}}</code> ... <code>{{/markdown}}</code>
tags. You can still use all of the usual Meteor template features
inside a Markdown block, such <code>#each</code>, and you still get reactivity.</p>

<!-- XXX include an example -->































<h2 id="underscore"><code>underscore</code></h2>

<p><a href="http://underscorejs.org/" target="_blank">Underscore</a> is a utility-belt library for 
JavaScript that provides support for functional programming. It is 
invaluable for writing clear, concise JavaScript in a functional style.</p>

<p>The <code>underscore</code> package defines the <code>_</code> namespace on both the client
and the server.</p>















<div class="warning">
    









<p>Currently, underscore is included in all projects, as the Meteor
core depends on it. _ is available in the global namespace on both the
client and the server even if you do not include this package. However
if you do use underscore in your application, you should still add the
package as we will remove the default underscore in the future.</p>










  </div>






























    <div>














<h2 id="commandline"><a href="http://localhost:3000/#commandline" class="selflink"><span>Command line</span></a></h2>















<!-- XXX some intro text? -->

<h3 id="meteorhelp">meteor help</h3>

<p>Get help on meteor command line usage. Running <code>meteor help</code> by
itself will list the common meteor
commands. Running <code>meteor help <i>command</i></code> will print
detailed help about the command.</p>

<h3 id="meteorrun">meteor run</h3>

<p>Run a meteor development server in the current project. Searches
upward from the current directory for the root directory of a Meteor
project. Whenever you change any of the application's source files, the
changes are automatically detected and applied to the running
application.</p>

<p>You can use the application by pointing your web browser at
<a href="./Documentation - Meteor_files/Documentation - Meteor.htm" target="_blank">localhost:3000</a>. No internet connection is
required.</p>

<p>This is the default command. Simply running <code>meteor</code> is the
same as <code>meteor run</code>.</p>

<p>To pass additional options to Node.js use the <code>NODE_OPTIONS</code> environment variable.
For example: <code>NODE_OPTIONS='--debug'</code> or <code>NODE_OPTIONS='--debug-brk'</code></p>

<p>Run <code>meteor help run</code> to see the full list of options.</p>

<h3 id="meteorcreate">meteor create <i>name</i></h3>

<p>Create a new Meteor project. Makes a subdirectory named <em>name</em>
and copies in the template app. You can pass an absolute or relative
path.</p>

<h3 id="meteordeploy">meteor deploy <i>site</i></h3>

<p>Deploy the project in your current directory to Meteor's servers.</p>

<p>You can deploy to any available name
under <code>meteor.com</code> without any additional
configuration, for example, <code>myapp.meteor.com</code>.  If
you deploy to a custom domain, such as <code>myapp.mydomain.com</code>,
then you'll need to make sure the DNS for that domain is configured to
point at <code>origin.meteor.com</code>.</p>

<p>You can deploy in debug mode by passing <code>--debug</code>. This
will leave your source code readable by your favorite in-browser
debugger, just like it is in local development mode.</p>

<p>To delete an application you've deployed, specify
the <code>--delete</code> option along with the site.</p>

<p>To add an administrative password to your deployment, include
the <code>--password</code> option.  Meteor will prompt
for a password.  Once set, any future <code>meteor deploy</code> to
the same domain will require that you provide the password.  The same
password protects access to <code>meteor mongo</code>
and <code>meteor logs</code>.  You can change the password by
running <code>meteor deploy --password</code> again,
which will first prompt for the current password, then for a new
password.</p>















<div class="warning">
    





<p>Password protection only applies to administrative actions with the
Meteor command.  It does not prevent access to your deployed
website.  Also, this all is a temporary hack until we have
full-featured Meteor accounts.</p>






  </div>





























<div class="warning">
    





<p>If you use a domain name other than <code>meteor.com</code>
you must ensure that the name resolves
to <code>origin.meteor.com</code>.  If you want a top-level
domain like myapp.com, you'll need a DNS A record, matching the IP
address of origin.meteor.com.</p>






  </div>















<p>You can add information specific to a particular deployment of your application
by using the <code>--settings</code> option.  The argument to <code>--settings</code> is a file
containing any JSON string.  The object in your settings file will appear on the
server side of your application in <a href="http://localhost:3000/#meteor_settings"><code>Meteor.settings</code></a>.</p>

<p>Settings are persistent.  When you redeploy your app, the old value will be
preserved unless you explicitly pass new settings using the <code>--settings</code> option.
To unset <code>Meteor.settings</code>, pass an empty settings file.</p>

<h3 id="meteorlogs">meteor logs <i>site</i></h3>

<p>Retrieves the server logs for the named Meteor application.</p>

<p>Meteor redirects the output of <code>console.log()</code> in your
server code into a logging server.  <code>meteor logs</code>
displays those logs.  In client code, the output
of <code>console.log()</code> is available in your web browser's
inspector, just like any other client-side JavaScript.</p>

<h3 id="meteorupdate">meteor update</h3>

<p>Sets the version of Meteor to use with the current project. If a
release is specified with <code>--release</code>, set the project to use that
version. Otherwise download and use the latest release of Meteor.</p>

<p>Every project is pinned to a specific release of Meteor. You can temporarily try
using your package with another release by passing the <code>--release</code> option to any
command; <code>meteor update</code> simply changes the pinned release.</p>

<h3 id="meteoradd">meteor add <i>package</i></h3>

<p>Add packages to your Meteor project. You can add multiple packages
with one command. For a list of the available packages, run <code>meteor
list</code>.</p>

<h3 id="meteorremove">meteor remove <i>package</i></h3>

<p>Removes a package previously added to your Meteor project. For a
list of the packages that your application is currently using, run
<code>meteor list --using</code>.</p>

<h3 id="meteorlist">meteor list</h3>

<p>Without arguments, lists all available Meteor packages. To add one of
these packages to your project, run <code>meteor add <i>package</i></code>.</p>

<p>With <code>--using</code>, list the packages that you have added to your project.</p>

<h3 id="meteormongo">meteor mongo</h3>

<p>Open a MongoDB shell on your local development database, so that you
can view or manipulate it directly.</p>















<div class="warning">
    





<p>For now, you must already have your application running locally
with <code>meteor run</code>. This will be easier in the future.</p>






  </div>















<h3 id="meteorreset">meteor reset</h3>

<p>Reset the current project to a fresh state. Removes the local
mongo database.</p>















<div class="warning">
    





<p>This deletes your data! Make sure you do not have any information you
care about in your local mongo database by running <code>meteor
mongo</code>. From the mongo shell, use <code>show collections</code>
and <code>db.<i>collection</i>.find()</code> to inspect your data.</p>






  </div>





























<div class="warning">
    





<p>For now, you can not run this while a development server is
running. Quit all running meteor applications before running this.</p>






  </div>















<h3 id="meteorbundle">meteor bundle</h3>

<p>Package the application up for deployment. The output is a tarball
that includes everything necessary to run the
application. See <code>README</code> in the tarball for details.</p>

<p>You can use this to host a Meteor application on your own server,
instead of deploying to Meteor's servers.  You will have to deal with
logging, monitoring, backups, load-balancing, etc, all of which we
handle for you if you use <code>meteor deploy</code>.</p>
</div>
  </div></body></html>