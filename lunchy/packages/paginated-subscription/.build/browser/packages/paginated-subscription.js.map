{"version":3,"file":"\\packages\\paginated-subscription.js","sources":["paginated-subscription/paginated_subscription.js"],"names":[],"mappings":";;;;;;;;AAAA,iD;AACA,yB;AACA,wB;AACA,+C;AACA,mB;AACA,gD;AACA,C;;AAEA,2D;AACA,iC;AACA,sB;AACA,C;;AAEA,0D;AACA,gC;AACA,qB;AACA,C;;AAEA,0D;AACA,wC;AACA,C;;AAEA,a;AACA,4D;AACA,wB;AACA,C;;AAEA,iE;AACA,8B;AACA,iC;AACA,C;;AAEA,yD;AACA,gF;AACA,0E;AACA,6B;AACA,kC;AACA,C;;AAEA,0D;AACA,6B;AACA,iC;AACA,C;;;AAGA,gD;AACA,2E;AACA,sD;AACA,2B;AACA,E;AACA,wD;AACA,E;AACA,6B;AACA,6C;AACA,6C;AACA,O;AACA,I;AACA,iE;AACA,mD;AACA,Q;AACA,iC;AACA,K;AACA,E;AACA,gB;AACA,C","sourcesContent":["PaginatedSubscriptionHandle = function(perPage) {\r\n  this.perPage = perPage;\r\n  this._limit = perPage;\r\n  this._limitListeners = new Deps.Dependency();\r\n  this._loaded = 0;\r\n  this._loadedListeners = new Deps.Dependency();\r\n}\r\n\r\nPaginatedSubscriptionHandle.prototype.loaded = function() {\r\n  this._loadedListeners.depend();\r\n  return this._loaded;\r\n}\r\n\r\nPaginatedSubscriptionHandle.prototype.limit = function() {\r\n  this._limitListeners.depend();\r\n  return this._limit;\r\n}\r\n\r\nPaginatedSubscriptionHandle.prototype.ready = function() {\r\n  return this.loaded() === this.limit();\r\n}\r\n\r\n// deprecated\r\nPaginatedSubscriptionHandle.prototype.loading = function() {\r\n  return ! this.ready();\r\n}\r\n\r\nPaginatedSubscriptionHandle.prototype.loadNextPage = function() {\r\n  this._limit += this.perPage;\r\n  this._limitListeners.changed();\r\n}\r\n\r\nPaginatedSubscriptionHandle.prototype.done = function() {\r\n  // XXX: check if subs that are canceled before they are ready ever fire ready?\r\n  // if they do we need to increase loaded by perPage, not set it to limit\r\n  this._loaded = this._limit;\r\n  this._loadedListeners.changed();\r\n}\r\n\r\nPaginatedSubscriptionHandle.prototype.reset = function() {\r\n  this._limit = this.perPage;\r\n  this._limitListeners.changed();\r\n}\r\n\r\n\r\n// XXX: deal with last argument being a callback\r\nMeteor.subscribeWithPagination = function (/*name, arguments, perPage */) {\r\n  var args = Array.prototype.slice.call(arguments, 0);\r\n  var perPage = args.pop();\r\n  \r\n  var handle = new PaginatedSubscriptionHandle(perPage);\r\n  \r\n  Meteor.autorun(function() {\r\n    var ourArgs = _.map(args, function(arg) {\r\n      return _.isFunction(arg) ? arg() : arg;\r\n    });\r\n    \r\n    var subHandle = Meteor.subscribe.apply(this, ourArgs.concat([\r\n      handle.limit(), function() { handle.done(); }\r\n    ]));\r\n    handle.stop = subHandle.stop;\r\n  });\r\n  \r\n  return handle;\r\n}"]}