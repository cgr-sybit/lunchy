{"version":3,"file":"\\packages\\iron-router.js","sources":["iron-router/lib\\utils.js","iron-router/lib\\route.js","iron-router/lib\\route_controller.js","iron-router/lib\\router.js","iron-router/lib\\server\\route_controller.js","iron-router/lib\\server\\router.js"],"names":[],"mappings":";;;;;;;;AAAA,G;AACA,sD;AACA,G;;AAEA,W;;AAEA,G;AACA,mD;AACA,G;;AAEA,4B;AACA,oC;AACA,kB;AACA,yC;AACA,kB;AACA,M;AACA,gB;AACA,E;;AAEA,G;AACA,8E;AACA,+E;AACA,e;AACA,E;AACA,Y;AACA,uD;AACA,+D;AACA,E;AACA,qC;AACA,G;;AAEA,6C;AACA,6B;AACA,W;AACA,U;;AAEA,gC;AACA,kC;AACA,iB;AACA,4C;AACA,0B;AACA,e;AACA,yB;AACA,K;AACA,U;AACA,sB;AACA,G;;AAEA,uD;AACA,a;AACA,E;;AAEA,4C;AACA,+B;AACA,6B;AACA,E;;AAEA,G;AACA,uE;AACA,4E;AACA,+E;AACA,yD;AACA,G;;AAEA,2C;AACA,kD;AACA,4E;AACA,G;AACA,mD;AACA,6E;;AAEA,2B;AACA,0C;AACA,+B;AACA,G;;AAEA,oB;AACA,6B;AACA,G;;AAEA,oC;AACA,+B;AACA,qC;AACA,e;AACA,E;;AAEA,gC;AACA,W;AACA,c;AACA,kD;AACA,iB;AACA,M;AACA,e;AACA,E;;AAEA,+B;AACA,0B;AACA,wB;AACA,M;AACA,+C;AACA,E;;AAEA,sE;AACA,6B;AACA,uB;AACA,Q;AACA,kC;AACA,8B;AACA,G;;AAEA,mC;AACA,oD;AACA,K;AACA,E;;AAEA,+C;AACA,iB;AACA,gB;AACA,qB;;AAEA,0B;AACA,gC;;AAEA,sD;AACA,yC;AACA,Q;AACA,+B;AACA,qE;AACA,wE;AACA,K;AACA,G;;AAEA,iC;;AAEA,kD;;AAEA,oD;AACA,qD;AACA,wD;AACA,I;;AAEA,mB;AACA,qC;AACA,G;;AAEA,sC;AACA,kE;;AAEA,8C;;AAEA,qB;AACA,E;;AAEA,G;AACA,6C;AACA,E;AACA,2E;AACA,2E;AACA,G;;AAEA,0C;AACA,iB;AACA,yB;AACA,E;;AAEA,wC;AACA,iB;AACA,iD;AACA,E;;AAEA,mC;AACA,yD;AACA,E;;AAEA,iC;AACA,oB;AACA,+C;AACA,kC;AACA,c;AACA,E;;AAEA,oC;AACA,iC;AACA,U;AACA,yC;AACA,kB;AACA,mD;AACA,iB;AACA,G;;AAEA,c;AACA,E;;;;;;;;;;;;;;;;;;;AC/LA,E;AACA,6E;AACA,+E;AACA,6E;AACA,kE;AACA,G;;AAEA,0C;AACA,W;;AAEA,6C;;AAEA,gC;AACA,iE;;AAEA,4B;AACA,mC;;AAEA,yC;AACA,sC;;AAEA,uB;AACA,2B;;AAEA,2E;AACA,gD;;AAEA,mB;AACA,yC;AACA,uC;;AAEA,8C;AACA,uC;AACA,M;AACA,2B;;AAEA,iB;AACA,E;;AAEA,mB;AACA,qB;;AAEA,K;AACA,uB;AACA,I;AACA,qB;AACA,iB;AACA,K;;AAEA,wB;AACA,mB;AACA,Y;AACA,+B;;AAEA,mB;;AAEA,8C;AACA,kC;AACA,Y;AACA,8B;AACA,gC;AACA,2C;AACA,iC;AACA,4B;AACA,iB;AACA,iD;AACA,kE;AACA,iE;AACA,gC;AACA,qB;AACA,uC;AACA,qB;AACA,uC;AACA,+B;AACA,wE;AACA,iC;AACA,W;AACA,S;AACA,oC;AACA,gC;AACA,M;AACA,2E;AACA,K;;AAEA,gB;AACA,I;;AAEA,K;AACA,0E;AACA,8C;AACA,I;AACA,yB;AACA,oB;AACA,gB;AACA,K;;AAEA,2B;AACA,2B;;AAEA,mB;AACA,2B;AACA,mB;AACA,wB;AACA,W;AACA,c;;AAEA,W;AACA,oG;;AAEA,mD;AACA,wB;AACA,wE;AACA,gB;AACA,4D;AACA,mC;AACA,Y;AACA,2B;AACA,K;;AAEA,2B;;AAEA,qC;AACA,oB;AACA,8C;;AAEA,qC;;AAEA,sB;AACA,6D;AACA,4C;AACA,kE;AACA,S;AACA,K;;AAEA,kB;AACA,I;;AAEA,kC;AACA,sC;;AAEA,oC;;AAEA,6C;AACA,sE;;AAEA,sC;AACA,wD;;AAEA,+B;AACA,wB;;AAEA,gB;AACA,I;;AAEA,K;AACA,0D;AACA,I;AACA,yB;AACA,uB;AACA,gB;AACA,K;AACA,yB;AACA,kD;AACA,I;;AAEA,yB;AACA,kD;AACA,I;;AAEA,uC;AACA,a;AACA,sB;AACA,c;AACA,yB;AACA,gC;AACA,Y;AACA,a;AACA,gC;;AAEA,4B;AACA,0B;AACA,0B;AACA,wB;;AAEA,iC;AACA,4E;AACA,Y;AACA,8B;AACA,iB;AACA,iD;AACA,mE;AACA,gC;AACA,gC;AACA,0D;;AAEA,8C;AACA,yB;AACA,yB;AACA,yC;AACA,qC;AACA,6H;AACA,qB;AACA,kI;AACA,a;;AAEA,qE;AACA,mF;AACA,iD;AACA,yB;AACA,uC;AACA,W;AACA,S;AACA,iB;AACA,gB;AACA,4B;AACA,+D;AACA,8B;AACA,6E;AACA,+B;AACA,uE;AACA,a;;AAEA,6D;AACA,oE;AACA,iD;AACA,yB;AACA,W;AACA,U;;AAEA,8B;AACA,4D;AACA,uE;AACA,qB;;AAEA,kC;AACA,qC;AACA,O;;AAEA,iB;AACA,gD;AACA,uB;AACA,iD;AACA,O;AACA,K;AACA,I;AACA,wC;AACA,I;;AAEA,oC;AACA,yC;AACA,I;;AAEA,mC;AACA,0C;AACA,wB;AACA,wC;AACA,uC;AACA,I;;AAEA,2C;AACA,oB;AACA,e;AACA,uB;AACA,kB;AACA,c;AACA,kB;;AAEA,0C;AACA,mC;AACA,gC;;AAEA,0C;AACA,0C;AACA,8C;AACA,wB;AACA,sD;AACA,O;;AAEA,wB;AACA,M;;AAEA,8E;AACA,2C;AACA,yC;AACA,2C;AACA,iD;AACA,8C;AACA,iB;AACA,kB;AACA,0B;AACA,+B;AACA,O;AACA,I;AACA,wD;AACA,0B;AACA,qD;AACA,0D;AACA,gD;AACA,wB;AACA,K;;AAEA,0E;AACA,0B;;AAEA,oB;AACA,yE;;AAEA,4B;AACA,kD;AACA,0B;AACA,O;AACA,K;;AAEA,8D;AACA,wC;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AC5TA,+E;AACA,yB;AACA,+E;;AAEA,G;AACA,oD;AACA,G;;AAEA,0C;AACA,kB;;AAEA,yC;;AAEA,kC;AACA,oD;AACA,I;;AAEA,+B;AACA,6B;AACA,2B;AACA,qC;AACA,yC;AACA,8C;AACA,kB;;AAEA,6C;AACA,iD;AACA,+C;AACA,iD;AACA,E;;AAEA,iC;AACA,mC;AACA,E;AACA,uC;AACA,+B;AACA,mC;;AAEA,iD;AACA,qB;;AAEA,yB;AACA,gF;AACA,M;AACA,uC;AACA,uD;AACA,M;;AAEA,iE;AACA,4C;AACA,sB;AACA,wE;;AAEA,sF;;AAEA,oD;AACA,uB;AACA,c;AACA,sB;AACA,K;AACA,I;;AAEA,oB;AACA,uC;AACA,I;;AAEA,uB;AACA,uC;AACA,I;;AAEA,oB;AACA,wB;AACA,G;AACA,E;;AAEA,+B;AACA,K;AACA,qC;AACA,I;AACA,yE;AACA,K;;AAEA,iC;AACA,iE;AACA,uB;AACA,M;AACA,Q;AACA,8E;AACA,mB;;AAEA,wB;AACA,uD;AACA,8C;;AAEA,mB;AACA,iD;AACA,kC;AACA,a;AACA,O;AACA,uC;AACA,6C;AACA,iC;AACA,S;AACA,O;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACzGA,+E;AACA,gB;AACA,+E;AACA,iC;AACA,kB;AACA,E;AACA,0B;;AAEA,K;AACA,oE;AACA,6B;AACA,I;AACA,gB;AACA,K;AACA,mB;AACA,E;AACA,yB;AACA,kF;AACA,E;;AAEA,8D;;AAEA,wB;AACA,0B;;AAEA,K;AACA,4E;AACA,wE;AACA,I;AACA,4B;AACA,yB;AACA,gB;AACA,K;AACA,E;AACA,iC;AACA,oB;AACA,I;AACA,sC;AACA,oC;AACA,I;AACA,4C;AACA,kD;AACA,+B;AACA,kE;AACA,mC;AACA,W;AACA,Q;AACA,kC;AACA,O;AACA,O;AACA,I;AACA,gB;AACA,I;;;AAGA,K;AACA,I;AACA,kE;AACA,iF;AACA,I;AACA,wE;AACA,uE;AACA,6C;AACA,yB;AACA,gB;AACA,I;AACA,K;AACA,E;AACA,0C;AACA,2B;;AAEA,qB;AACA,iD;AACA,uB;AACA,qD;AACA,M;AACA,iE;AACA,I;AACA,gB;AACA,I;AACA,E;AACA,iC;AACA,+C;AACA,I;;AAEA,mC;AACA,iD;AACA,I;AACA,E;AACA,kC;AACA,gD;AACA,I;AACA,E;AACA,mC;AACA,iD;AACA,I;AACA,E;AACA,K;AACA,I;AACA,uE;AACA,wD;AACA,I;AACA,wE;AACA,sE;AACA,0D;AACA,gB;AACA,I;AACA,K;AACA,I;AACA,kC;AACA,mB;AACA,I;AACA,oD;AACA,iC;AACA,M;AACA,4D;AACA,e;AACA,M;AACA,0D;AACA,e;AACA,M;AACA,4B;AACA,O;AACA,I;AACA,iB;AACA,I;AACA,E;;AAEA,K;AACA,+E;AACA,+C;AACA,I;AACA,a;AACA,8B;AACA,4B;AACA,S;AACA,I;AACA,0B;AACA,0B;AACA,iB;AACA,K;;AAEA,sB;AACA,kC;AACA,6D;AACA,kB;AACA,gB;AACA,I;;AAEA,K;AACA,+E;AACA,iE;AACA,I;AACA,+C;AACA,iE;AACA,oB;AACA,gB;AACA,K;;AAEA,mC;AACA,c;;AAEA,mE;AACA,I;AACA,iC;AACA,sB;AACA,Q;AACA,6C;;AAEA,8B;AACA,4B;AACA,iB;AACA,I;;AAEA,+C;AACA,uC;AACA,qB;AACA,4I;AACA,gD;AACA,I;;AAEA,8C;AACA,uC;AACA,sB;AACA,yI;AACA,+C;AACA,I;;AAEA,0C;AACA,mB;AACA,4B;AACA,a;AACA,kB;AACA,qD;AACA,c;;AAEA,sB;AACA,0B;;AAEA,mB;AACA,mD;AACA,O;;AAEA,6B;AACA,mC;AACA,iD;;AAEA,4D;AACA,iC;AACA,c;AACA,e;AACA,O;AACA,K;;AAEA,W;AACA,I;;AAEA,kC;AACA,2C;AACA,I;;AAEA,yC;AACA,mD;AACA,I;;AAEA,6C;AACA,sE;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACpOA,qD;AACA,4B;AACA,iE;AACA,wC;AACA,0C;AACA,kC;AACA,I;;AAEA,oB;AACA,mB;AACA,oC;;AAEA,S;AACA,+E;;AAEA,0B;AACA,iH;;AAEA,2B;;AAEA,8B;;AAEA,yB;AACA,gC;AACA,e;AACA,O;;AAEA,wB;AACA,6B;AACA,8B;AACA,e;AACA,0B;AACA,K;AACA,I;;AAEA,uB;AACA,wB;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACtCA,qC;AACA,kC;;AAEA,kB;;AAEA,mB;AACA,Y;;AAEA,sD;AACA,6C;AACA,Q;AACA,2C;AACA,C;;AAEA,yC;AACA,mC;AACA,oB;AACA,8D;AACA,gC;AACA,8B;AACA,6C;AACA,uB;AACA,S;AACA,O;AACA,I;;AAEA,sB;AACA,mB;AACA,2B;AACA,gC;AACA,yC;AACA,I;;AAEA,wC;AACA,oB;AACA,uB;AACA,8B;AACA,qB;AACA,sB;AACA,kB;AACA,S;AACA,a;AACA,I;;AAEA,kC;AACA,oB;AACA,sD;;AAEA,0D;;AAEA,+D;AACA,oC;AACA,4D;AACA,a;AACA,K;;AAEA,gC;AACA,iD;;AAEA,yC;AACA,gC;AACA,qB;;AAEA,gD;AACA,2B;AACA,K;AACA,I;;AAEA,qB;AACA,I;;AAEA,yC;AACA,mB;AACA,I;;AAEA,6C;AACA,mB;AACA,G;AACA,G;;AAEA,0B","sourcesContent":["/**\r\n * Utility methods available privately to the package.\r\n */\r\n\r\nUtils = {};\r\n\r\n/**\r\n * Returns global on node or window in the browser.\r\n */\r\n\r\nUtils.global = function () {\r\n  if (typeof window !== 'undefined')\r\n    return window;\r\n  else if (typeof global !== 'undefined')\r\n    return global;\r\n  else\r\n    return null;\r\n};\r\n\r\n/**\r\n * Given the name of a property, resolves to the value. Works with namespacing\r\n * too. If first parameter is already a value that isn't a string it's returned\r\n * immediately.\r\n *\r\n * Examples:\r\n *  'SomeClass' => window.SomeClass || global.someClass\r\n *  'App.namespace.SomeClass' => window.App.namespace.SomeClass\r\n *\r\n * @param {String|Object} nameOrValue\r\n */\r\n\r\nUtils.resolveValue = function (nameOrValue) {\r\n  var global = Utils.global()\r\n    , parts\r\n    , ptr;\r\n\r\n  if (_.isString(nameOrValue)) {\r\n    parts = nameOrValue.split('.')\r\n    ptr = global;\r\n    for (var i = 0; i < parts.length; i++) {\r\n      ptr = ptr[parts[i]];\r\n      if (!ptr)\r\n        return undefined;\r\n    }\r\n  } else {\r\n    ptr = nameOrValue;\r\n  }\r\n\r\n  // final position of ptr should be the resolved value\r\n  return ptr;\r\n};\r\n\r\nUtils.hasOwnProperty = function (obj, key) {\r\n  var prop = {}.hasOwnProperty;\r\n  return prop.call(obj, key);\r\n};\r\n\r\n/**\r\n * Don't mess with this function. It's exactly the same as the compiled\r\n * coffeescript mechanism. If you change it we can't guarantee that our code\r\n * will work when used with Coffeescript. One exception is putting in a runtime\r\n * check that both child and parent are of type Function.\r\n */\r\n\r\nUtils.inherits = function (child, parent) {\r\n  if (Utils.typeOf(child) !== '[object Function]')\r\n    throw new Error('First parameter to Utils.inherits must be a function');\r\n   \r\n  if (Utils.typeOf(parent) !== '[object Function]')\r\n    throw new Error('Second parameter to Utils.inherits must be a function');\r\n\r\n  for (var key in parent) {\r\n    if (Utils.hasOwnProperty(parent, key))\r\n      child[key] = parent[key];\r\n  }\r\n\r\n  function ctor () {\r\n    this.constructor = child;\r\n  }\r\n\r\n  ctor.prototype = parent.prototype;\r\n  child.prototype = new ctor();\r\n  child.__super__ = parent.prototype;\r\n  return child;\r\n};\r\n\r\nUtils.toArray = function (obj) {\r\n  if (!obj)\r\n    return [];\r\n  else if (Utils.typeOf(obj) !== '[object Array]')\r\n    return [obj];\r\n  else\r\n    return obj;\r\n};\r\n\r\nUtils.typeOf = function (obj) {\r\n  if (obj && obj.typeName)\r\n    return obj.typeName;\r\n  else\r\n    return Object.prototype.toString.call(obj);\r\n};\r\n\r\nUtils.extend = function (Super, definition, onBeforeExtendPrototype) {\r\n  if (arguments.length === 1)\r\n    definition = Super;\r\n  else {\r\n    definition = definition || {};\r\n    definition.extend = Super;\r\n  }\r\n\r\n  return Utils.create(definition, {\r\n    onBeforeExtendPrototype: onBeforeExtendPrototype\r\n  });\r\n};\r\n\r\nUtils.create = function (definition, options) {\r\n  var Constructor\r\n    , extendFrom\r\n    , savedPrototype;\r\n\r\n  options = options || {};\r\n  definition = definition || {};\r\n\r\n  if (Utils.hasOwnProperty(definition, 'constructor'))\r\n    Constructor = definition.constructor;\r\n  else {\r\n    Constructor = function () {\r\n      if (Constructor.__super__ && Constructor.__super__.constructor)\r\n        return Constructor.__super__.constructor.apply(this, arguments);\r\n    }\r\n  }\r\n\r\n  extendFrom = definition.extend;\r\n\r\n  if (definition.extend) delete definition.extend;\r\n\r\n  var inherit = function (Child, Super, prototype) {\r\n    Utils.inherits(Child, Utils.resolveValue(Super));\r\n    if (prototype) _.extend(Child.prototype, prototype);\r\n  };\r\n\r\n  if (extendFrom) {\r\n    inherit(Constructor, extendFrom);\r\n  }\r\n\r\n  if (options.onBeforeExtendPrototype)\r\n    options.onBeforeExtendPrototype.call(Constructor, definition);\r\n\r\n  _.extend(Constructor.prototype, definition);\r\n\r\n  return Constructor;\r\n};\r\n\r\n/**\r\n * Assert that the given condition is truthy.\r\n *\r\n * @param {Boolean} condition The boolean condition to test for truthiness.\r\n * @param {String} msg The error message to show if the condition is falsy.\r\n */\r\n\r\nUtils.assert = function (condition, msg) {\r\n  if (!condition)\r\n    throw new Error(msg);\r\n};\r\n\r\nUtils.warn = function (condition, msg) {\r\n  if (!condition)\r\n    console && console.warn && console.warn(msg);\r\n};\r\n\r\nUtils.capitalize = function (str) {\r\n  return str[0].toUpperCase() + str.slice(1, str.length);\r\n};\r\n\r\nUtils.classify = function (str) {\r\n  var re = /_|-|\\./;\r\n  return _.map(str.split(re), function (word) {\r\n    return Utils.capitalize(word);\r\n  }).join('');\r\n};\r\n\r\nUtils.pick = function (/* args */) {\r\n  var args = _.toArray(arguments)\r\n    , arg;\r\n  for (var i = 0; i < args.length; i++) {\r\n    arg = args[i];\r\n    if (typeof arg !== 'undefined' && arg !== null)\r\n      return arg;\r\n  }\r\n\r\n  return null;\r\n};\r\n","/*\r\n * Inspiration and some code for the compilation of routes comes from pagejs.\r\n * The original has been modified to better handle hash fragments, and to store\r\n * the regular expression on the Route instance. Also, the resolve method has\r\n * been added to return a resolved path given a parameters object.\r\n */\r\n\r\nRoute = function (router, name, options) {\r\n  var path;\r\n\r\n  Utils.assert(router instanceof IronRouter);\r\n\r\n  Utils.assert(_.isString(name),\r\n    'Route constructor requires a name as the second parameter');\r\n\r\n  if (_.isFunction(options))\r\n    options = { handler: options };\r\n\r\n  options = this.options = options || {};\r\n  path = options.path || ('/' + name);\r\n\r\n  this.router = router;\r\n  this.originalPath = path;\r\n\r\n  if (_.isString(this.originalPath) && this.originalPath.charAt(0) !== '/')\r\n    this.originalPath = '/' + this.originalPath;\r\n\r\n  this.name = name;\r\n  this.where = options.where || 'client';\r\n  this.controller = options.controller;\r\n\r\n  if (typeof options.reactive !== 'undefined')\r\n    this.isReactive = options.reactive;\r\n  else\r\n    this.isReactive = true;\r\n\r\n  this.compile();\r\n};\r\n\r\nRoute.prototype = {\r\n  constructor: Route,\r\n\r\n  /**\r\n   * Compile the path. \r\n   *\r\n   *  @return {Route}\r\n   *  @api public\r\n   */\r\n\r\n  compile: function () {\r\n    var self = this\r\n      , path\r\n      , options = self.options;\r\n\r\n    this.keys = [];\r\n\r\n    if (self.originalPath instanceof RegExp) {\r\n      self.re = self.originalPath;\r\n    } else {\r\n      path = self.originalPath\r\n        .replace(/(.)\\/$/, '$1')\r\n        .concat(options.strict ? '' : '/?')\r\n        .replace(/\\/\\(/g, '(?:/')\r\n        .replace(/#/, '/?#')\r\n        .replace(\r\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,\r\n          function (match, slash, format, key, capture, optional){\r\n            self.keys.push({ name: key, optional: !! optional });\r\n            slash = slash || '';\r\n            return ''\r\n              + (optional ? '' : slash)\r\n              + '(?:'\r\n              + (optional ? slash : '')\r\n              + (format || '') \r\n              + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'\r\n              + (optional || '');\r\n          }\r\n        )\r\n        .replace(/([\\/.])/g, '\\\\$1')\r\n        .replace(/\\*/g, '(.*)');\r\n      \r\n      self.re = new RegExp('^' + path + '$', options.sensitive ? '' : 'i');\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Returns an array of parameters given a path. The array may have named\r\n   * properties in addition to indexed values.\r\n   *\r\n   * @param {String} path\r\n   * @return {Array}\r\n   * @api public\r\n   */\r\n\r\n  params: function (path) {\r\n    if (!path) return null;\r\n\r\n    var params = []\r\n      , m = this.exec(path)\r\n      , queryString\r\n      , keys = this.keys\r\n      , key\r\n      , value;\r\n\r\n    if (!m)\r\n      throw new Error('The route named \"' + this.name + '\" does not match the path \"' + path + '\"');\r\n\r\n    for (var i = 1, len = m.length; i < len; ++i) {\r\n      key = keys[i - 1];\r\n      value = typeof m[i] == 'string' ? decodeURIComponent(m[i]) : m[i];\r\n      if (key) {\r\n        params[key.name] = params[key.name] !== undefined ? \r\n          params[key.name] : value;\r\n      } else\r\n        params.push(value);\r\n    }\r\n\r\n    path = decodeURI(path);\r\n\r\n    queryString = path.split('?')[1];\r\n    if (queryString)\r\n      queryString = queryString.split('#')[0];\r\n\r\n    params.hash = path.split('#')[1];\r\n\r\n    if (queryString) {\r\n      _.each(queryString.split('&'), function (paramString) {\r\n        paramParts = paramString.split('=');\r\n        params[paramParts[0]] = decodeURIComponent(paramParts[1]);\r\n      });\r\n    }\r\n\r\n    return params;\r\n  },\r\n\r\n  normalizePath: function (path) {\r\n    var origin = Meteor.absoluteUrl();\r\n\r\n    path = path.replace(origin, '');\r\n\r\n    var queryStringIndex = path.indexOf('?');\r\n    path = ~queryStringIndex ? path.slice(0, queryStringIndex) : path;\r\n\r\n    var hashIndex = path.indexOf('#');\r\n    path = ~hashIndex ? path.slice(0, hashIndex) : path;\r\n\r\n    if (path.charAt(0) !== '/')\r\n      path = '/' + path;\r\n\r\n    return path;\r\n  },\r\n\r\n  /**\r\n   * Returns true if the path matches and false otherwise.\r\n   *\r\n   * @param {String} path\r\n   * @return {Boolean} \r\n   * @api public\r\n   */\r\n  test: function (path) {\r\n    return this.re.test(this.normalizePath(path));\r\n  },\r\n\r\n  exec: function (path) {\r\n    return this.re.exec(this.normalizePath(path));\r\n  },\r\n\r\n  resolve: function (params, options) {\r\n    var value\r\n      , isValueDefined\r\n      , result\r\n      , wildCardCount = 0\r\n      , path = this.originalPath\r\n      , hash\r\n      , query\r\n      , isMissingParams = false;\r\n\r\n    options = options || {};\r\n    params = params || [];\r\n    query = options.query;\r\n    hash = options.hash;\r\n\r\n    if (path instanceof RegExp) {\r\n      throw new Error('Cannot currently resolve a regular expression path');\r\n    } else {\r\n      path = this.originalPath\r\n        .replace(\r\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,\r\n          function (match, slash, format, key, capture, optional) {\r\n            slash = slash || '';\r\n            value = params[key];\r\n            isValueDefined = typeof value !== 'undefined';\r\n\r\n            if (optional && !isValueDefined) {\r\n              slash = '';\r\n              value = '';\r\n            } else if (!isValueDefined) {\r\n              isMissingParams = true;\r\n              console.warn('You called Route.prototype.resolve with a missing parameter. \"' + key + '\" not found in params');\r\n              return;\r\n              //throw new Error('You called Route.prototype.resolve with a missing parameter. \"' + key + '\" not found in params');\r\n            }\r\n\r\n            value = _.isFunction(value) ? value.call(params) : value;\r\n            var escapedValue = _.map(String(value).split('/'), function (segment) {\r\n              return encodeURIComponent(segment);\r\n            }).join('/');\r\n            return slash + escapedValue\r\n          }\r\n        )\r\n        .replace(\r\n          /\\*/g,\r\n          function (match) {\r\n            if (typeof params[wildCardCount] === 'undefined') {\r\n              throw new Error(\r\n                'You are trying to access a wild card parameter at index ' + \r\n                wildCardCount +\r\n                ' but the value of params at that index is undefined');\r\n            }\r\n\r\n            var paramValue = String(params[wildCardCount++]);\r\n            return _.map(paramValue.split('/'), function (segment) {\r\n              return encodeURIComponent(segment);\r\n            }).join('/');\r\n          }\r\n        );\r\n\r\n      if (_.isObject(query)) {\r\n        query = _.map(_.pairs(query), function (queryPart) {\r\n          return queryPart[0] + '=' + encodeURIComponent(queryPart[1]);\r\n        }).join('&');\r\n\r\n        if (query && query.length)\r\n          path = path + '/?' + query;\r\n      }\r\n\r\n      if (hash) {\r\n        hash = encodeURI(hash.replace('#', ''));\r\n        path = query ? \r\n          path + '#' + hash : path + '/#' + hash;\r\n      }\r\n    }\r\n    \r\n    return isMissingParams ? '/' : path;\r\n  },\r\n\r\n  path: function (params, options) {\r\n    return this.resolve(params, options);\r\n  },\r\n\r\n  url: function (params, options) {\r\n    var path = this.path(params, options);\r\n    if (path[0] === '/')\r\n      path = path.slice(1, path.length);\r\n    return Meteor.absoluteUrl() + path;\r\n  },\r\n\r\n  getController: function (path, options) {\r\n    var self = this;\r\n    var handler\r\n      , controllerClass\r\n      , controller\r\n      , action\r\n      , routeName;\r\n\r\n    var resolveValue = Utils.resolveValue;\r\n    var classify = Utils.classify; \r\n    var toArray = Utils.toArray;\r\n\r\n    var findController = function (name) {\r\n      var controller = resolveValue(name);\r\n      if (typeof controller === 'undefined') {\r\n        throw new Error(\r\n          'controller \"' + name + '\" is not defined');\r\n      }\r\n\r\n      return controller;\r\n    };\r\n\r\n    options = _.extend({}, this.router.options, this.options, options || {}, {\r\n      before: toArray(this.options.before),\r\n      after: toArray(this.options.after),\r\n      unload: toArray(this.options.unload),\r\n      waitOn: toArray(this.router.options.waitOn)\r\n        .concat(toArray(this.options.waitOn)),\r\n      path: path,\r\n      route: this,\r\n      router: this.router,\r\n      params: this.params(path)\r\n    });\r\n    \r\n    // case 1: controller option is defined on the route\r\n    if (this.controller) {\r\n      controllerClass = _.isString(this.controller) ?\r\n        findController(this.controller) : this.controller;\r\n      controller = new controllerClass(options);\r\n      return controller;\r\n    }\r\n\r\n    // case 2: intelligently find the controller class in global namespace\r\n    routeName = this.name;\r\n\r\n    if (routeName) {\r\n      controllerClass = resolveValue(classify(routeName + 'Controller'));\r\n\r\n      if (controllerClass) {\r\n        controller = new controllerClass(options);\r\n        return controller;\r\n      }\r\n    }\r\n\r\n    // case 3: nothing found so create an anonymous controller\r\n    return new RouteController(options);\r\n  }\r\n};\r\n","/*****************************************************************************/\r\n/* IronRouteController */\r\n/*****************************************************************************/\r\n\r\n/**\r\n * Base class for client and server RouteController.\r\n */\r\n\r\nIronRouteController = function (options) {\r\n  var self = this;\r\n\r\n  options = this.options = options || {};\r\n\r\n  var getOption = function (key) {\r\n    return Utils.pick(self.options[key], self[key]);\r\n  };\r\n\r\n  this.router = options.router;\r\n  this.route = options.route;\r\n  this.path = options.path;\r\n  this.params = options.params || [];\r\n  this.where = options.where || 'client';\r\n  this.action = options.action || this.action;\r\n  this.hooks = {};\r\n\r\n  options.load = Utils.toArray(options.load);\r\n  options.before = Utils.toArray(options.before);\r\n  options.after = Utils.toArray(options.after);\r\n  options.unload = Utils.toArray(options.unload);\r\n};\r\n\r\nIronRouteController.prototype = {\r\n  constructor: IronRouteController,\r\n  \r\n  runHooks: function (hookName, more) {\r\n    var ctor = this.constructor\r\n      , more = Utils.toArray(more);\r\n\r\n    var collectInheritedHooks = function (ctor) {\r\n      var hooks = [];\r\n\r\n      if (ctor.__super__)\r\n        hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor));\r\n      \r\n      return ctor.prototype[hookName] ?\r\n        hooks.concat(ctor.prototype[hookName]) : hooks;\r\n    };\r\n\r\n    var prototypeHooks = collectInheritedHooks(this.constructor);\r\n    var routeHooks = this.options[hookName];\r\n    var globalHooks = \r\n      this.route ? this.router.getHooks(hookName, this.route.name) : [];\r\n\r\n    var allHooks = globalHooks.concat(routeHooks).concat(prototypeHooks).concat(more);\r\n\r\n    for (var i = 0, hook; hook = allHooks[i]; i++) {\r\n      if (this.stopped)\r\n        break;\r\n      hook.call(this);\r\n    }\r\n  },\r\n\r\n  run: function () {\r\n    throw new Error('not implemented');\r\n  },\r\n\r\n  action: function () {\r\n    throw new Error('not implemented');\r\n  },\r\n\r\n  stop: function() {\r\n    this.stopped = true;\r\n  }\r\n};\r\n\r\n_.extend(IronRouteController, {\r\n  /**\r\n   * Inherit from IronRouteController\r\n   *\r\n   * @param {Object} definition Prototype properties for inherited class.\r\n   */\r\n\r\n  extend: function (definition) {\r\n    return Utils.extend(this, definition, function (definition) {\r\n      var klass = this;\r\n      \r\n      /*\r\n        Allow calling a class method from javascript, directly in the subclass\r\n        definition.\r\n\r\n        Instead of this:\r\n          MyController = RouteController.extend({...});\r\n          MyController.before(function () {});\r\n\r\n        You can do:\r\n          MyController = RouteController.extend({\r\n            before: function () {}\r\n          });\r\n       \r\n        And in Coffeescript you can do:\r\n         MyController extends RouteController\r\n           @before function () {}\r\n       */\r\n    });\r\n  }\r\n});\r\n","/*****************************************************************************/\r\n/* IronRouter */\r\n/*****************************************************************************/\r\nIronRouter = function (options) {\r\n  var self = this;\r\n  \r\n  this.configure(options);\r\n\r\n  /**\r\n   * The routes array which doubles as a named route index by adding\r\n   * properties to the array.\r\n   *\r\n   * @api public\r\n   */\r\n  this.routes = [];\r\n  \r\n  this._globalHooks = {};\r\n  _.each(IronRouter.HOOK_TYPES, function(type) { self._globalHooks[type] = []; });\r\n};\r\n\r\nIronRouter.HOOK_TYPES = ['load', 'before', 'after', 'unload'];\r\n\r\nIronRouter.prototype = {\r\n  constructor: IronRouter,\r\n\r\n  /**\r\n   * Configure instance with options. This can be called at any time. If the\r\n   * instance options object hasn't been created yet it is created here.\r\n   *\r\n   * @param {Object} options\r\n   * @return {IronRouter}\r\n   * @api public\r\n   */\r\n  \r\n  configure: function (options) {\r\n    var self = this;\r\n    \r\n    this.options = this.options || {};\r\n    _.extend(this.options, options);\r\n    \r\n    // e.g. before: fn OR before: [fn1, fn2]\r\n    _.each(IronRouter.HOOK_TYPES, function(type) {\r\n      if (self.options[type]) {\r\n        _.each(Utils.toArray(self.options[type]), function(hook) {\r\n          self.addHook(type, hook);\r\n        });\r\n        \r\n        delete self.options[type];\r\n      }\r\n    });\r\n    \r\n    return this;\r\n  },\r\n\r\n\r\n  /**\r\n   *\r\n   * Add a hook to all routes. The hooks will apply to all routes,\r\n   * unless you name routes to include or exclude via `only` and `except` options\r\n   *\r\n   * @param {String} [type] one of 'load', 'unload', 'before' or 'after'\r\n   * @param {Object} [options] Options to controll the hooks [optional]\r\n   * @param {Function} [hook] Callback to run\r\n   * @return {IronRouter}\r\n   * @api public\r\n   *\r\n   */\r\n  \r\n  addHook: function(type, hook, options) {\r\n    options = options || {}\r\n\r\n    if (options.only)\r\n      options.only = Utils.toArray(options.only);\r\n    if (options.except)\r\n      options.except = Utils.toArray(options.except);\r\n      \r\n    this._globalHooks[type].push({options: options, hook: hook});\r\n    \r\n    return this;\r\n  },\r\n  \r\n  load: function(hook, options) {\r\n    return this.addHook('load', hook, options);\r\n  },\r\n\r\n  before: function(hook, options) {\r\n    return this.addHook('before', hook, options);\r\n  },\r\n  \r\n  after: function(hook, options) {\r\n    return this.addHook('after', hook, options);\r\n  },\r\n  \r\n  unload: function(hook, options) {\r\n    return this.addHook('unload', hook, options);\r\n  },\r\n  \r\n  /**\r\n   *\r\n   * Fetch the list of global hooks that apply to the given route name.\r\n   * Hooks are defined by the .addHook() function above.\r\n   *\r\n   * @param {String} [type] one of 'load', 'unload', 'before' or 'after'\r\n   * @param {String} [name] the name of the route we are interested in\r\n   * @return {[Function]} [hooks] an array of hooks to run\r\n   * @api public\r\n   *\r\n   */\r\n    \r\n  getHooks: function(type, name) {\r\n    var hooks = [];\r\n    \r\n    _.each(this._globalHooks[type], function(hook) {\r\n      var options = hook.options;\r\n      \r\n      if (options.except && _.include(options.except, name))\r\n        return;\r\n      \r\n      if (options.only && ! _.include(options.only, name))\r\n        return;\r\n      \r\n      hooks.push(hook.hook);\r\n    });\r\n    \r\n    return hooks;\r\n  },\r\n  \r\n\r\n  /**\r\n   * Convenience function to define a bunch of routes at once. In the future we\r\n   * might call the callback with a custom dsl.\r\n   *\r\n   * Example:\r\n   *  Router.map(function () {\r\n   *    this.route('posts');\r\n   *  });\r\n   *\r\n   *  @param {Function} cb\r\n   *  @return {IronRouter}\r\n   *  @api public\r\n   */\r\n\r\n  map: function (cb) {\r\n    Utils.assert(_.isFunction(cb),\r\n           'map requires a function as the first parameter');\r\n    cb.call(this);\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Define a new route. You must name the route, but as a second parameter you\r\n   * can either provide an object of options or a Route instance.\r\n   *\r\n   * @param {String} name The name of the route\r\n   * @param {Object} [options] Options to pass along to the route\r\n   * @return {Route}\r\n   * @api public\r\n   */\r\n\r\n  route: function (name, options) {\r\n    var route;\r\n\r\n    Utils.assert(_.isString(name), 'name is a required parameter');\r\n    \r\n    if (options instanceof Route)\r\n      route = options;\r\n    else\r\n      route = new Route(this, name, options);\r\n\r\n    this.routes[name] = route;\r\n    this.routes.push(route);\r\n    return route;\r\n  },\r\n\r\n  path: function (routeName, params, options) {\r\n    var route = this.routes[routeName];\r\n    Utils.warn(route,\r\n     'You called Router.path for a route named ' + routeName + ' but that that route doesn\\'t seem to exist. Are you sure you created it?');\r\n    return route && route.path(params, options);\r\n  },\r\n\r\n  url: function (routeName, params, options) {\r\n    var route = this.routes[routeName];\r\n    Utils.warn(route, \r\n      'You called Router.url for a route named \"' + routeName + '\" but that route doesn\\'t seem to exist. Are you sure you created it?');\r\n    return route && route.url(params, options);\r\n  },\r\n\r\n  dispatch: function (path, options, cb) {\r\n    var self = this\r\n      , routes = self.routes\r\n      , route\r\n      , controller\r\n      , where = Meteor.isClient ? 'client' : 'server'\r\n      , i = 0;\r\n\r\n    function next () {\r\n      route = routes[i++];\r\n\r\n      if (!route) {\r\n        return self.onRouteNotFound(path, options);\r\n      }\r\n\r\n      if (route.test(path)) {\r\n        if (route.where !== where) \r\n          return self.onUnhandled(path, options);\r\n\r\n        var controller = route.getController(path, options);\r\n        self.run(controller, cb);\r\n      } else {\r\n        next();\r\n      }\r\n    }\r\n\r\n    next();\r\n  },\r\n\r\n  run: function (controller, cb) {\r\n    throw new Error('run not implemented');\r\n  },\r\n\r\n  onUnhandled: function (path, options) {\r\n    throw new Error('onUnhandled not implemented');\r\n  },\r\n\r\n  onRouteNotFound: function (path, options) {\r\n    throw new Error('Oh no! No route found for path: \"' + path + '\"');\r\n  }\r\n};\r\n","RouteController = Utils.extend(IronRouteController, {\r\n  constructor: function () {\r\n    RouteController.__super__.constructor.apply(this, arguments);\r\n    this.request = this.options.request;\r\n    this.response = this.options.response;\r\n    this.next = this.options.next;\r\n  },\r\n\r\n  run: function () {\r\n    var self = this\r\n      , args = _.toArray(arguments);\r\n\r\n    try {\r\n      var action = _.isFunction(this.action) ? this.action : this[this.action];\r\n\r\n      Utils.assert(action,\r\n        \"Uh oh, you don't seem to have an action named \\\"\" + this.action + \"\\\" defined on your RouteController\");\r\n\r\n      this.stopped = false;\r\n\r\n      this.runHooks('before');\r\n\r\n      if (this.stopped) {\r\n        this.isFirstRun = false;\r\n        return;\r\n      }\r\n\r\n      action.call(this);\r\n      this.runHooks('after');\r\n      this.isFirstRun = false;\r\n    } finally {\r\n      this.response.end();\r\n    }\r\n  },\r\n\r\n  action: function () {\r\n    this.response.end();\r\n  }\r\n});\r\n","var connect = Npm.require('connect');\r\nvar Fiber = Npm.require('fibers');\r\n\r\nvar root = global;\r\n\r\nvar connectHandlers\r\n  , connect;\r\n\r\nif (typeof __meteor_bootstrap__.app !== 'undefined') {\r\n  connectHandlers = __meteor_bootstrap__.app;\r\n} else {\r\n  connectHandlers = WebApp.connectHandlers;\r\n}\r\n\r\nServerRouter = Utils.extend(IronRouter, {\r\n  constructor: function (options) {\r\n    var self = this;\r\n    ServerRouter.__super__.constructor.apply(this, arguments);\r\n    Meteor.startup(function () {\r\n      setTimeout(function () {\r\n        if (self.options.autoStart !== false)\r\n          self.start();\r\n      });\r\n    });\r\n  },\r\n\r\n  start: function () {\r\n    connectHandlers\r\n      .use(connect.query())\r\n      .use(connect.bodyParser())\r\n      .use(_.bind(this.onRequest, this));\r\n  },\r\n\r\n  onRequest: function (req, res, next) {\r\n    var self = this;\r\n    Fiber(function () {\r\n      self.dispatch(req.url, {\r\n        request: req,\r\n        response: res,\r\n        next: next\r\n      });\r\n    }).run();\r\n  },\r\n\r\n  run: function (controller, cb) {\r\n    var self = this;\r\n    var where = Meteor.isClient ? 'client' : 'server';\r\n\r\n    Utils.assert(controller, 'run requires a controller');\r\n\r\n    // one last check to see if we should handle the route here\r\n    if (controller.where != where) {\r\n      self.onUnhandled(controller.path, controller.options);\r\n      return;\r\n    }\r\n\r\n    if (this._currentController)\r\n      this._currentController.runHooks('unload');\r\n\r\n    this._currentController = controller;\r\n    controller.runHooks('load');\r\n    controller.run();\r\n\r\n    if (controller == this._currentController) {\r\n      cb && cb(controller);\r\n    }\r\n  },\r\n\r\n  stop: function () {\r\n  },\r\n\r\n  onUnhandled: function (path, options) {\r\n    options.next();\r\n  },\r\n\r\n  onRouteNotFound: function (path, options) {\r\n    options.next();\r\n  }\r\n});\r\n\r\nRouter = new ServerRouter;\r\n"]}