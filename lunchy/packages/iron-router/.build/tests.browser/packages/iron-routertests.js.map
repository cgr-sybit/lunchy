{"version":3,"file":"\\packages\\iron-router:tests.js","sources":["iron-router/test\\test_helpers.js","iron-router/test\\route.js","iron-router/test\\route_controller.js","iron-router/test\\router.js","iron-router/test\\client\\templates.html","iron-router/test\\client\\router.js","iron-router/test\\client\\route_controller.js"],"names":[],"mappings":";;;;;;;;AAAA,kB;AACA,oB;AACA,kB;AACA,G;;;;;;;;;;;;;;;;;;;ACHA,E;AACA,kB;AACA,G;;AAEA,a;AACA,qB;AACA,4B;AACA,sC;AACA,0C;AACA,uB;AACA,mC;AACA,qC;AACA,E;;AAEA,kD;AACA,6C;AACA,wB;AACA,K;AACA,oC;AACA,oC;AACA,qC;AACA,uC;AACA,sC;;AAEA,yC;AACA,wB;AACA,K;AACA,sC;AACA,sC;AACA,yC;AACA,wC;;AAEA,sC;AACA,qB;AACA,K;AACA,wC;AACA,wC;AACA,2C;AACA,0C;;AAEA,yC;AACA,wB;AACA,K;AACA,sC;AACA,sC;AACA,wC;AACA,wC;;AAEA,yC;AACA,wB;AACA,K;AACA,wC;AACA,wC;AACA,0C;AACA,0C;AACA,4C;AACA,4C;;AAEA,8C;AACA,6B;AACA,K;AACA,iD;AACA,iD;;AAEA,sC;AACA,qB;AACA,K;AACA,+C;AACA,+C;AACA,G;;AAEA,gD;AACA,6C;AACA,wB;AACA,K;;AAEA,8B;AACA,uD;;AAEA,yC;AACA,wB;AACA,K;;AAEA,wC;AACA,gC;;AAEA,sC;AACA,qB;AACA,K;AACA,sC;AACA,mC;AACA,mC;;AAEA,yC;AACA,wB;AACA,K;AACA,oC;AACA,mC;AACA,oC;;AAEA,sC;AACA,mC;AACA,mC;;AAEA,yC;AACA,wB;AACA,K;AACA,qD;AACA,8C;;AAEA,8C;AACA,6B;AACA,K;AACA,iD;AACA,4C;;AAEA,sC;AACA,qB;AACA,K;AACA,6C;AACA,+B;AACA,+B;AACA,G;;AAEA,oE;AACA,6C;AACA,wB;AACA,K;;AAEA,a;;AAEA,kD;AACA,mC;AACA,oC;AACA,4B;AACA,uC;;AAEA,oD;AACA,mC;AACA,G;;AAEA,iD;AACA,6C;AACA,wB;AACA,K;;AAEA,a;AACA,c;;AAEA,Y;AACA,c;AACA,I;AACA,gD;;AAEA,Y;AACA,c;AACA,I;AACA,a;AACA,Y;AACA,Y;AACA,M;AACA,qB;AACA,I;AACA,wE;;AAEA,yC;AACA,wB;AACA,K;AACA,8B;AACA,6D;;AAEA,8C;AACA,6B;AACA,K;AACA,G;;AAEA,uD;AACA,6C;AACA,wB;AACA,K;;AAEA,sD;AACA,qD;AACA,yE;AACA,0D;AACA,gE;AACA,G;;AAEA,uD;AACA,Y;AACA,4B;;AAEA,6C;AACA,6B;AACA,+C;;AAEA,2B;AACA,I;;AAEA,4C;AACA,kE;AACA,sD;AACA,gD;AACA,wD;AACA,2C;AACA,I;;AAEA,8B;AACA,yC;AACA,oC;AACA,wB;AACA,K;AACA,2B;;AAEA,yC;AACA,yC;AACA,iC;AACA,wB;AACA,K;AACA,2B;;AAEA,gB;AACA,gD;AACA,oD;AACA,yC;AACA,qC;AACA,wB;AACA,K;AACA,2B;;AAEA,8C;AACA,yC;AACA,wB;AACA,K;AACA,2B;;AAEA,iC;AACA,8C;AACA,yC;AACA,wB;AACA,K;AACA,gE;AACA,qD;AACA,8C;AACA,sD;AACA,yC;AACA,G;;;;;;;;;;;;;;;;;;;ACtPA,mE;AACA,wC;AACA,yB;AACA,mB;AACA,K;AACA,K;;AAEA,0B;AACA,yB;AACA,uD;AACA,iC;AACA,K;AACA,K;;AAEA,uB;AACA,8C;AACA,G;;AAEA,gE;AACA,iB;AACA,6B;AACA,wB;AACA,sB;AACA,K;AACA,I;;AAEA,c;AACA,qB;AACA,I;;AAEA,sC;AACA,8B;AACA,K;;AAEA,oB;AACA,8B;AACA,K;;AAEA,I;AACA,W;AACA,uC;AACA,gD;AACA,M;AACA,gC;AACA,+B;AACA,I;AACA,oC;AACA,Q;AACA,K;;AAEA,qD;AACA,0B;AACA,2B;;AAEA,+B;AACA,iE;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACzDA,+E;AACA,qB;AACA,+E;AACA,sB;AACA,sB;AACA,0B;AACA,E;;AAEA,e;AACA,kB;AACA,qD;AACA,kF;AACA,oC;AACA,6B;AACA,I;AACA,mC;AACA,6B;AACA,G;AACA,I;AACA,kB;AACA,oD;AACA,qE;AACA,oC;AACA,6B;AACA,I;AACA,mC;AACA,6B;AACA,G;AACA,G;;AAEA,4B;AACA,0B;AACA,0B;;AAEA,+E;AACA,uB;AACA,+E;AACA,mD;AACA,8B;AACA,yB;;AAEA,kB;AACA,gB;AACA,gD;;AAEA,6B;AACA,2B;AACA,G;;AAEA,kD;AACA,8B;AACA,yB;;AAEA,kB;AACA,gB;;AAEA,+C;;AAEA,6B;AACA,2B;AACA,G;;AAEA,+E;AACA,Y;AACA,+E;AACA,sB;AACA,gE;AACA,gC;;AAEA,2B;;AAEA,6B;AACA,2B;;AAEA,4C;AACA,iC;AACA,uB;AACA,M;;AAEA,yB;AACA,sC;AACA,uD;AACA,mC;AACA,M;;AAEA,kC;AACA,mD;AACA,+B;AACA,M;;AAEA,6B;AACA,qE;;AAEA,yB;AACA,8B;AACA,8E;;AAEA,2B;AACA,kD;AACA,mE;AACA,+D;AACA,K;AACA,C;;AAEA,+E;AACA,Y;AACA,+E;AACA,sB;AACA,gE;AACA,gC;;AAEA,2B;;AAEA,6B;AACA,2B;;AAEA,4C;AACA,iC;AACA,uB;AACA,M;;AAEA,yB;AACA,sC;AACA,uD;AACA,mC;AACA,M;;AAEA,kC;AACA,mD;AACA,+B;AACA,M;;AAEA,6B;AACA,qE;;AAEA,yB;AACA,8B;AACA,8E;;AAEA,2B;AACA,kD;AACA,mE;AACA,+D;AACA,K;AACA,C;;;;;;;;;;;;;;;;;;;AChJA,0S;AACA,mF;AACA,mF;AACA,uF;AACA,6F;AACA,yF;AACA,+F;AACA,iG;;;;;;;;;;;;;;;;;;;ACPA,iE;AACA,iC;AACA,sB;AACA,oB;AACA,K;;AAEA,+B;AACA,+B;AACA,sB;;AAEA,6B;AACA,sC;AACA,K;;AAEA,yE;;AAEA,kB;AACA,wB;AACA,yC;AACA,I;;AAEA,iB;AACA,e;AACA,+D;AACA,wD;;AAEA,gF;AACA,mE;AACA,yB;AACA,e;;AAEA,gF;AACA,yD;;AAEA,kB;AACA,wB;AACA,yC;AACA,I;;AAEA,0B;AACA,iB;AACA,e;;AAEA,0B;AACA,kE;AACA,wD;AACA,2D;AACA,2D;AACA,G;;AAEA,0D;AACA,iC;AACA,sB;AACA,qB;AACA,4B;AACA,K;;AAEA,uC;AACA,2B;AACA,K;;AAEA,kC;;AAEA,O;AACA,+B;AACA,iB;AACA,mE;;AAEA,2B;AACA,iB;AACA,+D;;AAEA,+B;AACA,iB;AACA,0E;;AAEA,oB;;AAEA,4B;AACA,gC;AACA,mC;AACA,mB;AACA,yC;AACA,M;;AAEA,4B;AACA,gC;AACA,mC;AACA,mB;AACA,yC;AACA,M;;AAEA,gC;AACA,kC;AACA,uC;AACA,qB;AACA,2C;AACA,M;;AAEA,kC;AACA,mC;AACA,yC;AACA,sB;AACA,4C;AACA,M;;AAEA,kD;AACA,uD;AACA,oD;AACA,iB;;AAEA,gC;AACA,8B;AACA,iC;;AAEA,kD;AACA,uD;AACA,oD;AACA,iB;;AAEA,yE;AACA,8B;AACA,2E;;AAEA,a;AACA,e;AACA,G;AACA,G;;AAEA,6D;AACA,iC;AACA,qB;AACA,qB;AACA,K;;AAEA,uB;;AAEA,0B;AACA,oE;;AAEA,2B;AACA,uE;;AAEA,0B;AACA,kE;;AAEA,2B;AACA,oD;;AAEA,yB;AACA,sC;AACA,sC;AACA,wC;AACA,K;;AAEA,gC;AACA,kC;;AAEA,yB;AACA,iC;AACA,kC;AACA,iC;AACA,kC;;AAEA,yB;AACA,iC;AACA,kC;AACA,iC;AACA,kC;;AAEA,2B;AACA,iC;AACA,kC;AACA,mC;AACA,kC;AACA,G;;;;;;;;;;;;;;;;;;;AC/KA,4B;AACA,sB;AACA,mC;AACA,E;;AAEA,4C;AACA,sB;AACA,qB;AACA,E;;AAEA,2C;AACA,qB;AACA,uB;AACA,E;;AAEA,yB;AACA,qB;AACA,qB;AACA,mB;AACA,E;;AAEA,uD;AACA,wB;AACA,2B;AACA,E;;AAEA,iD;AACA,qB;AACA,E;;AAEA,+C;AACA,mB;AACA,E;;AAEA,2C;AACA,mB;AACA,E;;AAEA,0D;AACA,yB;AACA,E;;AAEA,kE;AACA,uC;;AAEA,8B;AACA,8B;;AAEA,wB;AACA,wB;;AAEA,oB;AACA,4B;AACA,+B;AACA,K;;AAEA,kE;;AAEA,c;AACA,e;AACA,sE;;AAEA,c;AACA,e;AACA,uD;AACA,G;;AAEA,uD;AACA,iB;AACA,gC;AACA,iC;AACA,iB;AACA,I;;AAEA,8B;;AAEA,kC;AACA,yB;AACA,kB;AACA,M;;AAEA,0B;AACA,gC;AACA,wB;AACA,oB;;AAEA,oB;AACA,kC;AACA,O;;AAEA,yB;AACA,wB;AACA,M;;AAEA,wB;AACA,uB;AACA,K;AACA,K;;AAEA,mB;AACA,E;AACA,4B;AACA,e;AACA,K;;AAEA,yC;AACA,0C;AACA,gC;AACA,+B;;AAEA,c;AACA,e;;AAEA,yC;AACA,2C;AACA,iC;AACA,gC;AACA,G;;AAEA,+C;AACA,0D;AACA,8B;AACA,yD;AACA,E;AACA,gC;AACA,6E;AACA,E;AACA,+C;AACA,2E;AACA,G;;AAEA,yE;AACA,8B;AACA,gC;AACA,wC;AACA,mB;AACA,mB;AACA,+B;AACA,wB;AACA,K;AACA,E;AACA,2B;AACA,qB;AACA,K;AACA,E;AACA,kD;AACA,E;AACA,gB;AACA,e;AACA,mD;AACA,G;;AAEA,0E;AACA,8B;AACA,oC;AACA,mB;AACA,wC;AACA,mB;AACA,yB;AACA,iC;AACA,qB;AACA,sB;AACA,M;AACA,sB;AACA,uB;AACA,mB;AACA,K;AACA,K;AACA,E;AACA,2B;AACA,qB;AACA,K;AACA,E;AACA,mD;AACA,yC;AACA,E;AACA,e;AACA,oB;AACA,e;AACA,mD;AACA,yC;AACA,gC;AACA,G","sourcesContent":["Router.configure({\r\n  autoRender: false,\r\n  autoStart: false\r\n});\r\n","/*\r\n * Tests for Route\r\n */\r\n\r\nvar paths = {\r\n  explicit: '/posts',\r\n  required: '/posts/:param',\r\n  multi: '/posts/:paramOne/:paramTwo',\r\n  optional: '/posts/:paramOne/:paramTwo?',\r\n  wildcard: '/posts/*',\r\n  namedWildcard: '/posts/:file(*)',\r\n  regex: /^\\/commits\\/(\\d+)\\.\\.(\\d+)/\r\n};\r\n\r\nTinytest.add('Route - matching', function (test) {\r\n  var route = new Route(Router, 'explicit', {\r\n    path: paths.explicit\r\n  });\r\n  test.isTrue(route.test('/posts'));\r\n  test.isTrue(route.exec('/posts'));\r\n  test.isTrue(route.test('/posts/'));\r\n  test.isFalse(route.test('/posts/1'));\r\n  test.isNull(route.exec('/posts/1'));\r\n\r\n  route = new Route(Router, 'required', {\r\n    path: paths.required\r\n  });\r\n  test.isTrue(route.test('/posts/1'));\r\n  test.isTrue(route.exec('/posts/1'));\r\n  test.isFalse(route.test('/posts/1/2'));\r\n  test.isNull(route.exec('/posts/1/2'));\r\n\r\n  route = new Route(Router, 'multi', {\r\n    path: paths.multi\r\n  });\r\n  test.isTrue(route.test('/posts/1/2'));\r\n  test.isTrue(route.exec('/posts/1/2'));\r\n  test.isFalse(route.test('/posts/1/2/3'));\r\n  test.isNull(route.exec('/posts/1/2/3'));\r\n\r\n  route = new Route(Router, 'optional', {\r\n    path: paths.optional\r\n  });\r\n  test.isTrue(route.test('/posts/1'));\r\n  test.isTrue(route.exec('/posts/1'));\r\n  test.isTrue(route.test('/posts/1/2'));\r\n  test.isTrue(route.exec('/posts/1/2'));\r\n\r\n  route = new Route(Router, 'wildcard', {\r\n    path: paths.wildcard\r\n  });\r\n  test.isTrue(route.test('/posts/1/2'));\r\n  test.isTrue(route.exec('/posts/1/2'));\r\n  test.isTrue(route.test('/posts/1/2/3'));\r\n  test.isTrue(route.exec('/posts/1/2/3'));\r\n  test.isTrue(route.test('/posts/1/2/3/4'));\r\n  test.isTrue(route.exec('/posts/1/2/3/4'));\r\n\r\n  route = new Route(Router, 'namedWildcard', {\r\n    path: paths.namedWildcard\r\n  });\r\n  test.isTrue(route.test('/posts/path/to/file'));\r\n  test.isTrue(route.exec('/posts/path/to/file'));\r\n\r\n  route = new Route(Router, 'regex', {\r\n    path: paths.regex\r\n  });\r\n  test.isTrue(route.test('/commits/123..456'));\r\n  test.isTrue(route.exec('/commits/123..456'));\r\n});\r\n\r\nTinytest.add('Route - params', function (test) {\r\n  var route = new Route(Router, 'explicit', {\r\n    path: paths.explicit\r\n  });\r\n\r\n  test.isNull(route.params());\r\n  test.isTrue(route.params('/posts') instanceof Array);\r\n\r\n  route = new Route(Router, 'required', {\r\n    path: paths.required\r\n  });\r\n\r\n  var params = route.params('/posts/1');\r\n  test.equal(params.param, \"1\");\r\n\r\n  route = new Route(Router, 'multi', {\r\n    path: paths.multi\r\n  });\r\n  params = route.params('/posts/1/2');\r\n  test.equal(params.paramOne, '1');\r\n  test.equal(params.paramTwo, '2');\r\n\r\n  route = new Route(Router, 'optional', {\r\n    path: paths.optional\r\n  });\r\n  params = route.params('/posts/1');\r\n  test.equal(params.paramOne, '1');\r\n  test.isUndefined(params.paramTwo);\r\n\r\n  params = route.params('/posts/1/2');\r\n  test.equal(params.paramOne, '1');\r\n  test.equal(params.paramTwo, '2');\r\n\r\n  route = new Route(Router, 'wildcard', {\r\n    path: paths.wildcard\r\n  });\r\n  params = route.params('/posts/some/wildcard/path');\r\n  test.equal(params[0], 'some/wildcard/path');\r\n\r\n  route = new Route(Router, 'namedWildcard', {\r\n    path: paths.namedWildcard\r\n  });\r\n  params = route.params('/posts/some/file/path');\r\n  test.equal(params.file, 'some/file/path');\r\n\r\n  route = new Route(Router, 'regex', {\r\n    path: paths.regex\r\n  });\r\n  params = route.params('/commits/123..456');\r\n  test.equal(params[0], '123');\r\n  test.equal(params[1], '456');\r\n});\r\n\r\nTinytest.add('Route - params with query and hash', function (test) {\r\n  var route = new Route(Router, 'optional', {\r\n    path: paths.optional\r\n  });\r\n\r\n  var params;\r\n\r\n  params = route.params('/posts/1?q=s#anchorTag');\r\n  test.equal(params.paramOne, '1');\r\n  test.isUndefined(params.paramTwo);\r\n  test.equal(params.q, 's');\r\n  test.equal(params.hash, 'anchorTag');\r\n\r\n  params = route.params('/posts/1/2?q=s#anchorTag');\r\n  test.equal(params.paramTwo, '2');\r\n});\r\n\r\nTinytest.add('Route - resolve', function (test) {\r\n  var route = new Route(Router, 'required', {\r\n    path: paths.required\r\n  });\r\n\r\n  var params;\r\n  var options;\r\n\r\n  params = {\r\n    param: '1'\r\n  };\r\n  test.equal(route.resolve(params), '/posts/1');\r\n\r\n  params = {\r\n    param: '1'\r\n  };\r\n  options = {\r\n    query: {\r\n      q: 's'\r\n    },\r\n    hash: 'anchorTag'\r\n  };\r\n  test.equal(route.resolve(params, options), '/posts/1/?q=s#anchorTag');\r\n\r\n  route = new Route(Router, 'wildcard', {\r\n    path: paths.wildcard\r\n  });\r\n  params = ['some/file/path'];\r\n  test.equal(route.resolve(params), '/posts/some/file/path');\r\n\r\n  route = new Route(Router, 'namedWildcard', {\r\n    path: paths.namedWildcard\r\n  });\r\n});\r\n\r\nTinytest.add('Route - normalizePath', function (test) {\r\n  var route = new Route(Router, 'explicit', {\r\n    path: paths.explicit\r\n  });\r\n\r\n  test.equal(route.normalizePath('/posts'), '/posts');\r\n  test.equal(route.normalizePath('posts'), '/posts');\r\n  test.equal(route.normalizePath(Meteor.absoluteUrl('posts')), '/posts');\r\n  test.equal(route.normalizePath('/posts?q=s'), '/posts');\r\n  test.equal(route.normalizePath('/posts#anchorTag'), '/posts');\r\n});\r\n\r\nTinytest.add('Route - getController', function (test) {\r\n  var route;\r\n  var root = Utils.global();\r\n\r\n  root.TestController = function (options)  {\r\n    if (arguments.length < 1)\r\n      throw new Error('Argument length check');\r\n\r\n    this.options = options;\r\n  };\r\n\r\n  var testGetController = function (route) {\r\n    var controller = route.getController('/test', {option: true});\r\n    test.isTrue(controller instanceof TestController);\r\n    test.equal(controller.options.route, route);\r\n    test.equal(controller.options.template, 'template');\r\n    test.isTrue(controller.options.option);\r\n  };\r\n\r\n  // case 1: controller option\r\n  var route = new Route(Router, 'test', {\r\n    controller: root.TestController,\r\n    template: 'template'\r\n  });\r\n  testGetController(route);\r\n\r\n  // case 1a: controller option as string\r\n  var route = new Route(Router, 'test', {\r\n    controller: 'TestController',\r\n    template: 'template'\r\n  });\r\n  testGetController(route);\r\n\r\n  root.App = {};\r\n  root.App.TestController = root.TestController;\r\n  // case 1b: controller option as namespaced string\r\n  var route = new Route(Router, 'test', {\r\n    controller: 'App.TestController',\r\n    template: 'template'\r\n  });\r\n  testGetController(route);\r\n\r\n  // case 2: resolve controller intelligently \r\n  var route = new Route(Router, 'test', {\r\n    template: 'template'\r\n  });\r\n  testGetController(route);\r\n\r\n  // case 3: anonymous controller\r\n  // case 2: resolve controller intelligently \r\n  var route = new Route(Router, 'anon', {\r\n    template: 'template'\r\n  });\r\n  var controller = route.getController('/anon', {option: true});\r\n  test.isTrue(controller instanceof RouteController);\r\n  test.equal(controller.options.route, route);\r\n  test.equal(controller.options.template, 'template');\r\n  test.isTrue(controller.options.option);\r\n});\r\n","Tinytest.add('IronRouteController - inheritance', function (test) {\r\n  var App = IronRouteController.extend({\r\n    action: function () {\r\n      return 'app';\r\n    }\r\n  });\r\n\r\n  var Child = App.extend({\r\n    action: function () {\r\n      var superVal = Child.__super__.action.call(this);\r\n      return [superVal, 'child'];\r\n    }\r\n  });\r\n\r\n  var inst = new Child;\r\n  test.equal(inst.action(), ['app', 'child']);\r\n});\r\n\r\nTinytest.add('IronRouteController - runHooks', function (test) {\r\n  var calls = [];\r\n  var call = function (idx) {\r\n    return function () {\r\n      calls.push(idx);\r\n    }\r\n  };\r\n\r\n  var opts = {\r\n    before: [call(0)]\r\n  };\r\n\r\n  var A = IronRouteController.extend({\r\n    before: [call(1), call(2)]\r\n  });\r\n\r\n  var B = A.extend({\r\n    before: [call(3), call(4)]\r\n  });\r\n\r\n  /*\r\n   * Given:\r\n   *  A prototype['before'] => [f1, f2]\r\n   *    B inherits A proto['before'] => [f3, f4]\r\n   *  \r\n   *  Router options => [f5, f6]\r\n   *  Route options => [f7, f8]\r\n   *\r\n   *  runHooks('before') => [f1..f8]\r\n   *    \r\n   */\r\n\r\n  test.equal(calls.length, 0, 'call list not empty');\r\n  var bInst = new B(opts);\r\n  bInst.runHooks('before');\r\n\r\n  for (var i = 0; i < 5; i++) {\r\n    test.equal(calls[i], i, 'runHooks has the wrong exec order');\r\n  }\r\n});\r\n","/*****************************************************************************/\r\n/* Mocks and Stubs */\r\n/*****************************************************************************/\r\nvar controllerMock = {\r\n  run: function () {},\r\n  runHooks: function () {}\r\n};\r\n\r\nvar routes = [{\r\n  where: 'client',\r\n  test: function (path) { return path == 'client'; },\r\n  getController: function (path, options) { return EJSON.clone(controllerMock); },\r\n  path: function (params, options) {\r\n    return [params, options];\r\n  },\r\n  url: function (params, options) {\r\n    return [params, options];\r\n  }\r\n}, {\r\n  where: 'server',\r\n  test: function (path) { return path == 'server' },\r\n  getController: function () { return EJSON.clone(controllerMock); },\r\n  path: function (params, options) {\r\n    return [params, options];\r\n  },\r\n  url: function (params, options) {\r\n    return [params, options];\r\n  }\r\n}];\r\n\r\n// simulate the named routes\r\nroutes.client = routes[0];\r\nroutes.server = routes[1];\r\n\r\n/*****************************************************************************/\r\n/* Client and Server */\r\n/*****************************************************************************/\r\nTinytest.add('IronRouter - path', function (test) {\r\n  var router = new IronRouter;\r\n  router.routes = routes;\r\n\r\n  var params = [];\r\n  var opts = {};\r\n  var res = router.path('client', params, opts);\r\n\r\n  test.equal(res[0], params);\r\n  test.equal(res[1], opts);\r\n});\r\n\r\nTinytest.add('IronRouter - url', function (test) {\r\n  var router = new IronRouter;\r\n  router.routes = routes;\r\n\r\n  var params = [];\r\n  var opts = {};\r\n\r\n  var res = router.url('client', params, opts);\r\n\r\n  test.equal(res[0], params);\r\n  test.equal(res[1], opts);\r\n});\r\n\r\n/*****************************************************************************/\r\n/* Client */\r\n/*****************************************************************************/\r\nif (Meteor.isClient) {\r\n  Tinytest.add('IronRouter - client dispatch', function (test) {\r\n    var router = new IronRouter;\r\n\r\n    router.routes = routes;\r\n\r\n    var runController = null;\r\n    var runCallback = null;\r\n\r\n    router.run = function (controller, cb) {\r\n      runController = controller;\r\n      runCallback = cb;\r\n    };\r\n\r\n    // 1. onRouteNotFound\r\n    var onRouteNotFoundCalled = false;\r\n    router.onRouteNotFound = function (path, options) {\r\n      onRouteNotFoundCalled = true;\r\n    };\r\n\r\n    var onUnhandledCalled = false;\r\n    router.onUnhandled = function (path, options) {\r\n      onUnhandledCalled = true;\r\n    };\r\n\r\n    router.dispatch('bogus');\r\n    test.isTrue(onRouteNotFoundCalled, 'onRouteNotFound not called');\r\n\r\n    // 2. where !== where\r\n    router.dispatch('server');\r\n    test.isTrue(onUnhandledCalled, 'onUnhandled not called for server route');\r\n\r\n    // 3. run method called\r\n    router.dispatch('client', {}, function () {});\r\n    test.isTrue(runController, 'run not called with a controller');\r\n    test.isTrue(runCallback, 'run not called with a callback');\r\n  });\r\n}\r\n\r\n/*****************************************************************************/\r\n/* Server */\r\n/*****************************************************************************/\r\nif (Meteor.isServer) {\r\n  Tinytest.add('IronRouter - server dispatch', function (test) {\r\n    var router = new IronRouter;\r\n\r\n    router.routes = routes;\r\n\r\n    var runController = null;\r\n    var runCallback = null;\r\n\r\n    router.run = function (controller, cb) {\r\n      runController = controller;\r\n      runCallback = cb;\r\n    };\r\n\r\n    // 1. onRouteNotFound\r\n    var onRouteNotFoundCalled = false;\r\n    router.onRouteNotFound = function (path, options) {\r\n      onRouteNotFoundCalled = true;\r\n    };\r\n\r\n    var onUnhandledCalled = false;\r\n    router.onUnhandled = function (path, options) {\r\n      onUnhandledCalled = true;\r\n    };\r\n\r\n    router.dispatch('bogus');\r\n    test.isTrue(onRouteNotFoundCalled, 'onRouteNotFound not called');\r\n\r\n    // 2. where !== where\r\n    router.dispatch('client');\r\n    test.isTrue(onUnhandledCalled, 'onUnhandled not called for client route');\r\n\r\n    // 3. run method called\r\n    router.dispatch('server', {}, function () {});\r\n    test.isTrue(runController, 'run not called with a controller');\r\n    test.isTrue(runCallback, 'run not called with a callback');\r\n  });\r\n}\r\n","Template.__define__(\"layout\",Package.handlebars.Handlebars.json_ast_to_func([\"layout\\r\\n\\r\\n  <aside>\\r\\n    \",[\"{\",[[0,\"yield\"],\"aside\"]],\"\\r\\n  </aside>\\r\\n\\r\\n  <article>\\r\\n    \",[\"{\",[[0,\"yield\"]]],\"\\r\\n  </article>\\r\\n\\r\\n  <footer>\\r\\n    \",[\"{\",[[0,\"yield\"],\"footer\"]],\"\\r\\n  </footer>\"]));\nTemplate.__define__(\"one\",Package.handlebars.Handlebars.json_ast_to_func([\"one\"]));\nTemplate.__define__(\"two\",Package.handlebars.Handlebars.json_ast_to_func([\"two\"]));\nTemplate.__define__(\"aside\",Package.handlebars.Handlebars.json_ast_to_func([\"aside\"]));\nTemplate.__define__(\"asideTwo\",Package.handlebars.Handlebars.json_ast_to_func([\"asideTwo\"]));\nTemplate.__define__(\"footer\",Package.handlebars.Handlebars.json_ast_to_func([\"footer\"]));\nTemplate.__define__(\"footerTwo\",Package.handlebars.Handlebars.json_ast_to_func([\"footerTwo\"]));\nTemplate.__define__(\"data\",Package.handlebars.Handlebars.json_ast_to_func([[\"{\",[[0,\"text\"]]]]));\n","Tinytest.add('ClientRouter - run computations', function (test) {\r\n  var router = new ClientRouter({\r\n    autoRender: false,\r\n    autoStart: false\r\n  });\r\n\r\n  var c1 = new RouteController;\r\n  var c2 = new RouteController;\r\n  var routerRuns = [];\r\n\r\n  Deps.autorun(function (c) {\r\n    routerRuns.push(router.current());\r\n  });\r\n\r\n  test.equal(routerRuns[0], null, 'router.current() starts off as null');\r\n\r\n  var c1Runs = [];\r\n  c1.run = function () {\r\n    c1Runs.push(Deps.currentComputation);\r\n  };\r\n\r\n  router.run(c1);\r\n  Deps.flush();\r\n  test.equal(routerRuns[1], c1, 'router comp not invalidated');\r\n  test.equal(c1Runs.length, 1, 'c1 controller not run');\r\n\r\n  // simulate a dependency invalidating the run's computation like if you relied\r\n  // on a reactive data source in a before hook or action function.\r\n  c1Runs[0].invalidate();\r\n  Deps.flush();\r\n\r\n  test.equal(routerRuns.length, 2, 'run comp should not invalidate route comp');\r\n  test.equal(c1Runs.length, 2, 'run comp was not rerun');\r\n\r\n  var c2Runs = [];\r\n  c2.run = function () {\r\n    c2Runs.push(Deps.currentComputation);\r\n  };\r\n\r\n  var oldComp = c1Runs[1];\r\n  router.run(c2);\r\n  Deps.flush();\r\n\r\n  var newComp = c2Runs[0];\r\n  test.equal(routerRuns.length, 3, 'router comp not invalidated');\r\n  test.equal(c2Runs.length, 1, 'c3 controller not run');\r\n  test.isTrue(oldComp.stopped, 'old run comp not stopped');\r\n  test.isFalse(newComp.stopped, 'new run comp is stopped');\r\n});\r\n\r\nTinytest.add('ClientRouter - rendering', function (test) {\r\n  var router = new ClientRouter({\r\n    autoRender: false,\r\n    autoStart: false,\r\n    layoutTemplate: 'layout'\r\n  });\r\n\r\n  var frag = Spark.render(function () {\r\n    return router.render();\r\n  });\r\n\r\n  var div = new OnscreenDiv(frag);\r\n\r\n  try {\r\n    router.setLayout('layout');\r\n    Deps.flush();\r\n    test.equal(div.text().trim(), 'layout', 'layout not rendered');\r\n\r\n    router.setLayout(null);\r\n    Deps.flush();\r\n    test.equal(div.text().trim(), '', 'layout did not change');\r\n\r\n    router.setLayout('layout');\r\n    Deps.flush();\r\n    test.equal(div.text().trim(), 'layout', 'layout did not change back');\r\n\r\n    var counts = {};\r\n\r\n    var _one = Template.one;\r\n    Template.one = function () {\r\n      counts.one = counts.one || 0;\r\n      counts.one++;\r\n      return _one.apply(this, arguments);\r\n    };\r\n\r\n    var _two = Template.two;\r\n    Template.two = function () {\r\n      counts.two = counts.two || 0;\r\n      counts.two++;\r\n      return _two.apply(this, arguments);\r\n    };\r\n\r\n    var _aside = Template.aside;\r\n    Template.aside = function () {\r\n      counts.aside = counts.aside || 0;\r\n      counts.aside++;\r\n      return _aside.apply(this, arguments);\r\n    };\r\n\r\n    var _footer = Template.footer;\r\n    Template.footer = function () {\r\n      counts.footer = counts.footer || 0;\r\n      counts.footer++;\r\n      return _footer.apply(this, arguments);\r\n    };\r\n\r\n    router.setTemplate('aside', /* to */ 'aside');\r\n    router.setTemplate('one', /* to main */ undefined);\r\n    router.setTemplate('footer', /* to */ 'footer');\r\n    Deps.flush();\r\n\r\n    test.equal(counts.aside, 1);\r\n    test.equal(counts.one, 1);\r\n    test.equal(counts.footer, 1);\r\n\r\n    router.setTemplate('aside', /* to */ 'aside');\r\n    router.setTemplate('two', /* to main */ undefined);\r\n    router.setTemplate('footer', /* to */ 'footer');\r\n    Deps.flush();\r\n\r\n    test.equal(counts.aside, 1, 'tmpl should have alrady been rendered');\r\n    test.equal(counts.two, 1);\r\n    test.equal(counts.footer, 1, 'tmpl should have already been rendered');\r\n\r\n  } finally {\r\n    div.kill();\r\n  }\r\n});\r\n\r\nTinytest.add('ClientRouter - before hooks', function (test) {\r\n  var router = new ClientRouter({\r\n    autoStart: false,\r\n    autoRender: false\r\n  });\r\n\r\n  var where = 'client';\r\n\r\n  var firstHookCalled = 0;\r\n  router.before(function() { firstHookCalled += 1; }, {only: 'one'})\r\n\r\n  var secondHookCalled = 0;\r\n  router.before(function() { secondHookCalled += 1; }, {except: 'two'})\r\n\r\n  var thirdHookCalled = 0;\r\n  router.configure({before: function() { thirdHookCalled += 1; }})\r\n\r\n  var fourthHookCalled = 0;\r\n  router.before(function(){ fourthHookCalled += 1 })\r\n\r\n  router.map(function() {\r\n    this.route('one', {where: where});\r\n    this.route('two', {where: where});\r\n    this.route('three', {where: where});\r\n  });\r\n\r\n  router.setLayout = _.identity;\r\n  router.setTemplate = _.identity;\r\n\r\n  router.dispatch('one');\r\n  test.equal(firstHookCalled, 1);\r\n  test.equal(secondHookCalled, 1);\r\n  test.equal(thirdHookCalled, 1);\r\n  test.equal(fourthHookCalled, 1);\r\n\r\n  router.dispatch('two');\r\n  test.equal(firstHookCalled, 1);\r\n  test.equal(secondHookCalled, 1);\r\n  test.equal(thirdHookCalled, 2);\r\n  test.equal(fourthHookCalled, 2);\r\n\r\n  router.dispatch('three');\r\n  test.equal(firstHookCalled, 1);\r\n  test.equal(secondHookCalled, 2);\r\n  test.equal(thirdHookCalled, 3);  \r\n  test.equal(fourthHookCalled, 3);\r\n});\r\n","Subscription = function () {\r\n  this._ready = false;\r\n  this._deps = new Deps.Dependency;\r\n};\r\n\r\nSubscription.prototype.ready = function () {\r\n  this._deps.depend();\r\n  return this._ready;\r\n};\r\n\r\nSubscription.prototype.mark = function () {\r\n  this._ready = true;\r\n  this._deps.changed();\r\n};\r\n\r\nMockRouter = function() {\r\n  this.rendered = {};\r\n  this.layout = null;\r\n  this.data = null;\r\n};\r\n\r\nMockRouter.prototype.setTemplate = function(name, to) {\r\n  to = to || '__main__';\r\n  this.rendered[to] = name;\r\n};\r\n\r\nMockRouter.prototype.setLayout = function(name) {\r\n  this.layout = name;\r\n};\r\n\r\nMockRouter.prototype.setData = function(data) {\r\n  this.data = data;\r\n};\r\n\r\nMockRouter.prototype.getData = function() {\r\n  return this.data;\r\n};\r\n\r\nMockRouter.prototype.clearUnusedYields = function (used) {\r\n  this.usedYields = used;\r\n};\r\n\r\nTinytest.add('RouteController - wait and ready', function (test) {\r\n  var controller = new RouteController;\r\n\r\n  var sub1 = new Subscription;\r\n  var sub2 = new Subscription;\r\n\r\n  controller.wait(sub1);\r\n  controller.wait(sub2);\r\n\r\n  var ready = false;\r\n  Deps.autorun(function () {\r\n    ready = controller.ready();\r\n  });\r\n\r\n  test.isFalse(ready, 'controller should be waiting on two subs');\r\n\r\n  sub1.mark();\r\n  Deps.flush();\r\n  test.isFalse(ready, 'controller should be waiting on one more sub');\r\n\r\n  sub2.mark();\r\n  Deps.flush();\r\n  test.isTrue(ready, 'controller should be ready now');\r\n});\r\n\r\nTinytest.add('RouteController - run', function (test) {\r\n  var calls = {};\r\n  var logCall = function (key) {\r\n    calls[key] = calls[key] || 0;\r\n    calls[key]++;\r\n  };\r\n\r\n  var sub1 = new Subscription;\r\n\r\n  var C = RouteController.extend({\r\n    waitOn: function () {\r\n      return sub1;\r\n    },\r\n\r\n    before: [function () {\r\n      logCall('upstreamBefore');\r\n      if (!this.ready())\r\n        this.stop();\r\n\r\n    }, function () {\r\n      logCall('downstreamBefore');\r\n    }],\r\n\r\n    action: function () {\r\n      logCall('action');\r\n    },\r\n\r\n    after: function () {\r\n      logCall('after');\r\n    }\r\n  });\r\n\r\n  var inst = new C;\r\n  \r\n  Deps.autorun(function () {\r\n    inst.run();\r\n  });\r\n\r\n  test.equal(calls['upstreamBefore'], 1);\r\n  test.isFalse(calls['downstreamBefore']);\r\n  test.isFalse(calls['action']);\r\n  test.isFalse(calls['after']);\r\n\r\n  sub1.mark();\r\n  Deps.flush();\r\n\r\n  test.equal(calls['upstreamBefore'], 2);\r\n  test.equal(calls['downstreamBefore'], 1);\r\n  test.equal(calls['action'], 1);\r\n  test.equal(calls['after'], 1);\r\n});\r\n\r\n// really not a lot to test here, but here goes\r\nTinytest.add('RouteController - render', function (test) {\r\n  var router = new MockRouter;\r\n  var controller = new RouteController({router: router});\r\n  \r\n  controller.render('template');\r\n  test.equal(router.rendered.__main__, 'template', 'main tmpl not rendered');\r\n  \r\n  controller.render('template', {to: 'aside'});\r\n  test.equal(router.rendered.aside, 'template', 'yield tmpl not rendered');\r\n});\r\n\r\nTinytest.add('RouteController - autoRenderLoadingHook', function (test) {\r\n  var router = new MockRouter;\r\n  var handle = new Subscription;\r\n  var controller = new RouteController({\r\n    router: router,\r\n    waitOn: handle,\r\n    loadingTemplate: 'loading',\r\n    template: 'template'\r\n  });\r\n  \r\n  Deps.autorun(function() {\r\n    controller.run();\r\n  });\r\n  \r\n  test.equal(router.rendered.__main__, 'loading');\r\n  \r\n  handle.mark();\r\n  Deps.flush();\r\n  test.equal(router.rendered.__main__, 'template');\r\n});\r\n\r\nTinytest.add('RouteController - autoRenderNotFoundHook', function (test) {\r\n  var router = new MockRouter;\r\n  var dataDep = new Deps.Dependency;\r\n  var found = null;\r\n  var controller = new RouteController({\r\n    router: router,\r\n    template: 'template',\r\n    notFoundTemplate: 'notFound',\r\n    yieldTemplates: {\r\n      one: {to: 'one'}\r\n    },\r\n    data: function() {\r\n      dataDep.depend();\r\n      return found;\r\n    }\r\n  });\r\n  \r\n  Deps.autorun(function() {\r\n    controller.run();\r\n  });\r\n  \r\n  test.equal(router.rendered.__main__, 'notFound');\r\n  test.equal(router.rendered.one, 'one');\r\n  \r\n  found = true;\r\n  dataDep.changed();\r\n  Deps.flush();\r\n  test.equal(router.rendered.__main__, 'template');\r\n  test.equal(router.rendered.one, 'one');\r\n  test.equal(router.data, true);\r\n});\r\n"]}