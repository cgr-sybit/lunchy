{"version":3,"file":"\\packages\\houston.js","sources":["houston\\lib\\collections.coffee","houston\\lib\\shared.coffee","houston\\server\\publications.coffee","houston\\server\\exports.coffee"],"names":[],"mappings":"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","sourcesContent":["root = exports ? this\r\n\r\nroot.Houston ?= {}\r\n\r\nHouston._collections ?= {}\r\n\r\nHouston._collections.collections = new Meteor.Collection('houston_collections')\r\n\r\nHouston._admins = new Meteor.Collection('houston_admins')\r\n\r\nHouston._user_is_admin = (id) ->\r\n  return id? and Houston._admins.findOne user_id: id\r\n","root = exports ? this\r\n\r\nroot.Houston ?= {}\r\n\r\nHouston._houstonize = (name) -> \"_houston_#{name}\"\r\n\r\nHouston._get_fields = (documents) ->\r\n  key_to_type = {_id: 'ObjectId'}\r\n  find_fields = (document, prefix='') ->\r\n    for key, value of _.omit(document, '_id')\r\n      if typeof value is 'object'\r\n        find_fields value, \"#{prefix}#{key}.\"\r\n      else if typeof value isnt 'function'\r\n        full_path_key = \"#{prefix}#{key}\"\r\n        key_to_type[full_path_key] = typeof value\r\n\r\n  for document in documents\r\n    find_fields document\r\n\r\n  (name: key, type: value for key, value of key_to_type)\r\n\r\nHouston._get_field_names = (documents) ->\r\n  _.pluck(Houston._get_fields(documents), 'name')\r\n","root = exports ? this\r\nHIDDEN_COLLECTIONS = {'users': Meteor.users, 'meteor_accounts_loginServiceConfiguration': undefined}\r\nADDED_COLLECTIONS = {}\r\n# TODO: describe what this is, exactly, and how it differs from Houston._collections.\r\n\r\nDummy = new Meteor.Collection(\"system.dummy\")  # hack.\r\n\r\nHouston._publish = (name, func) ->\r\n  Meteor.publish Houston._houstonize(name), func\r\n\r\nHouston._setup_collection = (collection) ->\r\n  return if collection._name of ADDED_COLLECTIONS\r\n\r\n  name = collection._name\r\n  methods = {}\r\n  methods[Houston._houstonize \"#{name}_insert\"] = (doc) ->\r\n    return unless Houston._user_is_admin @userId\r\n    collection.insert(doc)\r\n\r\n  methods[Houston._houstonize \"#{name}_update\"] = (id, update_dict) ->\r\n    return unless Houston._user_is_admin @userId\r\n    if collection.findOne(id)\r\n      collection.update(id, update_dict)\r\n    else\r\n      id = collection.findOne(new Meteor.Collection.ObjectID(id))\r\n      collection.update(id, update_dict)\r\n\r\n  methods[Houston._houstonize \"#{name}_delete\"] = (id, update_dict) ->\r\n    return unless Houston._user_is_admin @userId\r\n    if collection.findOne(id)\r\n      collection.remove(id)\r\n    else\r\n      id = collection.findOne(new Meteor.Collection.ObjectID(id))\r\n      collection.remove(id)\r\n\r\n  Meteor.methods methods\r\n\r\n  Houston._publish name, (sort, filter, limit) ->\r\n    return unless Houston._user_is_admin @userId\r\n    try\r\n      collection.find(filter, sort: sort, limit: limit)\r\n    catch e\r\n      console.log e\r\n\r\n  collection.find().observe\r\n    added: (document) ->\r\n      Houston._collections.collections.update {name},\r\n        $inc: {count: 1},\r\n        $addToSet: fields: $each: Houston._get_field_names([document])\r\n    removed: (document) -> Houston._collections.collections.update {name}, {$inc: {count: -1}}\r\n\r\n  fields = Houston._get_field_names(collection.find().fetch())\r\n  c = Houston._collections.collections.findOne {name}\r\n  if c\r\n    Houston._collections.collections.update c._id, {$set: count: collection.find().count(), fields: fields}\r\n  else\r\n    Houston._collections.collections.insert {name, count: collection.find().count(), fields: fields}\r\n  ADDED_COLLECTIONS[name] = collection\r\n\r\nsync_collections = ->\r\n  Dummy.findOne()  # hack. TODO: verify this is still necessary\r\n\r\n  _sync_collections = (meh, collections_db) ->\r\n    collection_names = (col.collectionName for col in collections_db \\\r\n      when (col.collectionName.indexOf \"system.\") isnt 0 and\r\n           (col.collectionName.indexOf \"houston_\") isnt 0)\r\n\r\n    collection_names.forEach (name) ->\r\n      unless name of ADDED_COLLECTIONS or name of HIDDEN_COLLECTIONS\r\n        new_collection = null\r\n        try\r\n          new_collection = new Meteor.Collection(name)\r\n        catch e\r\n          for key, value of root\r\n            if name == value._name # TODO here - typecheck also?\r\n              new_collection = value\r\n\r\n        if new_collection?  # found it!\r\n          Houston._setup_collection(new_collection)\r\n        else\r\n          console.log \"\"\"\r\nHouston: couldn't find access to the #{name} collection.\r\nIf you'd like to access the collection from Houston, either\r\n(1) make sure it is available as a global (top-level namespace) within the server or\r\n(2) add the collection manually via Houston.add_collection\r\n\"\"\"\r\n\r\n  bound_sync_collections = Meteor.bindEnvironment _sync_collections, (e) ->\r\n    console.log \"Failed while syncing collections for reason: #{e}\"\r\n\r\n  # MongoInternals is the 'right' solution as of 0.6.5\r\n  mongo_driver = MongoInternals?.defaultRemoteCollectionDriver() or Meteor._RemoteCollectionDriver\r\n  mongo_driver.mongo.db.collections bound_sync_collections\r\n\r\nMeteor.methods\r\n  _houston_make_admin: (user_id) ->\r\n    # limit one admin\r\n    return if Houston._admins.findOne {'user_id': $exists: true}\r\n    Houston._admins.insert {user_id}\r\n    sync_collections() # reloads collections in case of new app\r\n    return true\r\n\r\n# publish our analysis of the app's collections\r\nHouston._publish 'collections', ->\r\n  return unless Houston._user_is_admin @userId\r\n  Houston._collections.collections.find()\r\n\r\n# TODO address inherent security issue\r\nHouston._publish 'admin_user', ->\r\n  Houston._admins.find {}\r\n\r\nMeteor.startup ->\r\n  sync_collections()\r\n","# Functions that Houston makes available to the app\r\nroot = exports ? this\r\n\r\n# Let Houston know about a collection manually, as an alternative\r\n# to the current autodiscovery process\r\nHouston.add_collection = (collection) ->\r\n  # TODO options arg can be used to configure admin UI like Django does\r\n  Houston._setup_collection(collection)\r\n"]}