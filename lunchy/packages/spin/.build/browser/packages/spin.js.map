{"version":3,"file":"\\packages\\spin.js","sources":["spin/lib\\spin.js","spin/lib\\spinner.html","spin/lib\\spinner.js"],"names":[],"mappings":";;;;;;;;AAAA,gC;;AAEA,G;AACA,sC;AACA,iC;AACA,G;AACA,0B;;AAEA,gB;AACA,6D;;AAEA,kB;AACA,qE;;AAEA,sB;AACA,+B;AACA,C;AACA,mB;AACA,e;;AAEA,mE;AACA,+D;AACA,wE;;AAEA,K;AACA,kE;AACA,2D;AACA,K;AACA,gC;AACA,iD;AACA,S;;AAEA,kC;AACA,a;AACA,G;;AAEA,K;AACA,6C;AACA,K;AACA,iD;AACA,+C;AACA,sC;;AAEA,iB;AACA,G;;AAEA,K;AACA,gE;AACA,K;AACA,2B;AACA,mD;AACA,qD;AACA,oC;AACA,M;;AAEA,K;AACA,qE;AACA,uE;AACA,oD;AACA,K;AACA,iD;AACA,oE;AACA,oC;AACA,gE;AACA,mG;AACA,gD;;AAEA,4B;AACA,uB;AACA,+C;AACA,iC;AACA,4C;AACA,uC;AACA,0D;AACA,mC;AACA,mC;;AAEA,0B;AACA,K;;AAEA,e;AACA,G;;AAEA,K;AACA,4E;AACA,K;AACA,6B;AACA,oB;AACA,U;AACA,S;;AAEA,yC;AACA,uD;AACA,sC;AACA,2B;AACA,uC;AACA,K;AACA,G;;AAEA,K;AACA,4C;AACA,K;AACA,0B;AACA,uB;AACA,0C;;AAEA,a;AACA,G;;AAEA,K;AACA,6B;AACA,K;AACA,uB;AACA,8C;AACA,4B;AACA,wB;AACA,iD;AACA,K;AACA,c;AACA,G;;AAEA,K;AACA,2D;AACA,K;AACA,oB;AACA,+C;AACA,iC;AACA,2C;;AAEA,Y;AACA,G;;AAEA,sB;;AAEA,kB;AACA,wD;AACA,oD;AACA,+C;AACA,2D;AACA,4C;AACA,6C;AACA,4C;AACA,+D;AACA,8C;AACA,iD;AACA,iD;AACA,sE;AACA,0D;AACA,+D;AACA,8C;AACA,gD;AACA,6C;AACA,G;;AAEA,wB;AACA,uB;AACA,yD;AACA,0D;AACA,G;;AAEA,iD;AACA,uB;;AAEA,4B;;AAEA,O;AACA,gF;AACA,+E;AACA,yB;AACA,O;AACA,4B;AACA,iB;;AAEA,qB;AACA,uB;AACA,uH;AACA,yC;AACA,gC;AACA,+B;;AAEA,mB;AACA,wD;AACA,wB;AACA,oB;AACA,iB;AACA,+G;AACA,6G;AACA,U;AACA,O;;AAEA,4C;AACA,+B;;AAEA,8B;AACA,6D;AACA,iB;AACA,yD;AACA,iB;AACA,uB;AACA,2B;AACA,qD;AACA,6B;;AAEA,2B;AACA,c;AACA,6C;AACA,oF;;AAEA,+D;AACA,W;AACA,kE;AACA,Y;AACA,O;AACA,iB;AACA,M;;AAEA,O;AACA,qC;AACA,O;AACA,sB;AACA,sB;AACA,e;AACA,kC;AACA,wD;AACA,2B;AACA,O;AACA,iB;AACA,M;;AAEA,O;AACA,2E;AACA,kC;AACA,O;AACA,4B;AACA,e;AACA,uD;AACA,a;;AAEA,oC;AACA,gC;AACA,+B;AACA,2C;AACA,iC;AACA,4B;AACA,4B;AACA,kC;AACA,uG;AACA,uD;AACA,U;AACA,O;;AAEA,gC;AACA,+B;AACA,+B;AACA,qC;AACA,2D;AACA,6B;AACA,mJ;AACA,U;;AAEA,qF;;AAEA,kE;AACA,O;AACA,e;AACA,M;;AAEA,O;AACA,iE;AACA,sD;AACA,O;AACA,mC;AACA,wE;AACA,K;;AAEA,I;;;AAGA,sB;;AAEA,8C;AACA,6B;AACA,mG;AACA,K;;AAEA,0E;AACA,4D;;AAEA,+C;AACA,8B;AACA,iB;;AAEA,sB;AACA,mB;AACA,wB;AACA,mC;AACA,sC;AACA,a;AACA,iC;AACA,S;AACA,O;;AAEA,+C;AACA,2E;AACA,W;;AAEA,mC;AACA,c;AACA,4E;AACA,6D;AACA,yB;AACA,gC;AACA,+B;AACA,iC;AACA,8B;AACA,iB;AACA,gE;AACA,yG;AACA,a;AACA,W;AACA,S;AACA,O;;AAEA,mB;AACA,sC;AACA,2G;;AAEA,2C;AACA,uB;AACA,K;;AAEA,yD;AACA,2B;AACA,kC;AACA,2C;AACA,2E;AACA,8B;AACA,O;AACA,K;AACA,G;;AAEA,qE;;AAEA,yD;AACA,oD;;AAEA,gB;;AAEA,I;;;;;;;;;;;;;;;;;;AC5VA,8G;;;;;;;;;;;;;;;;;;;ACAA,uC;AACA,c;AACA,6C;AACA,yC;AACA,mC;AACA,iD;AACA,0C;AACA,qC;AACA,uD;AACA,qC;AACA,oC;AACA,sC;AACA,gD;AACA,2D;AACA,mE;AACA,wD;AACA,yD;AACA,0D;AACA,I;AACA,kD;AACA,+C;AACA,C","sourcesContent":["//fgnass.github.com/spin.js#v1.3\r\n\r\n/**\r\n * Copyright (c) 2011-2013 Felix Gnass\r\n * Licensed under the MIT license\r\n */\r\n(function(root, factory) {\r\n\r\n  /* CommonJS */\r\n  if (typeof exports == 'object')  module.exports = factory()\r\n\r\n  /* AMD module */\r\n  else if (typeof define == 'function' && define.amd) define(factory)\r\n\r\n  /* Browser global */\r\n  else root.Spinner = factory()\r\n}\r\n(this, function() {\r\n  \"use strict\";\r\n\r\n  var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */\r\n    , animations = {} /* Animation rules keyed by their name */\r\n    , useCssAnimations /* Whether to use CSS animations or setTimeout */\r\n\r\n  /**\r\n   * Utility function to create elements. If no tag name is given,\r\n   * a DIV is created. Optionally properties can be passed.\r\n   */\r\n  function createEl(tag, prop) {\r\n    var el = document.createElement(tag || 'div')\r\n      , n\r\n\r\n    for(n in prop) el[n] = prop[n]\r\n    return el\r\n  }\r\n\r\n  /**\r\n   * Appends children and returns the parent.\r\n   */\r\n  function ins(parent /* child1, child2, ...*/) {\r\n    for (var i=1, n=arguments.length; i<n; i++)\r\n      parent.appendChild(arguments[i])\r\n\r\n    return parent\r\n  }\r\n\r\n  /**\r\n   * Insert a new stylesheet to hold the @keyframe or VML rules.\r\n   */\r\n  var sheet = (function() {\r\n    var el = createEl('style', {type : 'text/css'})\r\n    ins(document.getElementsByTagName('head')[0], el)\r\n    return el.sheet || el.styleSheet\r\n  }())\r\n\r\n  /**\r\n   * Creates an opacity keyframe animation rule and returns its name.\r\n   * Since most mobile Webkits have timing issues with animation-delay,\r\n   * we create separate rules for each line/segment.\r\n   */\r\n  function addAnimation(alpha, trail, i, lines) {\r\n    var name = ['opacity', trail, ~~(alpha*100), i, lines].join('-')\r\n      , start = 0.01 + i/lines * 100\r\n      , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)\r\n      , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()\r\n      , pre = prefix && '-' + prefix + '-' || ''\r\n\r\n    if (!animations[name]) {\r\n      sheet.insertRule(\r\n        '@' + pre + 'keyframes ' + name + '{' +\r\n        '0%{opacity:' + z + '}' +\r\n        start + '%{opacity:' + alpha + '}' +\r\n        (start+0.01) + '%{opacity:1}' +\r\n        (start+trail) % 100 + '%{opacity:' + alpha + '}' +\r\n        '100%{opacity:' + z + '}' +\r\n        '}', sheet.cssRules.length)\r\n\r\n      animations[name] = 1\r\n    }\r\n\r\n    return name\r\n  }\r\n\r\n  /**\r\n   * Tries various vendor prefixes and returns the first supported property.\r\n   */\r\n  function vendor(el, prop) {\r\n    var s = el.style\r\n      , pp\r\n      , i\r\n\r\n    if(s[prop] !== undefined) return prop\r\n    prop = prop.charAt(0).toUpperCase() + prop.slice(1)\r\n    for(i=0; i<prefixes.length; i++) {\r\n      pp = prefixes[i]+prop\r\n      if(s[pp] !== undefined) return pp\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets multiple style properties at once.\r\n   */\r\n  function css(el, prop) {\r\n    for (var n in prop)\r\n      el.style[vendor(el, n)||n] = prop[n]\r\n\r\n    return el\r\n  }\r\n\r\n  /**\r\n   * Fills in default values.\r\n   */\r\n  function merge(obj) {\r\n    for (var i=1; i < arguments.length; i++) {\r\n      var def = arguments[i]\r\n      for (var n in def)\r\n        if (obj[n] === undefined) obj[n] = def[n]\r\n    }\r\n    return obj\r\n  }\r\n\r\n  /**\r\n   * Returns the absolute page-offset of the given element.\r\n   */\r\n  function pos(el) {\r\n    var o = { x:el.offsetLeft, y:el.offsetTop }\r\n    while((el = el.offsetParent))\r\n      o.x+=el.offsetLeft, o.y+=el.offsetTop\r\n\r\n    return o\r\n  }\r\n\r\n  // Built-in defaults\r\n\r\n  var defaults = {\r\n    lines: 12,            // The number of lines to draw\r\n    length: 7,            // The length of each line\r\n    width: 5,             // The line thickness\r\n    radius: 10,           // The radius of the inner circle\r\n    rotate: 0,            // Rotation offset\r\n    corners: 1,           // Roundness (0..1)\r\n    color: '#000',        // #rgb or #rrggbb\r\n    direction: 1,         // 1: clockwise, -1: counterclockwise\r\n    speed: 1,             // Rounds per second\r\n    trail: 100,           // Afterglow percentage\r\n    opacity: 1/4,         // Opacity of the lines\r\n    fps: 20,              // Frames per second when using setTimeout()\r\n    zIndex: 2e9,          // Use a high z-index by default\r\n    className: 'spinner', // CSS class to assign to the element\r\n    top: 'auto',          // center vertically\r\n    left: 'auto',         // center horizontally\r\n    position: 'relative'  // element position\r\n  }\r\n\r\n  /** The constructor */\r\n  function Spinner(o) {\r\n    if (typeof this == 'undefined') return new Spinner(o)\r\n    this.opts = merge(o || {}, Spinner.defaults, defaults)\r\n  }\r\n\r\n  // Global defaults that override the built-ins:\r\n  Spinner.defaults = {}\r\n\r\n  merge(Spinner.prototype, {\r\n\r\n    /**\r\n     * Adds the spinner to the given target element. If this instance is already\r\n     * spinning, it is automatically removed from its previous target b calling\r\n     * stop() internally.\r\n     */\r\n    spin: function(target) {\r\n      this.stop()\r\n\r\n      var self = this\r\n        , o = self.opts\r\n        , el = self.el = css(createEl(0, {className: o.className}), {position: o.position, width: 0, zIndex: o.zIndex})\r\n        , mid = o.radius+o.length+o.width\r\n        , ep // element position\r\n        , tp // target position\r\n\r\n      if (target) {\r\n        target.insertBefore(el, target.firstChild||null)\r\n        tp = pos(target)\r\n        ep = pos(el)\r\n        css(el, {\r\n          left: (o.left == 'auto' ? tp.x-ep.x + (target.offsetWidth >> 1) : parseInt(o.left, 10) + mid) + 'px',\r\n          top: (o.top == 'auto' ? tp.y-ep.y + (target.offsetHeight >> 1) : parseInt(o.top, 10) + mid)  + 'px'\r\n        })\r\n      }\r\n\r\n      el.setAttribute('role', 'progressbar')\r\n      self.lines(el, self.opts)\r\n\r\n      if (!useCssAnimations) {\r\n        // No CSS animation support, use setTimeout() instead\r\n        var i = 0\r\n          , start = (o.lines - 1) * (1 - o.direction) / 2\r\n          , alpha\r\n          , fps = o.fps\r\n          , f = fps/o.speed\r\n          , ostep = (1-o.opacity) / (f*o.trail / 100)\r\n          , astep = f/o.lines\r\n\r\n        ;(function anim() {\r\n          i++;\r\n          for (var j = 0; j < o.lines; j++) {\r\n            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)\r\n\r\n            self.opacity(el, j * o.direction + start, alpha, o)\r\n          }\r\n          self.timeout = self.el && setTimeout(anim, ~~(1000/fps))\r\n        })()\r\n      }\r\n      return self\r\n    },\r\n\r\n    /**\r\n     * Stops and removes the Spinner.\r\n     */\r\n    stop: function() {\r\n      var el = this.el\r\n      if (el) {\r\n        clearTimeout(this.timeout)\r\n        if (el.parentNode) el.parentNode.removeChild(el)\r\n        this.el = undefined\r\n      }\r\n      return this\r\n    },\r\n\r\n    /**\r\n     * Internal method that draws the individual lines. Will be overwritten\r\n     * in VML fallback mode below.\r\n     */\r\n    lines: function(el, o) {\r\n      var i = 0\r\n        , start = (o.lines - 1) * (1 - o.direction) / 2\r\n        , seg\r\n\r\n      function fill(color, shadow) {\r\n        return css(createEl(), {\r\n          position: 'absolute',\r\n          width: (o.length+o.width) + 'px',\r\n          height: o.width + 'px',\r\n          background: color,\r\n          boxShadow: shadow,\r\n          transformOrigin: 'left',\r\n          transform: 'rotate(' + ~~(360/o.lines*i+o.rotate) + 'deg) translate(' + o.radius+'px' +',0)',\r\n          borderRadius: (o.corners * o.width>>1) + 'px'\r\n        })\r\n      }\r\n\r\n      for (; i < o.lines; i++) {\r\n        seg = css(createEl(), {\r\n          position: 'absolute',\r\n          top: 1+~(o.width/2) + 'px',\r\n          transform: o.hwaccel ? 'translate3d(0,0,0)' : '',\r\n          opacity: o.opacity,\r\n          animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1/o.speed + 's linear infinite'\r\n        })\r\n\r\n        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), {top: 2+'px'}))\r\n\r\n        ins(el, ins(seg, fill(o.color, '0 0 1px rgba(0,0,0,.1)')))\r\n      }\r\n      return el\r\n    },\r\n\r\n    /**\r\n     * Internal method that adjusts the opacity of a single line.\r\n     * Will be overwritten in VML fallback mode below.\r\n     */\r\n    opacity: function(el, i, val) {\r\n      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val\r\n    }\r\n\r\n  })\r\n\r\n\r\n  function initVML() {\r\n\r\n    /* Utility function to create a VML tag */\r\n    function vml(tag, attr) {\r\n      return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr)\r\n    }\r\n\r\n    // No CSS transforms but VML support, add a CSS rule for VML elements:\r\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')\r\n\r\n    Spinner.prototype.lines = function(el, o) {\r\n      var r = o.length+o.width\r\n        , s = 2*r\r\n\r\n      function grp() {\r\n        return css(\r\n          vml('group', {\r\n            coordsize: s + ' ' + s,\r\n            coordorigin: -r + ' ' + -r\r\n          }),\r\n          { width: s, height: s }\r\n        )\r\n      }\r\n\r\n      var margin = -(o.width+o.length)*2 + 'px'\r\n        , g = css(grp(), {position: 'absolute', top: margin, left: margin})\r\n        , i\r\n\r\n      function seg(i, dx, filter) {\r\n        ins(g,\r\n          ins(css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx}),\r\n            ins(css(vml('roundrect', {arcsize: o.corners}), {\r\n                width: r,\r\n                height: o.width,\r\n                left: o.radius,\r\n                top: -o.width>>1,\r\n                filter: filter\r\n              }),\r\n              vml('fill', {color: o.color, opacity: o.opacity}),\r\n              vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change\r\n            )\r\n          )\r\n        )\r\n      }\r\n\r\n      if (o.shadow)\r\n        for (i = 1; i <= o.lines; i++)\r\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')\r\n\r\n      for (i = 1; i <= o.lines; i++) seg(i)\r\n      return ins(el, g)\r\n    }\r\n\r\n    Spinner.prototype.opacity = function(el, i, val, o) {\r\n      var c = el.firstChild\r\n      o = o.shadow && o.lines || 0\r\n      if (c && i+o < c.childNodes.length) {\r\n        c = c.childNodes[i+o]; c = c && c.firstChild; c = c && c.firstChild\r\n        if (c) c.opacity = val\r\n      }\r\n    }\r\n  }\r\n\r\n  var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})\r\n\r\n  if (!vendor(probe, 'transform') && probe.adj) initVML()\r\n  else useCssAnimations = vendor(probe, 'animation')\r\n\r\n  return Spinner\r\n\r\n}));","Template.__define__(\"spinner\",Package.handlebars.Handlebars.json_ast_to_func([\"<div id=\\\"spinner\\\"></div>\"]));\n","Template.spinner.rendered = function(){\r\n  var opts = {\r\n    lines: 13, // The number of lines to draw\r\n    length: 8, // The length of each line\r\n    width: 3, // The line thickness\r\n    radius: 12, // The radius of the inner circle\r\n    corners: 1, // Corner roundness (0..1)\r\n    rotate: 0, // The rotation offset\r\n    direction: 1, // 1: clockwise, -1: counterclockwise\r\n    color: '#000', // #rgb or #rrggbb\r\n    speed: 1.2, // Rounds per second\r\n    trail: 60, // Afterglow percentage\r\n    shadow: false, // Whether to render a shadow\r\n    hwaccel: false, // Whether to use hardware acceleration\r\n    className: 'spinner', // The CSS class to assign to the spinner\r\n    zIndex: 2e9, // The z-index (defaults to 2000000000)\r\n    top: 'auto', // Top position relative to parent in px\r\n    left: 'auto' // Left position relative to parent in px\r\n  };\r\n  var target = document.getElementById('spinner');\r\n  var spinner = new Spinner(opts).spin(target);\r\n}"]}