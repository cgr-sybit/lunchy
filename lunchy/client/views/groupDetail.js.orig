Meteor.subscribe('proposals');
Meteor.subscribe('admitters');

Template.groupDetail.helpers({
    disabledOnOtherGroups: function(){
        var selectedGroupId = Session.get('selectedGroup');
        if(UsersToGroups.find({userId: Meteor.userId(), group: selectedGroupId}).count() == 0){
            return "disabled='disabled'";
        }else{
            return "";
        }
    },
    disabledForPastProposals:function(){
        var currentDateString = Session.get('currentDate');
        var currentDate = dateFromString(currentDateString);
        console.log('currentDateParsed:', currentDate);
        if(currentDate.getTime() < dateFromString(currentDateWithoutTime()).getTime()){
            return "disabled='disabled'";
        }else{
            return "";
        }
    },
    proposals: function(){
        var selectedGroupId = Session.get('selectedGroup');
        var dateFromSession = Session.get('currentDate');
        return Proposals.find({'groupId' : selectedGroupId, 'creationDate': dateFromSession});
    },
    groupObject: function(){
        var groupId = Session.get('selectedGroup');
        return Groups.findOne(groupId);
    },
    showDate: function(){
        var currentDate = Session.get('currentDate');
        var today = currentDateWithoutTime();
        if(currentDate === today){
            return "Heute, " + moment(currentDate).format('LL');
        }else{
            return moment(currentDate).format('LL');
        }
    },
    hasGroup: function() {
//        todo@cba wie kann ich auf groupObject zugreifen?
       // return groupObject != null;
        var groupId = Session.get('selectedGroup');
        return Groups.findOne(groupId) != null;
    }
//    topProposal: function() {
//        var proposals = Template.groupDetail.helpers.proposals();
//        myProposals = [];
//        _.forEach(propasals, function(propasal, i, propasals) {
//            myProposals.push(Admitters.find({'proposalId': proposalId}).count());
//            console.log(myProposals);
//        });
//    }
});

Template.admitterList.helpers({

    admittersOfProposal: function(proposalId){
        return Admitters.find({'proposalId': proposalId});
    },
    renderDraggable: function(id) {
<<<<<<< HEAD
        var selectedGroupId = Session.get('selectedGroup');
        if(UsersToGroups.find({userId: Meteor.userId(), group: selectedGroupId}).count() == 0){
            return "";
        }else{
            return (Meteor.userId()+Session.get("currentDate")) == id ? "draggable" : "";
=======
        return (Meteor.userId()+Session.get("currentDate")) == id ? "draggable" : "";
    },
    renderBadgeType: function(admitterId){
        if(admitterId === Meteor.userId()){
            return 'badge-warning'
        } else {
            return 'badge-info';
>>>>>>> refs/heads/dev
        }
    }
});

Template.groupDetail.events(
    {
        //TODO: checken ob date in der Vergangenheit liegt.
        'click #create_proposal': function (evt) {
            evt.preventDefault();
            var dateFromSession = Session.get('currentDate');
            var insert = {
                description: $("#proposalDescription").val(),
                time: $("#proposalTime").val(),
                creationDate: dateFromSession,
                creator: Meteor.userId(),
                creatorName: Meteor.users.findOne(Meteor.userId()).emails[0].address.split("@")[0],
                groupId: Session.get('selectedGroup')
            };

            Proposals.insert(insert);
        },
        'click .proposalbutton': function (evt) {

            var proposalId = $(evt.currentTarget).attr("id");
            var currentDate = Session.get('currentDate');


            var result = Admitters.findOne(Meteor.userId()+currentDate);


            if(result && result.proposalId == proposalId) {
                Admitters.remove(Meteor.userId()+currentDate);
            }
            else if(result) {
                Admitters.update(Meteor.userId() + currentDate, {$set: {proposalId:proposalId}});
            } else {
                var insert = {
                    _id: Meteor.userId() + currentDate,
                    admitterId: Meteor.userId(),
                    admitterName:Meteor.users.findOne(Meteor.userId()).emails[0].address.split("@")[0],
                    proposalId:proposalId
                };
                var id = Admitters.insert(insert);
            }
        },
        'click #btnDatePast': function (evt) {
            var currentDateString = Session.get('currentDate');
            var currentDateTimestamp = dateFromString(currentDateString).getTime();
            var currentDateTimestampMinusOneDay = currentDateTimestamp - (60*60*24*1000);
            var currentDateMinusOneDay = new Date(currentDateTimestampMinusOneDay);
            console.log("click .btnDatePast: " + currentDateString);
            Session.set('currentDate', formattedDate(currentDateMinusOneDay));
            currentDateString = Session.get('currentDate');
            console.log("click .btnDatePast: " + currentDateString);
        },
        'click #btnDateFuture': function (evt) {
            var currentDateString = Session.get('currentDate');
            var currentDateTimestamp = dateFromString(currentDateString).getTime();
            var currentDateTimestampMinusOneDay = currentDateTimestamp + (60*60*24*1000);
            var currentDatePlusOneDay = new Date(currentDateTimestampMinusOneDay);
            console.log("click .btnDateFuture: " + currentDateString);
            Session.set('currentDate', formattedDate(currentDatePlusOneDay));
            currentDateString = Session.get('currentDate');
            console.log("click .btnDateFuture: " + currentDateString);
        }

    }
);

Template.groupDetail.rendered = function () {
    $( ".draggable" ).draggable();
    $(".proposalDroppable").droppable({
        activeClass: "activeColor",
        hoverClass: "hoverColor",

        drop: function (event, ui) {
            var proposalId = $(this).attr("id").split('_')[1];
            $("#" + proposalId).click();
        }
    });
};


